
stm32f407vet6-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008644  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bbc  080087d8  080087d8  000097d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009394  08009394  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009394  08009394  0000a394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800939c  0800939c  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800939c  0800939c  0000a39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093a0  080093a0  0000a3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080093a4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d8  2**0
                  CONTENTS
 10 .bss          00000508  200001d8  200001d8  0000b1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006e0  200006e0  0000b1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d755  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026fa  00000000  00000000  0001895d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  0001b058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000859  00000000  00000000  0001bb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002276c  00000000  00000000  0001c3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f15f  00000000  00000000  0003eb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6fbd  00000000  00000000  0004dc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114c39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d20  00000000  00000000  00114c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0011899c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087bc 	.word	0x080087bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080087bc 	.word	0x080087bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <GetDataCount>:

/**
 * @brief 버퍼에 저장된 데이터 개수
 */
static uint32_t GetDataCount(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
    if (write_pos >= read_pos) {
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <GetDataCount+0x34>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <GetDataCount+0x38>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d305      	bcc.n	8000ef0 <GetDataCount+0x1c>
        return write_pos - read_pos;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <GetDataCount+0x34>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <GetDataCount+0x38>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	e006      	b.n	8000efe <GetDataCount+0x2a>
    } else {
        return DMA_LOG_BUFFER_SIZE - read_pos + write_pos;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <GetDataCount+0x34>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <GetDataCount+0x38>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
    }
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	200003f4 	.word	0x200003f4
 8000f0c:	200003f8 	.word	0x200003f8

08000f10 <WriteToBuffer>:

/**
 * @brief 버퍼에 데이터 쓰기
 */
static uint32_t WriteToBuffer(const uint8_t *data, uint32_t len)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
    uint32_t written = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1e:	b672      	cpsid	i
}
 8000f20:	bf00      	nop

    __disable_irq();

    for (uint32_t i = 0; i < len; i++) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	e01b      	b.n	8000f60 <WriteToBuffer+0x50>
        uint32_t next_pos = (write_pos + 1) % DMA_LOG_BUFFER_SIZE;
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <WriteToBuffer+0x70>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f32:	60fb      	str	r3, [r7, #12]

        // 버퍼 가득 참 체크
        if (next_pos == read_pos) {
 8000f34:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <WriteToBuffer+0x74>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d015      	beq.n	8000f6a <WriteToBuffer+0x5a>
            break;  // 더 이상 쓸 수 없음
        }

        log_buffer[write_pos] = data[i];
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	441a      	add	r2, r3
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <WriteToBuffer+0x70>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	7811      	ldrb	r1, [r2, #0]
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f88 <WriteToBuffer+0x78>)
 8000f4c:	54d1      	strb	r1, [r2, r3]
        write_pos = next_pos;
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f80 <WriteToBuffer+0x70>)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6013      	str	r3, [r2, #0]
        written++;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < len; i++) {
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d3df      	bcc.n	8000f28 <WriteToBuffer+0x18>
 8000f68:	e000      	b.n	8000f6c <WriteToBuffer+0x5c>
            break;  // 더 이상 쓸 수 없음
 8000f6a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000f6c:	b662      	cpsie	i
}
 8000f6e:	bf00      	nop
    }

    __enable_irq();

    return written;
 8000f70:	697b      	ldr	r3, [r7, #20]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	371c      	adds	r7, #28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200003f4 	.word	0x200003f4
 8000f84:	200003f8 	.word	0x200003f8
 8000f88:	200001f4 	.word	0x200001f4

08000f8c <ReadFromBuffer>:

/**
 * @brief 버퍼에서 데이터 읽기
 */
static uint32_t ReadFromBuffer(uint8_t *data, uint32_t max_len)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
    uint32_t read = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9a:	b672      	cpsid	i
}
 8000f9c:	bf00      	nop

    __disable_irq();

    while (read_pos != write_pos && read < max_len) {
 8000f9e:	e011      	b.n	8000fc4 <ReadFromBuffer+0x38>
        data[read] = log_buffer[read_pos];
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <ReadFromBuffer+0x60>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	440b      	add	r3, r1
 8000faa:	4911      	ldr	r1, [pc, #68]	@ (8000ff0 <ReadFromBuffer+0x64>)
 8000fac:	5c8a      	ldrb	r2, [r1, r2]
 8000fae:	701a      	strb	r2, [r3, #0]
        read_pos = (read_pos + 1) % DMA_LOG_BUFFER_SIZE;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <ReadFromBuffer+0x60>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fba:	4a0c      	ldr	r2, [pc, #48]	@ (8000fec <ReadFromBuffer+0x60>)
 8000fbc:	6013      	str	r3, [r2, #0]
        read++;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
    while (read_pos != write_pos && read < max_len) {
 8000fc4:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <ReadFromBuffer+0x60>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <ReadFromBuffer+0x68>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d003      	beq.n	8000fd8 <ReadFromBuffer+0x4c>
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d3e3      	bcc.n	8000fa0 <ReadFromBuffer+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fd8:	b662      	cpsie	i
}
 8000fda:	bf00      	nop
    }

    __enable_irq();

    return read;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	200003f8 	.word	0x200003f8
 8000ff0:	200001f4 	.word	0x200001f4
 8000ff4:	200003f4 	.word	0x200003f4

08000ff8 <DMA_Log_Init>:

/**
 * @brief DMA 로그 시스템 초기화
 */
void DMA_Log_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    write_pos = 0;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <DMA_Log_Init+0x20>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
    read_pos = 0;
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <DMA_Log_Init+0x24>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
    dma_busy = 0;
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <DMA_Log_Init+0x28>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]

    printf("DMA Log System Initialized\n");
 800100e:	4805      	ldr	r0, [pc, #20]	@ (8001024 <DMA_Log_Init+0x2c>)
 8001010:	f005 faf6 	bl	8006600 <puts>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200003f4 	.word	0x200003f4
 800101c:	200003f8 	.word	0x200003f8
 8001020:	200003fc 	.word	0x200003fc
 8001024:	080087d8 	.word	0x080087d8

08001028 <DMA_Log_Printf>:

/**
 * @brief DMA 로그 출력
 */
void DMA_Log_Printf(const char* format, ...)
{
 8001028:	b40f      	push	{r0, r1, r2, r3}
 800102a:	b580      	push	{r7, lr}
 800102c:	b0a2      	sub	sp, #136	@ 0x88
 800102e:	af00      	add	r7, sp, #0
    char temp[DMA_LOG_MAX_MESSAGE];
    va_list args;

    va_start(args, format);
 8001030:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001034:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(temp, DMA_LOG_MAX_MESSAGE, format, args);
 8001036:	1d38      	adds	r0, r7, #4
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800103e:	2180      	movs	r1, #128	@ 0x80
 8001040:	f005 fb58 	bl	80066f4 <vsniprintf>
 8001044:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(args);

    if (len > 0) {
 8001048:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd06      	ble.n	800105e <DMA_Log_Printf+0x36>
        WriteToBuffer((uint8_t*)temp, len);
 8001050:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff59 	bl	8000f10 <WriteToBuffer>
    }
}
 800105e:	bf00      	nop
 8001060:	3788      	adds	r7, #136	@ 0x88
 8001062:	46bd      	mov	sp, r7
 8001064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001068:	b004      	add	sp, #16
 800106a:	4770      	bx	lr

0800106c <StartDMATransmission>:

/**
 * @brief DMA 전송 시작
 */
static void StartDMATransmission(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
    if (dma_busy) {
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <StartDMATransmission+0x74>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d12a      	bne.n	80010d2 <StartDMATransmission+0x66>
        return;  // 이미 전송 중
    }

    uint32_t data_count = GetDataCount();
 800107c:	f7ff ff2a 	bl	8000ed4 <GetDataCount>
 8001080:	60f8      	str	r0, [r7, #12]
    if (data_count == 0) {
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d026      	beq.n	80010d6 <StartDMATransmission+0x6a>
        return;  // 전송할 데이터 없음
    }

    // 전송할 크기 결정
    uint32_t tx_size = (data_count > DMA_LOG_MAX_MESSAGE) ?
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b80      	cmp	r3, #128	@ 0x80
 800108c:	bf28      	it	cs
 800108e:	2380      	movcs	r3, #128	@ 0x80
 8001090:	60bb      	str	r3, [r7, #8]
                       DMA_LOG_MAX_MESSAGE : data_count;

    // 버퍼에서 데이터 읽기
    uint32_t read_size = ReadFromBuffer(tx_buffer, tx_size);
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	4813      	ldr	r0, [pc, #76]	@ (80010e4 <StartDMATransmission+0x78>)
 8001096:	f7ff ff79 	bl	8000f8c <ReadFromBuffer>
 800109a:	6078      	str	r0, [r7, #4]

    if (read_size > 0) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d01a      	beq.n	80010d8 <StartDMATransmission+0x6c>
        dma_busy = 1;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <StartDMATransmission+0x74>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
        HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(&huart3, tx_buffer, read_size);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	490d      	ldr	r1, [pc, #52]	@ (80010e4 <StartDMATransmission+0x78>)
 80010b0:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <StartDMATransmission+0x7c>)
 80010b2:	f003 fbd9 	bl	8004868 <HAL_UART_Transmit_DMA>
 80010b6:	4603      	mov	r3, r0
 80010b8:	70fb      	strb	r3, [r7, #3]

        if (status != HAL_OK) {
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00b      	beq.n	80010d8 <StartDMATransmission+0x6c>
            dma_busy = 0;  // 실패 시 리셋
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <StartDMATransmission+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
            printf("DMA TX Failed: %d\n", status);
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4808      	ldr	r0, [pc, #32]	@ (80010ec <StartDMATransmission+0x80>)
 80010cc:	f005 fa28 	bl	8006520 <iprintf>
 80010d0:	e002      	b.n	80010d8 <StartDMATransmission+0x6c>
        return;  // 이미 전송 중
 80010d2:	bf00      	nop
 80010d4:	e000      	b.n	80010d8 <StartDMATransmission+0x6c>
        return;  // 전송할 데이터 없음
 80010d6:	bf00      	nop
        }
    }
}
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200003fc 	.word	0x200003fc
 80010e4:	20000400 	.word	0x20000400
 80010e8:	200004e8 	.word	0x200004e8
 80010ec:	080087f4 	.word	0x080087f4

080010f0 <DMA_Log_Process>:

/**
 * @brief DMA 로그 처리 (메인 루프에서 호출)
 */
void DMA_Log_Process(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    if (!dma_busy) {
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <DMA_Log_Process+0x18>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <DMA_Log_Process+0x12>
        StartDMATransmission();
 80010fe:	f7ff ffb5 	bl	800106c <StartDMATransmission>
    }
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200003fc 	.word	0x200003fc

0800110c <DMA_Log_TxComplete>:

/**
 * @brief DMA 전송 완료 콜백
 */
void DMA_Log_TxComplete(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
    dma_busy = 0;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <DMA_Log_TxComplete+0x14>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]

    // 더 전송할 데이터가 있으면 바로 시작
    StartDMATransmission();
 8001116:	f7ff ffa9 	bl	800106c <StartDMATransmission>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200003fc 	.word	0x200003fc

08001124 <DMA_Log_Flush>:

/**
 * @brief 강제 플러시 (모든 데이터 전송 완료까지 대기)
 */
void DMA_Log_Flush(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 5000;  // 5초 타임아웃
 800112a:	f001 f99d 	bl	8002468 <HAL_GetTick>
 800112e:	4603      	mov	r3, r0
 8001130:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8001134:	3308      	adds	r3, #8
 8001136:	607b      	str	r3, [r7, #4]

    while (GetDataCount() > 0 && HAL_GetTick() < timeout) {
 8001138:	e004      	b.n	8001144 <DMA_Log_Flush+0x20>
        DMA_Log_Process();
 800113a:	f7ff ffd9 	bl	80010f0 <DMA_Log_Process>
        HAL_Delay(10);
 800113e:	200a      	movs	r0, #10
 8001140:	f001 f99e 	bl	8002480 <HAL_Delay>
    while (GetDataCount() > 0 && HAL_GetTick() < timeout) {
 8001144:	f7ff fec6 	bl	8000ed4 <GetDataCount>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d005      	beq.n	800115a <DMA_Log_Flush+0x36>
 800114e:	f001 f98b 	bl	8002468 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4293      	cmp	r3, r2
 8001158:	d8ef      	bhi.n	800113a <DMA_Log_Flush+0x16>
    }

    if (GetDataCount() > 0) {
 800115a:	f7ff febb 	bl	8000ed4 <GetDataCount>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <DMA_Log_Flush+0x4e>
        printf("WARNING: %lu bytes not transmitted\n", GetDataCount());
 8001164:	f7ff feb6 	bl	8000ed4 <GetDataCount>
 8001168:	4603      	mov	r3, r0
 800116a:	4619      	mov	r1, r3
 800116c:	4803      	ldr	r0, [pc, #12]	@ (800117c <DMA_Log_Flush+0x58>)
 800116e:	f005 f9d7 	bl	8006520 <iprintf>
    }
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	08008838 	.word	0x08008838

08001180 <Safe_Performance_Test>:
}
/**
 * @brief 안전한 성능 테스트 (같은 UART 사용)
 */
void Safe_Performance_Test(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	@ 0x30
 8001184:	af00      	add	r7, sp, #0
    printf("=== Single UART Performance Test ===\n");
 8001186:	4875      	ldr	r0, [pc, #468]	@ (800135c <Safe_Performance_Test+0x1dc>)
 8001188:	f005 fa3a 	bl	8006600 <puts>
    printf("Starting test... Please wait\n");
 800118c:	4874      	ldr	r0, [pc, #464]	@ (8001360 <Safe_Performance_Test+0x1e0>)
 800118e:	f005 fa37 	bl	8006600 <puts>
    fflush(stdout);
 8001192:	4b74      	ldr	r3, [pc, #464]	@ (8001364 <Safe_Performance_Test+0x1e4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4618      	mov	r0, r3
 800119a:	f005 f8eb 	bl	8006374 <fflush>
    HAL_Delay(100);
 800119e:	2064      	movs	r0, #100	@ 0x64
 80011a0:	f001 f96e 	bl	8002480 <HAL_Delay>

    /* === 1. printf 성능 측정 === */
    printf("Testing printf performance...\n");
 80011a4:	4870      	ldr	r0, [pc, #448]	@ (8001368 <Safe_Performance_Test+0x1e8>)
 80011a6:	f005 fa2b 	bl	8006600 <puts>
    fflush(stdout);
 80011aa:	4b6e      	ldr	r3, [pc, #440]	@ (8001364 <Safe_Performance_Test+0x1e4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f005 f8df 	bl	8006374 <fflush>

    uint32_t printf_start = HAL_GetTick();
 80011b6:	f001 f957 	bl	8002468 <HAL_GetTick>
 80011ba:	6278      	str	r0, [r7, #36]	@ 0x24

    // printf 테스트 (결과는 즉시 출력 안 함)
    for (int i = 0; i < 100; i++) {
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011c0:	e006      	b.n	80011d0 <Safe_Performance_Test+0x50>
        printf("Printf test %d\n", i);
 80011c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011c4:	4869      	ldr	r0, [pc, #420]	@ (800136c <Safe_Performance_Test+0x1ec>)
 80011c6:	f005 f9ab 	bl	8006520 <iprintf>
    for (int i = 0; i < 100; i++) {
 80011ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011cc:	3301      	adds	r3, #1
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d2:	2b63      	cmp	r3, #99	@ 0x63
 80011d4:	ddf5      	ble.n	80011c2 <Safe_Performance_Test+0x42>
    }
    fflush(stdout);  // 모든 printf 완료까지 대기
 80011d6:	4b63      	ldr	r3, [pc, #396]	@ (8001364 <Safe_Performance_Test+0x1e4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4618      	mov	r0, r3
 80011de:	f005 f8c9 	bl	8006374 <fflush>

    uint32_t printf_end = HAL_GetTick();
 80011e2:	f001 f941 	bl	8002468 <HAL_GetTick>
 80011e6:	6238      	str	r0, [r7, #32]
    uint32_t printf_time = printf_end - printf_start;
 80011e8:	6a3a      	ldr	r2, [r7, #32]
 80011ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	61fb      	str	r3, [r7, #28]

    HAL_Delay(200);  // printf 완전 종료 대기
 80011f0:	20c8      	movs	r0, #200	@ 0xc8
 80011f2:	f001 f945 	bl	8002480 <HAL_Delay>

    /* === 2. DMA 로그 성능 측정 === */
    printf("Testing DMA log performance...\n");
 80011f6:	485e      	ldr	r0, [pc, #376]	@ (8001370 <Safe_Performance_Test+0x1f0>)
 80011f8:	f005 fa02 	bl	8006600 <puts>
    fflush(stdout);
 80011fc:	4b59      	ldr	r3, [pc, #356]	@ (8001364 <Safe_Performance_Test+0x1e4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	4618      	mov	r0, r3
 8001204:	f005 f8b6 	bl	8006374 <fflush>
    HAL_Delay(100);
 8001208:	2064      	movs	r0, #100	@ 0x64
 800120a:	f001 f939 	bl	8002480 <HAL_Delay>

    // DMA 저장 시간 측정
    uint32_t dma_store_start = HAL_GetTick();
 800120e:	f001 f92b 	bl	8002468 <HAL_GetTick>
 8001212:	61b8      	str	r0, [r7, #24]

    for (int i = 0; i < 100; i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001218:	e006      	b.n	8001228 <Safe_Performance_Test+0xa8>
        DMA_Log_Printf("DMA test %d\n", i);
 800121a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800121c:	4855      	ldr	r0, [pc, #340]	@ (8001374 <Safe_Performance_Test+0x1f4>)
 800121e:	f7ff ff03 	bl	8001028 <DMA_Log_Printf>
    for (int i = 0; i < 100; i++) {
 8001222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001224:	3301      	adds	r3, #1
 8001226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800122a:	2b63      	cmp	r3, #99	@ 0x63
 800122c:	ddf5      	ble.n	800121a <Safe_Performance_Test+0x9a>
    }

    uint32_t dma_store_end = HAL_GetTick();
 800122e:	f001 f91b 	bl	8002468 <HAL_GetTick>
 8001232:	6178      	str	r0, [r7, #20]
    uint32_t dma_store_time = dma_store_end - dma_store_start;
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	613b      	str	r3, [r7, #16]

    // DMA 전송 시간 측정
    uint32_t dma_tx_start = HAL_GetTick();
 800123c:	f001 f914 	bl	8002468 <HAL_GetTick>
 8001240:	60f8      	str	r0, [r7, #12]
    DMA_Log_Flush();
 8001242:	f7ff ff6f 	bl	8001124 <DMA_Log_Flush>
    uint32_t dma_tx_end = HAL_GetTick();
 8001246:	f001 f90f 	bl	8002468 <HAL_GetTick>
 800124a:	60b8      	str	r0, [r7, #8]
    uint32_t dma_tx_time = dma_tx_end - dma_tx_start;
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	607b      	str	r3, [r7, #4]

    /* === 3. 결과 출력 (모든 테스트 완료 후) === */
    printf("\n=== Performance Results ===\n");
 8001254:	4848      	ldr	r0, [pc, #288]	@ (8001378 <Safe_Performance_Test+0x1f8>)
 8001256:	f005 f9d3 	bl	8006600 <puts>
    fflush(stdout);
 800125a:	4b42      	ldr	r3, [pc, #264]	@ (8001364 <Safe_Performance_Test+0x1e4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f005 f887 	bl	8006374 <fflush>
    printf("Test Messages: 100 each\n");
 8001266:	4845      	ldr	r0, [pc, #276]	@ (800137c <Safe_Performance_Test+0x1fc>)
 8001268:	f005 f9ca 	bl	8006600 <puts>
    fflush(stdout);
 800126c:	4b3d      	ldr	r3, [pc, #244]	@ (8001364 <Safe_Performance_Test+0x1e4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	4618      	mov	r0, r3
 8001274:	f005 f87e 	bl	8006374 <fflush>
    printf("printf time: %lu ms\n", printf_time);
 8001278:	69f9      	ldr	r1, [r7, #28]
 800127a:	4841      	ldr	r0, [pc, #260]	@ (8001380 <Safe_Performance_Test+0x200>)
 800127c:	f005 f950 	bl	8006520 <iprintf>
    fflush(stdout);
 8001280:	4b38      	ldr	r3, [pc, #224]	@ (8001364 <Safe_Performance_Test+0x1e4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4618      	mov	r0, r3
 8001288:	f005 f874 	bl	8006374 <fflush>
    printf("DMA store time: %lu ms\n", dma_store_time);
 800128c:	6939      	ldr	r1, [r7, #16]
 800128e:	483d      	ldr	r0, [pc, #244]	@ (8001384 <Safe_Performance_Test+0x204>)
 8001290:	f005 f946 	bl	8006520 <iprintf>
    fflush(stdout);
 8001294:	4b33      	ldr	r3, [pc, #204]	@ (8001364 <Safe_Performance_Test+0x1e4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	4618      	mov	r0, r3
 800129c:	f005 f86a 	bl	8006374 <fflush>
    printf("DMA transmission time: %lu ms\n", dma_tx_time);
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4839      	ldr	r0, [pc, #228]	@ (8001388 <Safe_Performance_Test+0x208>)
 80012a4:	f005 f93c 	bl	8006520 <iprintf>
    fflush(stdout);
 80012a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001364 <Safe_Performance_Test+0x1e4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f005 f860 	bl	8006374 <fflush>
    printf("DMA total time: %lu ms\n", dma_store_time + dma_tx_time);
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	4833      	ldr	r0, [pc, #204]	@ (800138c <Safe_Performance_Test+0x20c>)
 80012be:	f005 f92f 	bl	8006520 <iprintf>
    fflush(stdout);
 80012c2:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <Safe_Performance_Test+0x1e4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f005 f853 	bl	8006374 <fflush>
    printf("\nSpeedup Analysis:\n");
 80012ce:	4830      	ldr	r0, [pc, #192]	@ (8001390 <Safe_Performance_Test+0x210>)
 80012d0:	f005 f996 	bl	8006600 <puts>
    fflush(stdout);
 80012d4:	4b23      	ldr	r3, [pc, #140]	@ (8001364 <Safe_Performance_Test+0x1e4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 f84a 	bl	8006374 <fflush>
    printf("- Store speedup: %.1fx faster\n", (float)printf_time / dma_store_time);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012f8:	ee16 0a90 	vmov	r0, s13
 80012fc:	f7ff f924 	bl	8000548 <__aeabi_f2d>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4823      	ldr	r0, [pc, #140]	@ (8001394 <Safe_Performance_Test+0x214>)
 8001306:	f005 f90b 	bl	8006520 <iprintf>
    fflush(stdout);
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <Safe_Performance_Test+0x1e4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	4618      	mov	r0, r3
 8001312:	f005 f82f 	bl	8006374 <fflush>
    printf("- Real-time benefit: %.1f%% CPU time saved\n",
           (float)dma_store_time * 100.0f / printf_time);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001320:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001398 <Safe_Performance_Test+0x218>
 8001324:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001332:	eec7 6a27 	vdiv.f32	s13, s14, s15
    printf("- Real-time benefit: %.1f%% CPU time saved\n",
 8001336:	ee16 0a90 	vmov	r0, s13
 800133a:	f7ff f905 	bl	8000548 <__aeabi_f2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4816      	ldr	r0, [pc, #88]	@ (800139c <Safe_Performance_Test+0x21c>)
 8001344:	f005 f8ec 	bl	8006520 <iprintf>
    fflush(stdout);
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <Safe_Performance_Test+0x1e4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	4618      	mov	r0, r3
 8001350:	f005 f810 	bl	8006374 <fflush>

}
 8001354:	bf00      	nop
 8001356:	3730      	adds	r7, #48	@ 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0800896c 	.word	0x0800896c
 8001360:	08008994 	.word	0x08008994
 8001364:	2000001c 	.word	0x2000001c
 8001368:	080089b4 	.word	0x080089b4
 800136c:	080089d4 	.word	0x080089d4
 8001370:	080089e4 	.word	0x080089e4
 8001374:	08008a04 	.word	0x08008a04
 8001378:	08008a14 	.word	0x08008a14
 800137c:	08008a34 	.word	0x08008a34
 8001380:	08008a4c 	.word	0x08008a4c
 8001384:	08008a64 	.word	0x08008a64
 8001388:	08008a7c 	.word	0x08008a7c
 800138c:	08008a9c 	.word	0x08008a9c
 8001390:	08008ab4 	.word	0x08008ab4
 8001394:	08008ac8 	.word	0x08008ac8
 8001398:	42c80000 	.word	0x42c80000
 800139c:	08008ae8 	.word	0x08008ae8

080013a0 <Realtime_Performance_Test>:

/**
 * @brief 실시간성 테스트 (가장 중요!)
 */
void Realtime_Performance_Test(void)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b08d      	sub	sp, #52	@ 0x34
 80013a4:	af00      	add	r7, sp, #0
    printf("\n=== Real-time Performance Test ===\n");
 80013a6:	4874      	ldr	r0, [pc, #464]	@ (8001578 <Realtime_Performance_Test+0x1d8>)
 80013a8:	f005 f92a 	bl	8006600 <puts>
    printf("Simulating critical tasks with logging...\n");
 80013ac:	4873      	ldr	r0, [pc, #460]	@ (800157c <Realtime_Performance_Test+0x1dc>)
 80013ae:	f005 f927 	bl	8006600 <puts>
    fflush(stdout);
 80013b2:	4b73      	ldr	r3, [pc, #460]	@ (8001580 <Realtime_Performance_Test+0x1e0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 ffdb 	bl	8006374 <fflush>
    HAL_Delay(100);
 80013be:	2064      	movs	r0, #100	@ 0x64
 80013c0:	f001 f85e 	bl	8002480 <HAL_Delay>

    volatile uint32_t dummy_work = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]

    /* === printf 방식: 실시간 태스크 + 로깅 === */
    uint32_t printf_start = HAL_GetTick();
 80013c8:	f001 f84e 	bl	8002468 <HAL_GetTick>
 80013cc:	6178      	str	r0, [r7, #20]

    for (int i = 0; i < 50; i++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013d2:	e020      	b.n	8001416 <Realtime_Performance_Test+0x76>
        // 크리티컬 작업 시뮬레이션
        for (int j = 0; j < 1000; j++) {
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013d8:	e005      	b.n	80013e6 <Realtime_Performance_Test+0x46>
            dummy_work++;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3301      	adds	r3, #1
 80013de:	607b      	str	r3, [r7, #4]
        for (int j = 0; j < 1000; j++) {
 80013e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e2:	3301      	adds	r3, #1
 80013e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013ec:	dbf5      	blt.n	80013da <Realtime_Performance_Test+0x3a>
        }

        // 로깅 (블로킹)
        printf("Critical task %d completed\n", i);
 80013ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80013f0:	4864      	ldr	r0, [pc, #400]	@ (8001584 <Realtime_Performance_Test+0x1e4>)
 80013f2:	f005 f895 	bl	8006520 <iprintf>

        // 또 다른 크리티컬 작업
        for (int j = 0; j < 1000; j++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013fa:	e005      	b.n	8001408 <Realtime_Performance_Test+0x68>
            dummy_work++;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3301      	adds	r3, #1
 8001400:	607b      	str	r3, [r7, #4]
        for (int j = 0; j < 1000; j++) {
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	3301      	adds	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
 8001408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800140e:	dbf5      	blt.n	80013fc <Realtime_Performance_Test+0x5c>
    for (int i = 0; i < 50; i++) {
 8001410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001412:	3301      	adds	r3, #1
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001418:	2b31      	cmp	r3, #49	@ 0x31
 800141a:	dddb      	ble.n	80013d4 <Realtime_Performance_Test+0x34>
        }
    }
    fflush(stdout);
 800141c:	4b58      	ldr	r3, [pc, #352]	@ (8001580 <Realtime_Performance_Test+0x1e0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	4618      	mov	r0, r3
 8001424:	f004 ffa6 	bl	8006374 <fflush>

    uint32_t printf_realtime = HAL_GetTick() - printf_start;
 8001428:	f001 f81e 	bl	8002468 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	613b      	str	r3, [r7, #16]

    HAL_Delay(200);
 8001434:	20c8      	movs	r0, #200	@ 0xc8
 8001436:	f001 f823 	bl	8002480 <HAL_Delay>

    /* === DMA 방식: 실시간 태스크 + 로깅 === */
    uint32_t dma_start = HAL_GetTick();
 800143a:	f001 f815 	bl	8002468 <HAL_GetTick>
 800143e:	60f8      	str	r0, [r7, #12]

    for (int i = 0; i < 50; i++) {
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
 8001444:	e022      	b.n	800148c <Realtime_Performance_Test+0xec>
        // 크리티컬 작업 시뮬레이션
        for (int j = 0; j < 1000; j++) {
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	e005      	b.n	8001458 <Realtime_Performance_Test+0xb8>
            dummy_work++;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3301      	adds	r3, #1
 8001450:	607b      	str	r3, [r7, #4]
        for (int j = 0; j < 1000; j++) {
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3301      	adds	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800145e:	dbf5      	blt.n	800144c <Realtime_Performance_Test+0xac>
        }

        // 로깅 (비동기)
        DMA_Log_Printf("Critical task %d completed\n", i);
 8001460:	6a39      	ldr	r1, [r7, #32]
 8001462:	4848      	ldr	r0, [pc, #288]	@ (8001584 <Realtime_Performance_Test+0x1e4>)
 8001464:	f7ff fde0 	bl	8001028 <DMA_Log_Printf>

        // 또 다른 크리티컬 작업
        for (int j = 0; j < 1000; j++) {
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	e005      	b.n	800147a <Realtime_Performance_Test+0xda>
            dummy_work++;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3301      	adds	r3, #1
 8001472:	607b      	str	r3, [r7, #4]
        for (int j = 0; j < 1000; j++) {
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	3301      	adds	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001480:	dbf5      	blt.n	800146e <Realtime_Performance_Test+0xce>
        }

        // 백그라운드 로그 처리
        DMA_Log_Process();
 8001482:	f7ff fe35 	bl	80010f0 <DMA_Log_Process>
    for (int i = 0; i < 50; i++) {
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	3301      	adds	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	2b31      	cmp	r3, #49	@ 0x31
 8001490:	ddd9      	ble.n	8001446 <Realtime_Performance_Test+0xa6>
    }

    uint32_t dma_realtime = HAL_GetTick() - dma_start;
 8001492:	f000 ffe9 	bl	8002468 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	60bb      	str	r3, [r7, #8]

    // DMA 전송 완료까지 대기
    DMA_Log_Flush();
 800149e:	f7ff fe41 	bl	8001124 <DMA_Log_Flush>

    /* === 결과 출력 === */
    printf("\n=== Real-time Results ===\n");
 80014a2:	4839      	ldr	r0, [pc, #228]	@ (8001588 <Realtime_Performance_Test+0x1e8>)
 80014a4:	f005 f8ac 	bl	8006600 <puts>
    fflush(stdout);
 80014a8:	4b35      	ldr	r3, [pc, #212]	@ (8001580 <Realtime_Performance_Test+0x1e0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f004 ff60 	bl	8006374 <fflush>
    printf("Critical tasks: 50 cycles each\n");
 80014b4:	4835      	ldr	r0, [pc, #212]	@ (800158c <Realtime_Performance_Test+0x1ec>)
 80014b6:	f005 f8a3 	bl	8006600 <puts>
    fflush(stdout);
 80014ba:	4b31      	ldr	r3, [pc, #196]	@ (8001580 <Realtime_Performance_Test+0x1e0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 ff57 	bl	8006374 <fflush>
    printf("printf + critical tasks: %lu ms\n", printf_realtime);
 80014c6:	6939      	ldr	r1, [r7, #16]
 80014c8:	4831      	ldr	r0, [pc, #196]	@ (8001590 <Realtime_Performance_Test+0x1f0>)
 80014ca:	f005 f829 	bl	8006520 <iprintf>
    fflush(stdout);
 80014ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001580 <Realtime_Performance_Test+0x1e0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 ff4d 	bl	8006374 <fflush>
    printf("DMA log + critical tasks: %lu ms\n", dma_realtime);
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	482d      	ldr	r0, [pc, #180]	@ (8001594 <Realtime_Performance_Test+0x1f4>)
 80014de:	f005 f81f 	bl	8006520 <iprintf>
    fflush(stdout);
 80014e2:	4b27      	ldr	r3, [pc, #156]	@ (8001580 <Realtime_Performance_Test+0x1e0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f004 ff43 	bl	8006374 <fflush>
    printf("Time saved: %lu ms (%.1f%%)\n",
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1ad4      	subs	r4, r2, r3
           printf_realtime - dma_realtime,
           (float)(printf_realtime - dma_realtime) * 100.0f / printf_realtime);
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001502:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001598 <Realtime_Performance_Test+0x1f8>
 8001506:	ee27 7a87 	vmul.f32	s14, s15, s14
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001514:	eec7 6a27 	vdiv.f32	s13, s14, s15
    printf("Time saved: %lu ms (%.1f%%)\n",
 8001518:	ee16 0a90 	vmov	r0, s13
 800151c:	f7ff f814 	bl	8000548 <__aeabi_f2d>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4621      	mov	r1, r4
 8001526:	481d      	ldr	r0, [pc, #116]	@ (800159c <Realtime_Performance_Test+0x1fc>)
 8001528:	f004 fffa 	bl	8006520 <iprintf>
    fflush(stdout);
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <Realtime_Performance_Test+0x1e0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	4618      	mov	r0, r3
 8001534:	f004 ff1e 	bl	8006374 <fflush>
    printf("Real-time improvement: %.1fx faster\n",
           (float)printf_realtime / dma_realtime);
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154c:	eec7 6a27 	vdiv.f32	s13, s14, s15
    printf("Real-time improvement: %.1fx faster\n",
 8001550:	ee16 0a90 	vmov	r0, s13
 8001554:	f7fe fff8 	bl	8000548 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4810      	ldr	r0, [pc, #64]	@ (80015a0 <Realtime_Performance_Test+0x200>)
 800155e:	f004 ffdf 	bl	8006520 <iprintf>
    fflush(stdout);
 8001562:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <Realtime_Performance_Test+0x1e0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4618      	mov	r0, r3
 800156a:	f004 ff03 	bl	8006374 <fflush>
}
 800156e:	bf00      	nop
 8001570:	3734      	adds	r7, #52	@ 0x34
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}
 8001576:	bf00      	nop
 8001578:	08008b14 	.word	0x08008b14
 800157c:	08008b38 	.word	0x08008b38
 8001580:	2000001c 	.word	0x2000001c
 8001584:	08008b64 	.word	0x08008b64
 8001588:	08008b80 	.word	0x08008b80
 800158c:	08008b9c 	.word	0x08008b9c
 8001590:	08008bbc 	.word	0x08008bbc
 8001594:	08008be0 	.word	0x08008be0
 8001598:	42c80000 	.word	0x42c80000
 800159c:	08008c04 	.word	0x08008c04
 80015a0:	08008c24 	.word	0x08008c24

080015a4 <CPU_Usage_Test>:

/**
 * @brief CPU 사용률 테스트
 */
void CPU_Usage_Test(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	@ 0x30
 80015a8:	af00      	add	r7, sp, #0
    printf("\n=== Pure CPU Usage Test ===\n");
 80015aa:	4889      	ldr	r0, [pc, #548]	@ (80017d0 <CPU_Usage_Test+0x22c>)
 80015ac:	f005 f828 	bl	8006600 <puts>
    printf("Only measuring CPU time for log storage\n");
 80015b0:	4888      	ldr	r0, [pc, #544]	@ (80017d4 <CPU_Usage_Test+0x230>)
 80015b2:	f005 f825 	bl	8006600 <puts>
    fflush(stdout);
 80015b6:	4b88      	ldr	r3, [pc, #544]	@ (80017d8 <CPU_Usage_Test+0x234>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 fed9 	bl	8006374 <fflush>

    volatile uint32_t work_counter = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]

    /* === 1. 순수 작업만 === */
    uint32_t pure_start = HAL_GetTick();
 80015c6:	f000 ff4f 	bl	8002468 <HAL_GetTick>
 80015ca:	6238      	str	r0, [r7, #32]

    for (int i = 0; i < 10000; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015d0:	e005      	b.n	80015de <CPU_Usage_Test+0x3a>
        work_counter++;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 10000; i++) {
 80015d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015da:	3301      	adds	r3, #1
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80015e4:	4293      	cmp	r3, r2
 80015e6:	ddf4      	ble.n	80015d2 <CPU_Usage_Test+0x2e>
    }

    uint32_t pure_time = HAL_GetTick() - pure_start;
 80015e8:	f000 ff3e 	bl	8002468 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	61fb      	str	r3, [r7, #28]

    /* === 2. printf 방식 === */
    work_counter = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	603b      	str	r3, [r7, #0]
    uint32_t printf_start = HAL_GetTick();
 80015f8:	f000 ff36 	bl	8002468 <HAL_GetTick>
 80015fc:	61b8      	str	r0, [r7, #24]

    for (int i = 0; i < 10000; i++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001602:	e01c      	b.n	800163e <CPU_Usage_Test+0x9a>
        work_counter++;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	603b      	str	r3, [r7, #0]
        if (i % 100 == 0) {
 800160a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800160c:	4b73      	ldr	r3, [pc, #460]	@ (80017dc <CPU_Usage_Test+0x238>)
 800160e:	fb83 1302 	smull	r1, r3, r3, r2
 8001612:	1159      	asrs	r1, r3, #5
 8001614:	17d3      	asrs	r3, r2, #31
 8001616:	1acb      	subs	r3, r1, r3
 8001618:	2164      	movs	r1, #100	@ 0x64
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <CPU_Usage_Test+0x94>
            printf("Printf progress: %d\n", i);
 8001624:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001626:	486e      	ldr	r0, [pc, #440]	@ (80017e0 <CPU_Usage_Test+0x23c>)
 8001628:	f004 ff7a 	bl	8006520 <iprintf>
            fflush(stdout);  // 블로킹 전송
 800162c:	4b6a      	ldr	r3, [pc, #424]	@ (80017d8 <CPU_Usage_Test+0x234>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fe9e 	bl	8006374 <fflush>
    for (int i = 0; i < 10000; i++) {
 8001638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800163a:	3301      	adds	r3, #1
 800163c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800163e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001640:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001644:	4293      	cmp	r3, r2
 8001646:	dddd      	ble.n	8001604 <CPU_Usage_Test+0x60>
        }
    }

    uint32_t printf_time = HAL_GetTick() - printf_start;
 8001648:	f000 ff0e 	bl	8002468 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	617b      	str	r3, [r7, #20]

    /* === 3. DMA 방식 (순수 저장만) === */
    work_counter = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	603b      	str	r3, [r7, #0]
    uint32_t dma_start = HAL_GetTick();
 8001658:	f000 ff06 	bl	8002468 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

    for (int i = 0; i < 10000; i++) {
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
 8001662:	e026      	b.n	80016b2 <CPU_Usage_Test+0x10e>
        work_counter++;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	603b      	str	r3, [r7, #0]
        if (i % 100 == 0) {
 800166a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166c:	4b5b      	ldr	r3, [pc, #364]	@ (80017dc <CPU_Usage_Test+0x238>)
 800166e:	fb83 1302 	smull	r1, r3, r3, r2
 8001672:	1159      	asrs	r1, r3, #5
 8001674:	17d3      	asrs	r3, r2, #31
 8001676:	1acb      	subs	r3, r1, r3
 8001678:	2164      	movs	r1, #100	@ 0x64
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d103      	bne.n	800168c <CPU_Usage_Test+0xe8>
            DMA_Log_Printf("DMA progress: %d\n", i);
 8001684:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001686:	4857      	ldr	r0, [pc, #348]	@ (80017e4 <CPU_Usage_Test+0x240>)
 8001688:	f7ff fcce 	bl	8001028 <DMA_Log_Printf>

        }
        // 최소한의 DMA 처리 (5000번마다만)
		if (i % 5000 == 0) {
 800168c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800168e:	4b56      	ldr	r3, [pc, #344]	@ (80017e8 <CPU_Usage_Test+0x244>)
 8001690:	fb83 1302 	smull	r1, r3, r3, r2
 8001694:	12d9      	asrs	r1, r3, #11
 8001696:	17d3      	asrs	r3, r2, #31
 8001698:	1acb      	subs	r3, r1, r3
 800169a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <CPU_Usage_Test+0x108>
			DMA_Log_Process();
 80016a8:	f7ff fd22 	bl	80010f0 <DMA_Log_Process>
    for (int i = 0; i < 10000; i++) {
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	3301      	adds	r3, #1
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80016b8:	4293      	cmp	r3, r2
 80016ba:	ddd3      	ble.n	8001664 <CPU_Usage_Test+0xc0>
		}
    }

    uint32_t dma_time = HAL_GetTick() - dma_start;
 80016bc:	f000 fed4 	bl	8002468 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	60fb      	str	r3, [r7, #12]

    /* === 4. 별도로 DMA 전송 시간 측정 === */
    uint32_t transmission_start = HAL_GetTick();
 80016c8:	f000 fece 	bl	8002468 <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
    DMA_Log_Flush();  // 모든 전송 완료
 80016ce:	f7ff fd29 	bl	8001124 <DMA_Log_Flush>
    uint32_t transmission_time = HAL_GetTick() - transmission_start;
 80016d2:	f000 fec9 	bl	8002468 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	607b      	str	r3, [r7, #4]

    /* === 결과 === */
    printf("\n=== Pure CPU Results ===\n");
 80016de:	4843      	ldr	r0, [pc, #268]	@ (80017ec <CPU_Usage_Test+0x248>)
 80016e0:	f004 ff8e 	bl	8006600 <puts>
    fflush(stdout);
 80016e4:	4b3c      	ldr	r3, [pc, #240]	@ (80017d8 <CPU_Usage_Test+0x234>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 fe42 	bl	8006374 <fflush>
    printf("- Pure work: %lu ms\n", pure_time);
 80016f0:	69f9      	ldr	r1, [r7, #28]
 80016f2:	483f      	ldr	r0, [pc, #252]	@ (80017f0 <CPU_Usage_Test+0x24c>)
 80016f4:	f004 ff14 	bl	8006520 <iprintf>
    fflush(stdout);
 80016f8:	4b37      	ldr	r3, [pc, #220]	@ (80017d8 <CPU_Usage_Test+0x234>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	4618      	mov	r0, r3
 8001700:	f004 fe38 	bl	8006374 <fflush>
    printf("- Work + printf: %lu ms\n", printf_time);
 8001704:	6979      	ldr	r1, [r7, #20]
 8001706:	483b      	ldr	r0, [pc, #236]	@ (80017f4 <CPU_Usage_Test+0x250>)
 8001708:	f004 ff0a 	bl	8006520 <iprintf>
    fflush(stdout);
 800170c:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <CPU_Usage_Test+0x234>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	4618      	mov	r0, r3
 8001714:	f004 fe2e 	bl	8006374 <fflush>
    printf("- Work + DMA store: %lu ms\n", dma_time);
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	4837      	ldr	r0, [pc, #220]	@ (80017f8 <CPU_Usage_Test+0x254>)
 800171c:	f004 ff00 	bl	8006520 <iprintf>
    fflush(stdout);
 8001720:	4b2d      	ldr	r3, [pc, #180]	@ (80017d8 <CPU_Usage_Test+0x234>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	4618      	mov	r0, r3
 8001728:	f004 fe24 	bl	8006374 <fflush>
    printf("- DMA transmission: %lu ms (separate)\n", transmission_time);
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4833      	ldr	r0, [pc, #204]	@ (80017fc <CPU_Usage_Test+0x258>)
 8001730:	f004 fef6 	bl	8006520 <iprintf>
    fflush(stdout);
 8001734:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <CPU_Usage_Test+0x234>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fe1a 	bl	8006374 <fflush>

    printf("\nCPU Impact:\n");
 8001740:	482f      	ldr	r0, [pc, #188]	@ (8001800 <CPU_Usage_Test+0x25c>)
 8001742:	f004 ff5d 	bl	8006600 <puts>
    fflush(stdout);
 8001746:	4b24      	ldr	r3, [pc, #144]	@ (80017d8 <CPU_Usage_Test+0x234>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4618      	mov	r0, r3
 800174e:	f004 fe11 	bl	8006374 <fflush>
    printf("- printf CPU overhead: %lu ms\n", printf_time - pure_time);
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4619      	mov	r1, r3
 800175a:	482a      	ldr	r0, [pc, #168]	@ (8001804 <CPU_Usage_Test+0x260>)
 800175c:	f004 fee0 	bl	8006520 <iprintf>
    fflush(stdout);
 8001760:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <CPU_Usage_Test+0x234>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	4618      	mov	r0, r3
 8001768:	f004 fe04 	bl	8006374 <fflush>
    printf("- DMA CPU overhead: %lu ms\n", dma_time - pure_time);
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	4619      	mov	r1, r3
 8001774:	4824      	ldr	r0, [pc, #144]	@ (8001808 <CPU_Usage_Test+0x264>)
 8001776:	f004 fed3 	bl	8006520 <iprintf>
    fflush(stdout);
 800177a:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <CPU_Usage_Test+0x234>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4618      	mov	r0, r3
 8001782:	f004 fdf7 	bl	8006374 <fflush>
    printf("- CPU time saved: %.1f%%\n",
           (float)(printf_time - dma_time) * 100.0f / printf_time);
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001794:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800180c <CPU_Usage_Test+0x268>
 8001798:	ee27 7a87 	vmul.f32	s14, s15, s14
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
    printf("- CPU time saved: %.1f%%\n",
 80017aa:	ee16 0a90 	vmov	r0, s13
 80017ae:	f7fe fecb 	bl	8000548 <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4816      	ldr	r0, [pc, #88]	@ (8001810 <CPU_Usage_Test+0x26c>)
 80017b8:	f004 feb2 	bl	8006520 <iprintf>
    fflush(stdout);
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <CPU_Usage_Test+0x234>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 fdd6 	bl	8006374 <fflush>
}
 80017c8:	bf00      	nop
 80017ca:	3730      	adds	r7, #48	@ 0x30
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	08008c4c 	.word	0x08008c4c
 80017d4:	08008c6c 	.word	0x08008c6c
 80017d8:	2000001c 	.word	0x2000001c
 80017dc:	51eb851f 	.word	0x51eb851f
 80017e0:	08008c94 	.word	0x08008c94
 80017e4:	08008cac 	.word	0x08008cac
 80017e8:	68db8bad 	.word	0x68db8bad
 80017ec:	08008cc0 	.word	0x08008cc0
 80017f0:	08008cdc 	.word	0x08008cdc
 80017f4:	08008cf4 	.word	0x08008cf4
 80017f8:	08008d10 	.word	0x08008d10
 80017fc:	08008d2c 	.word	0x08008d2c
 8001800:	08008d54 	.word	0x08008d54
 8001804:	08008d64 	.word	0x08008d64
 8001808:	08008d84 	.word	0x08008d84
 800180c:	42c80000 	.word	0x42c80000
 8001810:	08008da0 	.word	0x08008da0

08001814 <Comprehensive_Performance_Test>:

/**
 * @brief 종합 성능 테스트
 */
void Comprehensive_Performance_Test(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
    printf("\n");
 8001818:	200a      	movs	r0, #10
 800181a:	f004 fe93 	bl	8006544 <putchar>
    printf("========================================\n");
 800181e:	4824      	ldr	r0, [pc, #144]	@ (80018b0 <Comprehensive_Performance_Test+0x9c>)
 8001820:	f004 feee 	bl	8006600 <puts>
    printf("  STM32F407 Comprehensive Performance\n");
 8001824:	4823      	ldr	r0, [pc, #140]	@ (80018b4 <Comprehensive_Performance_Test+0xa0>)
 8001826:	f004 feeb 	bl	8006600 <puts>
    printf("========================================\n");
 800182a:	4821      	ldr	r0, [pc, #132]	@ (80018b0 <Comprehensive_Performance_Test+0x9c>)
 800182c:	f004 fee8 	bl	8006600 <puts>
    printf("System Clock: %lu Hz\n", HAL_RCC_GetSysClockFreq());
 8001830:	f002 f872 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 8001834:	4603      	mov	r3, r0
 8001836:	4619      	mov	r1, r3
 8001838:	481f      	ldr	r0, [pc, #124]	@ (80018b8 <Comprehensive_Performance_Test+0xa4>)
 800183a:	f004 fe71 	bl	8006520 <iprintf>
    printf("UART Baud Rate: 115200\n");
 800183e:	481f      	ldr	r0, [pc, #124]	@ (80018bc <Comprehensive_Performance_Test+0xa8>)
 8001840:	f004 fede 	bl	8006600 <puts>
    printf("========================================\n");
 8001844:	481a      	ldr	r0, [pc, #104]	@ (80018b0 <Comprehensive_Performance_Test+0x9c>)
 8001846:	f004 fedb 	bl	8006600 <puts>
    fflush(stdout);
 800184a:	4b1d      	ldr	r3, [pc, #116]	@ (80018c0 <Comprehensive_Performance_Test+0xac>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4618      	mov	r0, r3
 8001852:	f004 fd8f 	bl	8006374 <fflush>

    // 1. 기본 성능 테스트
    Safe_Performance_Test();
 8001856:	f7ff fc93 	bl	8001180 <Safe_Performance_Test>
    HAL_Delay(500);
 800185a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800185e:	f000 fe0f 	bl	8002480 <HAL_Delay>

    // 2. 실시간성 테스트 (가장 중요!)
    Realtime_Performance_Test();
 8001862:	f7ff fd9d 	bl	80013a0 <Realtime_Performance_Test>
    HAL_Delay(500);
 8001866:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800186a:	f000 fe09 	bl	8002480 <HAL_Delay>

    // 3. CPU 사용률 테스트
    CPU_Usage_Test();
 800186e:	f7ff fe99 	bl	80015a4 <CPU_Usage_Test>
    HAL_Delay(500);
 8001872:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001876:	f000 fe03 	bl	8002480 <HAL_Delay>

    printf("\n========================================\n");
 800187a:	4812      	ldr	r0, [pc, #72]	@ (80018c4 <Comprehensive_Performance_Test+0xb0>)
 800187c:	f004 fec0 	bl	8006600 <puts>
    printf("  All Performance Tests Completed!\n");
 8001880:	4811      	ldr	r0, [pc, #68]	@ (80018c8 <Comprehensive_Performance_Test+0xb4>)
 8001882:	f004 febd 	bl	8006600 <puts>
    printf("========================================\n");
 8001886:	480a      	ldr	r0, [pc, #40]	@ (80018b0 <Comprehensive_Performance_Test+0x9c>)
 8001888:	f004 feba 	bl	8006600 <puts>
    printf("Key Takeaway: DMA logging provides\n");
 800188c:	480f      	ldr	r0, [pc, #60]	@ (80018cc <Comprehensive_Performance_Test+0xb8>)
 800188e:	f004 feb7 	bl	8006600 <puts>
    printf("non-blocking operation for real-time systems\n");
 8001892:	480f      	ldr	r0, [pc, #60]	@ (80018d0 <Comprehensive_Performance_Test+0xbc>)
 8001894:	f004 feb4 	bl	8006600 <puts>
    printf("========================================\n");
 8001898:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <Comprehensive_Performance_Test+0x9c>)
 800189a:	f004 feb1 	bl	8006600 <puts>
    fflush(stdout);
 800189e:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <Comprehensive_Performance_Test+0xac>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f004 fd65 	bl	8006374 <fflush>
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	08008dbc 	.word	0x08008dbc
 80018b4:	08008de8 	.word	0x08008de8
 80018b8:	08008e10 	.word	0x08008e10
 80018bc:	08008e28 	.word	0x08008e28
 80018c0:	2000001c 	.word	0x2000001c
 80018c4:	08008e40 	.word	0x08008e40
 80018c8:	08008e6c 	.word	0x08008e6c
 80018cc:	08008e90 	.word	0x08008e90
 80018d0:	08008eb4 	.word	0x08008eb4

080018d4 <CS_Low>:
static W25Q128_Handle_t w25q_handle_instance;  // 실제 변수
static W25Q128_Handle_t *w25q_handle = &w25q_handle_instance;  // 포인터


/* CS 핀 제어 */
static void CS_Low(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(w25q_handle->cs_port, w25q_handle->cs_pin, GPIO_PIN_RESET);
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <CS_Low+0x1c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6858      	ldr	r0, [r3, #4]
 80018de:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <CS_Low+0x1c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	891b      	ldrh	r3, [r3, #8]
 80018e4:	2200      	movs	r2, #0
 80018e6:	4619      	mov	r1, r3
 80018e8:	f001 fc9e 	bl	8003228 <HAL_GPIO_WritePin>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000000 	.word	0x20000000

080018f4 <CS_High>:

static void CS_High(void) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(w25q_handle->cs_port, w25q_handle->cs_pin, GPIO_PIN_SET);
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <CS_High+0x1c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6858      	ldr	r0, [r3, #4]
 80018fe:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <CS_High+0x1c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	891b      	ldrh	r3, [r3, #8]
 8001904:	2201      	movs	r2, #1
 8001906:	4619      	mov	r1, r3
 8001908:	f001 fc8e 	bl	8003228 <HAL_GPIO_WritePin>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000000 	.word	0x20000000

08001914 <IsReady>:

/* 상태 확인 */
static bool IsReady(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
    uint8_t cmd = W25Q128_CMD_READ_STATUS;
 800191a:	2305      	movs	r3, #5
 800191c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    CS_Low();
 800191e:	f7ff ffd9 	bl	80018d4 <CS_Low>
    HAL_SPI_Transmit(w25q_handle->hspi, &cmd, 1, 100);
 8001922:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <IsReady+0x4c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	1df9      	adds	r1, r7, #7
 800192a:	2364      	movs	r3, #100	@ 0x64
 800192c:	2201      	movs	r2, #1
 800192e:	f002 f976 	bl	8003c1e <HAL_SPI_Transmit>
    HAL_SPI_Receive(w25q_handle->hspi, &status, 1, 100);
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <IsReady+0x4c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	1db9      	adds	r1, r7, #6
 800193a:	2364      	movs	r3, #100	@ 0x64
 800193c:	2201      	movs	r2, #1
 800193e:	f002 fab2 	bl	8003ea6 <HAL_SPI_Receive>
    CS_High();
 8001942:	f7ff ffd7 	bl	80018f4 <CS_High>

    return !(status & W25Q128_STATUS_BUSY);
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	b2db      	uxtb	r3, r3
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000000 	.word	0x20000000

08001964 <WriteEnable>:

/* 쓰기 활성화 */
static void WriteEnable(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
    uint8_t cmd = W25Q128_CMD_WRITE_ENABLE;
 800196a:	2306      	movs	r3, #6
 800196c:	71fb      	strb	r3, [r7, #7]

    CS_Low();
 800196e:	f7ff ffb1 	bl	80018d4 <CS_Low>
    HAL_SPI_Transmit(w25q_handle->hspi, &cmd, 1, 100);
 8001972:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <WriteEnable+0x2c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	1df9      	adds	r1, r7, #7
 800197a:	2364      	movs	r3, #100	@ 0x64
 800197c:	2201      	movs	r2, #1
 800197e:	f002 f94e 	bl	8003c1e <HAL_SPI_Transmit>
    CS_High();
 8001982:	f7ff ffb7 	bl	80018f4 <CS_High>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000000 	.word	0x20000000

08001994 <WaitReady>:

/* 준비될 때까지 대기 */
static void WaitReady(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
    while (!IsReady()) {
 8001998:	e002      	b.n	80019a0 <WaitReady+0xc>
        HAL_Delay(1);
 800199a:	2001      	movs	r0, #1
 800199c:	f000 fd70 	bl	8002480 <HAL_Delay>
    while (!IsReady()) {
 80019a0:	f7ff ffb8 	bl	8001914 <IsReady>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f083 0301 	eor.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f4      	bne.n	800199a <WaitReady+0x6>
    }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <W25Q128_Init>:

/**
 * @brief W25Q128 초기화
 */
void W25Q128_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	w25q_handle->hspi = &hspi2;
 80019bc:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <W25Q128_Init+0x2c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <W25Q128_Init+0x30>)
 80019c2:	601a      	str	r2, [r3, #0]
	w25q_handle->cs_pin = SPI_CS_Pin;
 80019c4:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <W25Q128_Init+0x2c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2208      	movs	r2, #8
 80019ca:	811a      	strh	r2, [r3, #8]
	w25q_handle->cs_port = SPI_CS_GPIO_Port;
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <W25Q128_Init+0x2c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a06      	ldr	r2, [pc, #24]	@ (80019ec <W25Q128_Init+0x34>)
 80019d2:	605a      	str	r2, [r3, #4]
    CS_High();  // CS 핀을 HIGH로 설정
 80019d4:	f7ff ff8e 	bl	80018f4 <CS_High>
    HAL_Delay(10);
 80019d8:	200a      	movs	r0, #10
 80019da:	f000 fd51 	bl	8002480 <HAL_Delay>
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000000 	.word	0x20000000
 80019e8:	2000048c 	.word	0x2000048c
 80019ec:	40021000 	.word	0x40021000

080019f0 <W25Q128_ReadData>:

/**
 * @brief 데이터 읽기
 */
void W25Q128_ReadData(uint32_t addr, uint8_t *data, uint32_t size) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
    uint8_t cmd[4];

    // 명령어 + 주소 준비
    cmd[0] = W25Q128_CMD_READ_DATA;
 80019fc:	2303      	movs	r3, #3
 80019fe:	753b      	strb	r3, [r7, #20]
    cmd[1] = (addr >> 16) & 0xFF;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	0c1b      	lsrs	r3, r3, #16
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	757b      	strb	r3, [r7, #21]
    cmd[2] = (addr >> 8) & 0xFF;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	75bb      	strb	r3, [r7, #22]
    cmd[3] = addr & 0xFF;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	75fb      	strb	r3, [r7, #23]

    CS_Low();
 8001a16:	f7ff ff5d 	bl	80018d4 <CS_Low>
    HAL_SPI_Transmit(w25q_handle->hspi, cmd, 4, 100);
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <W25Q128_ReadData+0x5c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	f107 0114 	add.w	r1, r7, #20
 8001a24:	2364      	movs	r3, #100	@ 0x64
 8001a26:	2204      	movs	r2, #4
 8001a28:	f002 f8f9 	bl	8003c1e <HAL_SPI_Transmit>
    HAL_SPI_Receive(w25q_handle->hspi, data, size, 1000);
 8001a2c:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <W25Q128_ReadData+0x5c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	f002 fa33 	bl	8003ea6 <HAL_SPI_Receive>
    CS_High();
 8001a40:	f7ff ff58 	bl	80018f4 <CS_High>
}
 8001a44:	bf00      	nop
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000000 	.word	0x20000000

08001a50 <W25Q128_WriteData>:

/**
 * @brief 데이터 쓰기 (한 페이지만)
 */
void W25Q128_WriteData(uint32_t addr, uint8_t *data, uint32_t size) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
    uint8_t cmd[4];

    // 최대 256바이트까지만
    if (size > 256) size = 256;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a62:	d902      	bls.n	8001a6a <W25Q128_WriteData+0x1a>
 8001a64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a68:	607b      	str	r3, [r7, #4]

    WriteEnable();
 8001a6a:	f7ff ff7b 	bl	8001964 <WriteEnable>

    // 명령어 + 주소 준비
    cmd[0] = W25Q128_CMD_PAGE_PROGRAM;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	753b      	strb	r3, [r7, #20]
    cmd[1] = (addr >> 16) & 0xFF;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	0c1b      	lsrs	r3, r3, #16
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	757b      	strb	r3, [r7, #21]
    cmd[2] = (addr >> 8) & 0xFF;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	75bb      	strb	r3, [r7, #22]
    cmd[3] = addr & 0xFF;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	75fb      	strb	r3, [r7, #23]

    CS_Low();
 8001a88:	f7ff ff24 	bl	80018d4 <CS_Low>
    HAL_SPI_Transmit(w25q_handle->hspi, cmd, 4, 100);
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <W25Q128_WriteData+0x74>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	f107 0114 	add.w	r1, r7, #20
 8001a96:	2364      	movs	r3, #100	@ 0x64
 8001a98:	2204      	movs	r2, #4
 8001a9a:	f002 f8c0 	bl	8003c1e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(w25q_handle->hspi, data, size, 1000);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <W25Q128_WriteData+0x74>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	f002 f8b6 	bl	8003c1e <HAL_SPI_Transmit>
    CS_High();
 8001ab2:	f7ff ff1f 	bl	80018f4 <CS_High>

    WaitReady();  // 완료 대기
 8001ab6:	f7ff ff6d 	bl	8001994 <WaitReady>
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000

08001ac8 <W25Q128_EraseSector>:

/**
 * @brief 섹터 지우기 (4KB)
 */
void W25Q128_EraseSector(uint32_t addr) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];

    WriteEnable();
 8001ad0:	f7ff ff48 	bl	8001964 <WriteEnable>

    // 명령어 + 주소 준비
    cmd[0] = W25Q128_CMD_SECTOR_ERASE;
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	733b      	strb	r3, [r7, #12]
    cmd[1] = (addr >> 16) & 0xFF;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0c1b      	lsrs	r3, r3, #16
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	737b      	strb	r3, [r7, #13]
    cmd[2] = (addr >> 8) & 0xFF;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	73bb      	strb	r3, [r7, #14]
    cmd[3] = addr & 0xFF;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	73fb      	strb	r3, [r7, #15]

    CS_Low();
 8001aee:	f7ff fef1 	bl	80018d4 <CS_Low>
    HAL_SPI_Transmit(w25q_handle->hspi, cmd, 4, 100);
 8001af2:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <W25Q128_EraseSector+0x4c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	f107 010c 	add.w	r1, r7, #12
 8001afc:	2364      	movs	r3, #100	@ 0x64
 8001afe:	2204      	movs	r2, #4
 8001b00:	f002 f88d 	bl	8003c1e <HAL_SPI_Transmit>
    CS_High();
 8001b04:	f7ff fef6 	bl	80018f4 <CS_High>

    WaitReady();  // 완료 대기
 8001b08:	f7ff ff44 	bl	8001994 <WaitReady>
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000000 	.word	0x20000000

08001b18 <Test_W25Q128>:

/**
 * @brief 사용 예제
 */
void Test_W25Q128(void)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b089      	sub	sp, #36	@ 0x24
 8001b1c:	af00      	add	r7, sp, #0
    // 테스트 데이터
    uint8_t write_data[16] = "Hello W25Q128!";
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <Test_W25Q128+0x80>)
 8001b20:	f107 0410 	add.w	r4, r7, #16
 8001b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b26:	c407      	stmia	r4!, {r0, r1, r2}
 8001b28:	8023      	strh	r3, [r4, #0]
 8001b2a:	3402      	adds	r4, #2
 8001b2c:	0c1b      	lsrs	r3, r3, #16
 8001b2e:	7023      	strb	r3, [r4, #0]
 8001b30:	2300      	movs	r3, #0
 8001b32:	77fb      	strb	r3, [r7, #31]
    uint8_t read_data[16] = {0};
 8001b34:	463b      	mov	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]

    // 1. 섹터 지우기
    W25Q128_EraseSector(0x000000);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff ffc1 	bl	8001ac8 <W25Q128_EraseSector>

    // 2. 데이터 쓰기
    W25Q128_WriteData(0x000000, write_data, 16);
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff ff7e 	bl	8001a50 <W25Q128_WriteData>

    // 3. 데이터 읽기
    W25Q128_ReadData(0x000000, read_data, 16);
 8001b54:	463b      	mov	r3, r7
 8001b56:	2210      	movs	r2, #16
 8001b58:	4619      	mov	r1, r3
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7ff ff48 	bl	80019f0 <W25Q128_ReadData>

    // 4. 결과 확인
    // read_data와 write_data가 같은지 확인
#if 1
    printf("write data -> %s", write_data);
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	4619      	mov	r1, r3
 8001b66:	480d      	ldr	r0, [pc, #52]	@ (8001b9c <Test_W25Q128+0x84>)
 8001b68:	f004 fcda 	bl	8006520 <iprintf>
    fflush(stdout);
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <Test_W25Q128+0x88>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f004 fbfe 	bl	8006374 <fflush>
	printf("  read data  -> %s", read_data);
 8001b78:	463b      	mov	r3, r7
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4809      	ldr	r0, [pc, #36]	@ (8001ba4 <Test_W25Q128+0x8c>)
 8001b7e:	f004 fccf 	bl	8006520 <iprintf>
	fflush(stdout);
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <Test_W25Q128+0x88>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f004 fbf3 	bl	8006374 <fflush>
#else
    printf("write data -> %s\\", write_data);
    printf("read data  -> %s\\", read_data);
#endif
}
 8001b8e:	bf00      	nop
 8001b90:	3724      	adds	r7, #36	@ 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd90      	pop	{r4, r7, pc}
 8001b96:	bf00      	nop
 8001b98:	08008f98 	.word	0x08008f98
 8001b9c:	08008f70 	.word	0x08008f70
 8001ba0:	2000001c 	.word	0x2000001c
 8001ba4:	08008f84 	.word	0x08008f84

08001ba8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <MX_DMA_Init+0x3c>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001be4 <MX_DMA_Init+0x3c>)
 8001bb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <MX_DMA_Init+0x3c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	200e      	movs	r0, #14
 8001bd0:	f000 fd55 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001bd4:	200e      	movs	r0, #14
 8001bd6:	f000 fd6e 	bl	80026b6 <HAL_NVIC_EnableIRQ>

}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800

08001be8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	@ 0x30
 8001bec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]
 8001bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	4b34      	ldr	r3, [pc, #208]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a33      	ldr	r2, [pc, #204]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c08:	f043 0310 	orr.w	r3, r3, #16
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b31      	ldr	r3, [pc, #196]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a2c      	ldr	r2, [pc, #176]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b26      	ldr	r3, [pc, #152]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a25      	ldr	r2, [pc, #148]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	4a17      	ldr	r2, [pc, #92]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c78:	f043 0308 	orr.w	r3, r3, #8
 8001c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	4a10      	ldr	r2, [pc, #64]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <MX_GPIO_Init+0xec>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2108      	movs	r1, #8
 8001caa:	480b      	ldr	r0, [pc, #44]	@ (8001cd8 <MX_GPIO_Init+0xf0>)
 8001cac:	f001 fabc 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4804      	ldr	r0, [pc, #16]	@ (8001cd8 <MX_GPIO_Init+0xf0>)
 8001cc8:	f001 f912 	bl	8002ef0 <HAL_GPIO_Init>

}
 8001ccc:	bf00      	nop
 8001cce:	3730      	adds	r7, #48	@ 0x30
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40021000 	.word	0x40021000

08001cdc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
	UNUSED(file);
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 100);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	2364      	movs	r3, #100	@ 0x64
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	4803      	ldr	r0, [pc, #12]	@ (8001d00 <_write+0x24>)
 8001cf2:	f002 fd2d 	bl	8004750 <HAL_UART_Transmit>
	return len;
 8001cf6:	687b      	ldr	r3, [r7, #4]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	200004e8 	.word	0x200004e8

08001d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d08:	f000 fb48 	bl	800239c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0c:	f000 f818 	bl	8001d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d10:	f7ff ff6a 	bl	8001be8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d14:	f7ff ff48 	bl	8001ba8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001d18:	f000 fa60 	bl	80021dc <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001d1c:	f000 f890 	bl	8001e40 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  printf("Application Start\r\n");
 8001d20:	4806      	ldr	r0, [pc, #24]	@ (8001d3c <main+0x38>)
 8001d22:	f004 fc6d 	bl	8006600 <puts>
  W25Q128_Init();
 8001d26:	f7ff fe47 	bl	80019b8 <W25Q128_Init>
  // DMA 로그 초기화
  DMA_Log_Init();
 8001d2a:	f7ff f965 	bl	8000ff8 <DMA_Log_Init>

  Test_W25Q128();
 8001d2e:	f7ff fef3 	bl	8001b18 <Test_W25Q128>

  Comprehensive_Performance_Test();
 8001d32:	f7ff fd6f 	bl	8001814 <Comprehensive_Performance_Test>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// DMA 처리 (필수!)
	DMA_Log_Process();
 8001d36:	f7ff f9db 	bl	80010f0 <DMA_Log_Process>
 8001d3a:	e7fc      	b.n	8001d36 <main+0x32>
 8001d3c:	08008fc8 	.word	0x08008fc8

08001d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b094      	sub	sp, #80	@ 0x50
 8001d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d46:	f107 0320 	add.w	r3, r7, #32
 8001d4a:	2230      	movs	r2, #48	@ 0x30
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 fd72 	bl	8006838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <SystemClock_Config+0xcc>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	4a27      	ldr	r2, [pc, #156]	@ (8001e0c <SystemClock_Config+0xcc>)
 8001d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d74:	4b25      	ldr	r3, [pc, #148]	@ (8001e0c <SystemClock_Config+0xcc>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d80:	2300      	movs	r3, #0
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <SystemClock_Config+0xd0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a21      	ldr	r2, [pc, #132]	@ (8001e10 <SystemClock_Config+0xd0>)
 8001d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b1f      	ldr	r3, [pc, #124]	@ (8001e10 <SystemClock_Config+0xd0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001da0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da6:	2302      	movs	r3, #2
 8001da8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001daa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001db0:	2319      	movs	r3, #25
 8001db2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001db4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001db8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc2:	f107 0320 	add.w	r3, r7, #32
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f001 fa48 	bl	800325c <HAL_RCC_OscConfig>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001dd2:	f000 f82f 	bl	8001e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd6:	230f      	movs	r3, #15
 8001dd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001de2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001de6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	2105      	movs	r1, #5
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 fca9 	bl	800374c <HAL_RCC_ClockConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e00:	f000 f818 	bl	8001e34 <Error_Handler>
  }
}
 8001e04:	bf00      	nop
 8001e06:	3750      	adds	r7, #80	@ 0x50
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40007000 	.word	0x40007000

08001e14 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
// main.c에 이 함수가 있는지 확인
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    if (huart == &huart3) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a04      	ldr	r2, [pc, #16]	@ (8001e30 <HAL_UART_TxCpltCallback+0x1c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_UART_TxCpltCallback+0x14>
        DMA_Log_TxComplete();  // ← 이게 호출 안 됨
 8001e24:	f7ff f972 	bl	800110c <DMA_Log_TxComplete>
    }
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200004e8 	.word	0x200004e8

08001e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e38:	b672      	cpsid	i
}
 8001e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <Error_Handler+0x8>

08001e40 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e44:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <MX_SPI2_Init+0x6c>)
 8001e46:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb0 <MX_SPI2_Init+0x70>)
 8001e48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <MX_SPI2_Init+0x6c>)
 8001e4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e52:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <MX_SPI2_Init+0x6c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <MX_SPI2_Init+0x6c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <MX_SPI2_Init+0x6c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e64:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <MX_SPI2_Init+0x6c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <MX_SPI2_Init+0x6c>)
 8001e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <MX_SPI2_Init+0x6c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <MX_SPI2_Init+0x6c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <MX_SPI2_Init+0x6c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <MX_SPI2_Init+0x6c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <MX_SPI2_Init+0x6c>)
 8001e8c:	220a      	movs	r2, #10
 8001e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e90:	4806      	ldr	r0, [pc, #24]	@ (8001eac <MX_SPI2_Init+0x6c>)
 8001e92:	f001 fe3b 	bl	8003b0c <HAL_SPI_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e9c:	f7ff ffca 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  printf("%s() Init Success\r\n", __func__);
 8001ea0:	4904      	ldr	r1, [pc, #16]	@ (8001eb4 <MX_SPI2_Init+0x74>)
 8001ea2:	4805      	ldr	r0, [pc, #20]	@ (8001eb8 <MX_SPI2_Init+0x78>)
 8001ea4:	f004 fb3c 	bl	8006520 <iprintf>
  /* USER CODE END SPI2_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000048c 	.word	0x2000048c
 8001eb0:	40003800 	.word	0x40003800
 8001eb4:	08008ff0 	.word	0x08008ff0
 8001eb8:	08008fdc 	.word	0x08008fdc

08001ebc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	@ 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a28      	ldr	r2, [pc, #160]	@ (8001f7c <HAL_SPI_MspInit+0xc0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d14a      	bne.n	8001f74 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b27      	ldr	r3, [pc, #156]	@ (8001f80 <HAL_SPI_MspInit+0xc4>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	4a26      	ldr	r2, [pc, #152]	@ (8001f80 <HAL_SPI_MspInit+0xc4>)
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eee:	4b24      	ldr	r3, [pc, #144]	@ (8001f80 <HAL_SPI_MspInit+0xc4>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <HAL_SPI_MspInit+0xc4>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	4a1f      	ldr	r2, [pc, #124]	@ (8001f80 <HAL_SPI_MspInit+0xc4>)
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <HAL_SPI_MspInit+0xc4>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <HAL_SPI_MspInit+0xc4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	4a18      	ldr	r2, [pc, #96]	@ (8001f80 <HAL_SPI_MspInit+0xc4>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <HAL_SPI_MspInit+0xc4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = SPI_MISO_Pin|SPI_MOSI_Pin;
 8001f32:	230c      	movs	r3, #12
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f42:	2305      	movs	r3, #5
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480d      	ldr	r0, [pc, #52]	@ (8001f84 <HAL_SPI_MspInit+0xc8>)
 8001f4e:	f000 ffcf 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_SCK_Pin;
 8001f52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f64:	2305      	movs	r3, #5
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4806      	ldr	r0, [pc, #24]	@ (8001f88 <HAL_SPI_MspInit+0xcc>)
 8001f70:	f000 ffbe 	bl	8002ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	@ 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40003800 	.word	0x40003800
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020400 	.word	0x40020400

08001f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <HAL_MspInit+0x4c>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd8 <HAL_MspInit+0x4c>)
 8001f9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd8 <HAL_MspInit+0x4c>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <HAL_MspInit+0x4c>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	4a08      	ldr	r2, [pc, #32]	@ (8001fd8 <HAL_MspInit+0x4c>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_MspInit+0x4c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800

08001fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <NMI_Handler+0x4>

08001fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <BusFault_Handler+0x4>

08001ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <UsageFault_Handler+0x4>

08002004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002032:	f000 fa05 	bl	8002440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002040:	4802      	ldr	r0, [pc, #8]	@ (800204c <DMA1_Stream3_IRQHandler+0x10>)
 8002042:	f000 fceb 	bl	8002a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000530 	.word	0x20000530

08002050 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002054:	4802      	ldr	r0, [pc, #8]	@ (8002060 <USART3_IRQHandler+0x10>)
 8002056:	f002 fc83 	bl	8004960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200004e8 	.word	0x200004e8

08002064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return 1;
 8002068:	2301      	movs	r3, #1
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_kill>:

int _kill(int pid, int sig)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800207e:	f004 fc2d 	bl	80068dc <__errno>
 8002082:	4603      	mov	r3, r0
 8002084:	2216      	movs	r2, #22
 8002086:	601a      	str	r2, [r3, #0]
  return -1;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_exit>:

void _exit (int status)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ffe7 	bl	8002074 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020a6:	bf00      	nop
 80020a8:	e7fd      	b.n	80020a6 <_exit+0x12>

080020aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e00a      	b.n	80020d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020bc:	f3af 8000 	nop.w
 80020c0:	4601      	mov	r1, r0
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	60ba      	str	r2, [r7, #8]
 80020c8:	b2ca      	uxtb	r2, r1
 80020ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3301      	adds	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	dbf0      	blt.n	80020bc <_read+0x12>
  }

  return len;
 80020da:	687b      	ldr	r3, [r7, #4]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800210c:	605a      	str	r2, [r3, #4]
  return 0;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <_isatty>:

int _isatty(int file)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002124:	2301      	movs	r3, #1
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002154:	4a14      	ldr	r2, [pc, #80]	@ (80021a8 <_sbrk+0x5c>)
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <_sbrk+0x60>)
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002160:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002168:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <_sbrk+0x64>)
 800216a:	4a12      	ldr	r2, [pc, #72]	@ (80021b4 <_sbrk+0x68>)
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	d207      	bcs.n	800218c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800217c:	f004 fbae 	bl	80068dc <__errno>
 8002180:	4603      	mov	r3, r0
 8002182:	220c      	movs	r2, #12
 8002184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	e009      	b.n	80021a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800218c:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002192:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	4a05      	ldr	r2, [pc, #20]	@ (80021b0 <_sbrk+0x64>)
 800219c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219e:	68fb      	ldr	r3, [r7, #12]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20020000 	.word	0x20020000
 80021ac:	00000400 	.word	0x00000400
 80021b0:	200004e4 	.word	0x200004e4
 80021b4:	200006e0 	.word	0x200006e0

080021b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <SystemInit+0x20>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	4a05      	ldr	r2, [pc, #20]	@ (80021d8 <SystemInit+0x20>)
 80021c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021e0:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <MX_USART3_UART_Init+0x4c>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	@ (800222c <MX_USART3_UART_Init+0x50>)
 80021e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021e6:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <MX_USART3_UART_Init+0x4c>)
 80021e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <MX_USART3_UART_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <MX_USART3_UART_Init+0x4c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <MX_USART3_UART_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002200:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <MX_USART3_UART_Init+0x4c>)
 8002202:	220c      	movs	r2, #12
 8002204:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <MX_USART3_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <MX_USART3_UART_Init+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002212:	4805      	ldr	r0, [pc, #20]	@ (8002228 <MX_USART3_UART_Init+0x4c>)
 8002214:	f002 fa4c 	bl	80046b0 <HAL_UART_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800221e:	f7ff fe09 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200004e8 	.word	0x200004e8
 800222c:	40004800 	.word	0x40004800

08002230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	@ 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a39      	ldr	r2, [pc, #228]	@ (8002334 <HAL_UART_MspInit+0x104>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d16b      	bne.n	800232a <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	4b38      	ldr	r3, [pc, #224]	@ (8002338 <HAL_UART_MspInit+0x108>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	4a37      	ldr	r2, [pc, #220]	@ (8002338 <HAL_UART_MspInit+0x108>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002260:	6413      	str	r3, [r2, #64]	@ 0x40
 8002262:	4b35      	ldr	r3, [pc, #212]	@ (8002338 <HAL_UART_MspInit+0x108>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b31      	ldr	r3, [pc, #196]	@ (8002338 <HAL_UART_MspInit+0x108>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	4a30      	ldr	r2, [pc, #192]	@ (8002338 <HAL_UART_MspInit+0x108>)
 8002278:	f043 0308 	orr.w	r3, r3, #8
 800227c:	6313      	str	r3, [r2, #48]	@ 0x30
 800227e:	4b2e      	ldr	r3, [pc, #184]	@ (8002338 <HAL_UART_MspInit+0x108>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = U3_TX_Pin|U3_RX_Pin;
 800228a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800228e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002294:	2301      	movs	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800229c:	2307      	movs	r3, #7
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4619      	mov	r1, r3
 80022a6:	4825      	ldr	r0, [pc, #148]	@ (800233c <HAL_UART_MspInit+0x10c>)
 80022a8:	f000 fe22 	bl	8002ef0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80022ac:	4b24      	ldr	r3, [pc, #144]	@ (8002340 <HAL_UART_MspInit+0x110>)
 80022ae:	4a25      	ldr	r2, [pc, #148]	@ (8002344 <HAL_UART_MspInit+0x114>)
 80022b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80022b2:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <HAL_UART_MspInit+0x110>)
 80022b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80022b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ba:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <HAL_UART_MspInit+0x110>)
 80022bc:	2240      	movs	r2, #64	@ 0x40
 80022be:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <HAL_UART_MspInit+0x110>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <HAL_UART_MspInit+0x110>)
 80022c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022cc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002340 <HAL_UART_MspInit+0x110>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <HAL_UART_MspInit+0x110>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80022da:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <HAL_UART_MspInit+0x110>)
 80022dc:	2200      	movs	r2, #0
 80022de:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022e0:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <HAL_UART_MspInit+0x110>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80022e6:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <HAL_UART_MspInit+0x110>)
 80022e8:	2204      	movs	r2, #4
 80022ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80022ec:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <HAL_UART_MspInit+0x110>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80022f2:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <HAL_UART_MspInit+0x110>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <HAL_UART_MspInit+0x110>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80022fe:	4810      	ldr	r0, [pc, #64]	@ (8002340 <HAL_UART_MspInit+0x110>)
 8002300:	f000 f9f4 	bl	80026ec <HAL_DMA_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800230a:	f7ff fd93 	bl	8001e34 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a0b      	ldr	r2, [pc, #44]	@ (8002340 <HAL_UART_MspInit+0x110>)
 8002312:	639a      	str	r2, [r3, #56]	@ 0x38
 8002314:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <HAL_UART_MspInit+0x110>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	2027      	movs	r0, #39	@ 0x27
 8002320:	f000 f9ad 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002324:	2027      	movs	r0, #39	@ 0x27
 8002326:	f000 f9c6 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800232a:	bf00      	nop
 800232c:	3728      	adds	r7, #40	@ 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40004800 	.word	0x40004800
 8002338:	40023800 	.word	0x40023800
 800233c:	40020c00 	.word	0x40020c00
 8002340:	20000530 	.word	0x20000530
 8002344:	40026058 	.word	0x40026058

08002348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002348:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002380 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800234c:	f7ff ff34 	bl	80021b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002350:	480c      	ldr	r0, [pc, #48]	@ (8002384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002352:	490d      	ldr	r1, [pc, #52]	@ (8002388 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002354:	4a0d      	ldr	r2, [pc, #52]	@ (800238c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a0a      	ldr	r2, [pc, #40]	@ (8002390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002368:	4c0a      	ldr	r4, [pc, #40]	@ (8002394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002376:	f004 fab7 	bl	80068e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237a:	f7ff fcc3 	bl	8001d04 <main>
  bx  lr    
 800237e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002388:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800238c:	080093a4 	.word	0x080093a4
  ldr r2, =_sbss
 8002390:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002394:	200006e0 	.word	0x200006e0

08002398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002398:	e7fe      	b.n	8002398 <ADC_IRQHandler>
	...

0800239c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a0:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <HAL_Init+0x40>)
 80023a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023ac:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <HAL_Init+0x40>)
 80023b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b8:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <HAL_Init+0x40>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <HAL_Init+0x40>)
 80023be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c4:	2003      	movs	r0, #3
 80023c6:	f000 f94f 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ca:	200f      	movs	r0, #15
 80023cc:	f000 f808 	bl	80023e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d0:	f7ff fddc 	bl	8001f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023c00 	.word	0x40023c00

080023e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <HAL_InitTick+0x54>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <HAL_InitTick+0x58>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f967 	bl	80026d2 <HAL_SYSTICK_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e00e      	b.n	800242c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b0f      	cmp	r3, #15
 8002412:	d80a      	bhi.n	800242a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002414:	2200      	movs	r2, #0
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f000 f92f 	bl	800267e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002420:	4a06      	ldr	r2, [pc, #24]	@ (800243c <HAL_InitTick+0x5c>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000004 	.word	0x20000004
 8002438:	2000000c 	.word	0x2000000c
 800243c:	20000008 	.word	0x20000008

08002440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_IncTick+0x20>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_IncTick+0x24>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	@ (8002464 <HAL_IncTick+0x24>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	2000000c 	.word	0x2000000c
 8002464:	20000590 	.word	0x20000590

08002468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_GetTick+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000590 	.word	0x20000590

08002480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff ffee 	bl	8002468 <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d005      	beq.n	80024a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249a:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <HAL_Delay+0x44>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024a6:	bf00      	nop
 80024a8:	f7ff ffde 	bl	8002468 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f7      	bhi.n	80024a8 <HAL_Delay+0x28>
  {
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000000c 	.word	0x2000000c

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fa:	4a04      	ldr	r2, [pc, #16]	@ (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4907      	ldr	r1, [pc, #28]	@ (8002564 <__NVIC_EnableIRQ+0x38>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	@ (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	@ (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	@ 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	@ 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002634:	d301      	bcc.n	800263a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002636:	2301      	movs	r3, #1
 8002638:	e00f      	b.n	800265a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263a:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <SysTick_Config+0x40>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002642:	210f      	movs	r1, #15
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f7ff ff8e 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <SysTick_Config+0x40>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002652:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <SysTick_Config+0x40>)
 8002654:	2207      	movs	r2, #7
 8002656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	e000e010 	.word	0xe000e010

08002668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff29 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002690:	f7ff ff3e 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	6978      	ldr	r0, [r7, #20]
 800269c:	f7ff ff8e 	bl	80025bc <NVIC_EncodePriority>
 80026a0:	4602      	mov	r2, r0
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff5d 	bl	8002568 <__NVIC_SetPriority>
}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff31 	bl	800252c <__NVIC_EnableIRQ>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ffa2 	bl	8002624 <SysTick_Config>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026f8:	f7ff feb6 	bl	8002468 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e099      	b.n	800283c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002728:	e00f      	b.n	800274a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272a:	f7ff fe9d 	bl	8002468 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b05      	cmp	r3, #5
 8002736:	d908      	bls.n	800274a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2203      	movs	r2, #3
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e078      	b.n	800283c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e8      	bne.n	800272a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4b38      	ldr	r3, [pc, #224]	@ (8002844 <HAL_DMA_Init+0x158>)
 8002764:	4013      	ands	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ac:	4313      	orrs	r3, r2
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0307 	bic.w	r3, r3, #7
 80027ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d117      	bne.n	800280e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fb01 	bl	8002df8 <DMA_CheckFifoParam>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2240      	movs	r2, #64	@ 0x40
 8002800:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800280a:	2301      	movs	r3, #1
 800280c:	e016      	b.n	800283c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fab8 	bl	8002d8c <DMA_CalcBaseAndBitshift>
 800281c:	4603      	mov	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002824:	223f      	movs	r2, #63	@ 0x3f
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	f010803f 	.word	0xf010803f

08002848 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_DMA_Start_IT+0x26>
 800286a:	2302      	movs	r3, #2
 800286c:	e040      	b.n	80028f0 <HAL_DMA_Start_IT+0xa8>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d12f      	bne.n	80028e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fa4a 	bl	8002d30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a0:	223f      	movs	r2, #63	@ 0x3f
 80028a2:	409a      	lsls	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0216 	orr.w	r2, r2, #22
 80028b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0208 	orr.w	r2, r2, #8
 80028ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e005      	b.n	80028ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002904:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002906:	f7ff fdaf 	bl	8002468 <HAL_GetTick>
 800290a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d008      	beq.n	800292a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2280      	movs	r2, #128	@ 0x80
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e052      	b.n	80029d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0216 	bic.w	r2, r2, #22
 8002938:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002948:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d103      	bne.n	800295a <HAL_DMA_Abort+0x62>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0208 	bic.w	r2, r2, #8
 8002968:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297a:	e013      	b.n	80029a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800297c:	f7ff fd74 	bl	8002468 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b05      	cmp	r3, #5
 8002988:	d90c      	bls.n	80029a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2203      	movs	r2, #3
 8002994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e015      	b.n	80029d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1e4      	bne.n	800297c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b6:	223f      	movs	r2, #63	@ 0x3f
 80029b8:	409a      	lsls	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d004      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2280      	movs	r2, #128	@ 0x80
 80029f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00c      	b.n	8002a10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2205      	movs	r2, #5
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a28:	4b8e      	ldr	r3, [pc, #568]	@ (8002c64 <HAL_DMA_IRQHandler+0x248>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a8e      	ldr	r2, [pc, #568]	@ (8002c68 <HAL_DMA_IRQHandler+0x24c>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0a9b      	lsrs	r3, r3, #10
 8002a34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a46:	2208      	movs	r2, #8
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01a      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0204 	bic.w	r2, r2, #4
 8002a6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a74:	2208      	movs	r2, #8
 8002a76:	409a      	lsls	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	2201      	movs	r2, #1
 8002aac:	409a      	lsls	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab6:	f043 0202 	orr.w	r2, r3, #2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d012      	beq.n	8002af4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aec:	f043 0204 	orr.w	r2, r3, #4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af8:	2210      	movs	r2, #16
 8002afa:	409a      	lsls	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d043      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d03c      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b16:	2210      	movs	r2, #16
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d018      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d108      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d024      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
 8002b4a:	e01f      	b.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01b      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
 8002b5c:	e016      	b.n	8002b8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d107      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0208 	bic.w	r2, r2, #8
 8002b7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b90:	2220      	movs	r2, #32
 8002b92:	409a      	lsls	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 808f 	beq.w	8002cbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8087 	beq.w	8002cbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d136      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0216 	bic.w	r2, r2, #22
 8002bd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002be4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <HAL_DMA_IRQHandler+0x1da>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0208 	bic.w	r2, r2, #8
 8002c04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0a:	223f      	movs	r2, #63	@ 0x3f
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d07e      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
        }
        return;
 8002c32:	e079      	b.n	8002d28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01d      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d031      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
 8002c60:	e02c      	b.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
 8002c62:	bf00      	nop
 8002c64:	20000004 	.word	0x20000004
 8002c68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d023      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
 8002c7c:	e01e      	b.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10f      	bne.n	8002cac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0210 	bic.w	r2, r2, #16
 8002c9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d032      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d022      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2205      	movs	r2, #5
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3301      	adds	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d307      	bcc.n	8002d04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f2      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x2cc>
 8002d02:	e000      	b.n	8002d06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
 8002d26:	e000      	b.n	8002d2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d28:	bf00      	nop
    }
  }
}
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b40      	cmp	r3, #64	@ 0x40
 8002d5c:	d108      	bne.n	8002d70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d6e:	e007      	b.n	8002d80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	60da      	str	r2, [r3, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3b10      	subs	r3, #16
 8002d9c:	4a14      	ldr	r2, [pc, #80]	@ (8002df0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002da6:	4a13      	ldr	r2, [pc, #76]	@ (8002df4 <DMA_CalcBaseAndBitshift+0x68>)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d909      	bls.n	8002dce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dcc:	e007      	b.n	8002dde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	aaaaaaab 	.word	0xaaaaaaab
 8002df4:	08009018 	.word	0x08009018

08002df8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d11f      	bne.n	8002e52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d856      	bhi.n	8002ec6 <DMA_CheckFifoParam+0xce>
 8002e18:	a201      	add	r2, pc, #4	@ (adr r2, 8002e20 <DMA_CheckFifoParam+0x28>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e43 	.word	0x08002e43
 8002e28:	08002e31 	.word	0x08002e31
 8002e2c:	08002ec7 	.word	0x08002ec7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d046      	beq.n	8002eca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e40:	e043      	b.n	8002eca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e4a:	d140      	bne.n	8002ece <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e50:	e03d      	b.n	8002ece <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5a:	d121      	bne.n	8002ea0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d837      	bhi.n	8002ed2 <DMA_CheckFifoParam+0xda>
 8002e62:	a201      	add	r2, pc, #4	@ (adr r2, 8002e68 <DMA_CheckFifoParam+0x70>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e7f 	.word	0x08002e7f
 8002e70:	08002e79 	.word	0x08002e79
 8002e74:	08002e91 	.word	0x08002e91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e7c:	e030      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d025      	beq.n	8002ed6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e022      	b.n	8002ed6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e98:	d11f      	bne.n	8002eda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e9e:	e01c      	b.n	8002eda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d903      	bls.n	8002eae <DMA_CheckFifoParam+0xb6>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d003      	beq.n	8002eb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eac:	e018      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb2:	e015      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	e00b      	b.n	8002ede <DMA_CheckFifoParam+0xe6>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e00a      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e008      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e006      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e004      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e002      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ede:	bf00      	nop
    }
  } 
  
  return status; 
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	@ 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e16b      	b.n	80031e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 815a 	bne.w	80031de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d005      	beq.n	8002f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d130      	bne.n	8002fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0201 	and.w	r2, r3, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d017      	beq.n	8002fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d123      	bne.n	8003034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80b4 	beq.w	80031de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b60      	ldr	r3, [pc, #384]	@ (80031fc <HAL_GPIO_Init+0x30c>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	4a5f      	ldr	r2, [pc, #380]	@ (80031fc <HAL_GPIO_Init+0x30c>)
 8003080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003084:	6453      	str	r3, [r2, #68]	@ 0x44
 8003086:	4b5d      	ldr	r3, [pc, #372]	@ (80031fc <HAL_GPIO_Init+0x30c>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003092:	4a5b      	ldr	r2, [pc, #364]	@ (8003200 <HAL_GPIO_Init+0x310>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a52      	ldr	r2, [pc, #328]	@ (8003204 <HAL_GPIO_Init+0x314>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d02b      	beq.n	8003116 <HAL_GPIO_Init+0x226>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a51      	ldr	r2, [pc, #324]	@ (8003208 <HAL_GPIO_Init+0x318>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d025      	beq.n	8003112 <HAL_GPIO_Init+0x222>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a50      	ldr	r2, [pc, #320]	@ (800320c <HAL_GPIO_Init+0x31c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01f      	beq.n	800310e <HAL_GPIO_Init+0x21e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003210 <HAL_GPIO_Init+0x320>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d019      	beq.n	800310a <HAL_GPIO_Init+0x21a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003214 <HAL_GPIO_Init+0x324>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_GPIO_Init+0x216>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003218 <HAL_GPIO_Init+0x328>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <HAL_GPIO_Init+0x212>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4c      	ldr	r2, [pc, #304]	@ (800321c <HAL_GPIO_Init+0x32c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_Init+0x20e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003220 <HAL_GPIO_Init+0x330>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_GPIO_Init+0x20a>
 80030f6:	2307      	movs	r3, #7
 80030f8:	e00e      	b.n	8003118 <HAL_GPIO_Init+0x228>
 80030fa:	2308      	movs	r3, #8
 80030fc:	e00c      	b.n	8003118 <HAL_GPIO_Init+0x228>
 80030fe:	2306      	movs	r3, #6
 8003100:	e00a      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003102:	2305      	movs	r3, #5
 8003104:	e008      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003106:	2304      	movs	r3, #4
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x228>
 800310a:	2303      	movs	r3, #3
 800310c:	e004      	b.n	8003118 <HAL_GPIO_Init+0x228>
 800310e:	2302      	movs	r3, #2
 8003110:	e002      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003116:	2300      	movs	r3, #0
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	f002 0203 	and.w	r2, r2, #3
 800311e:	0092      	lsls	r2, r2, #2
 8003120:	4093      	lsls	r3, r2
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003128:	4935      	ldr	r1, [pc, #212]	@ (8003200 <HAL_GPIO_Init+0x310>)
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	089b      	lsrs	r3, r3, #2
 800312e:	3302      	adds	r3, #2
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003136:	4b3b      	ldr	r3, [pc, #236]	@ (8003224 <HAL_GPIO_Init+0x334>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315a:	4a32      	ldr	r2, [pc, #200]	@ (8003224 <HAL_GPIO_Init+0x334>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003160:	4b30      	ldr	r3, [pc, #192]	@ (8003224 <HAL_GPIO_Init+0x334>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003184:	4a27      	ldr	r2, [pc, #156]	@ (8003224 <HAL_GPIO_Init+0x334>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800318a:	4b26      	ldr	r3, [pc, #152]	@ (8003224 <HAL_GPIO_Init+0x334>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003224 <HAL_GPIO_Init+0x334>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <HAL_GPIO_Init+0x334>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d8:	4a12      	ldr	r2, [pc, #72]	@ (8003224 <HAL_GPIO_Init+0x334>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b0f      	cmp	r3, #15
 80031e8:	f67f ae90 	bls.w	8002f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3724      	adds	r7, #36	@ 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	40013800 	.word	0x40013800
 8003204:	40020000 	.word	0x40020000
 8003208:	40020400 	.word	0x40020400
 800320c:	40020800 	.word	0x40020800
 8003210:	40020c00 	.word	0x40020c00
 8003214:	40021000 	.word	0x40021000
 8003218:	40021400 	.word	0x40021400
 800321c:	40021800 	.word	0x40021800
 8003220:	40021c00 	.word	0x40021c00
 8003224:	40013c00 	.word	0x40013c00

08003228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
 8003234:	4613      	mov	r3, r2
 8003236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003238:	787b      	ldrb	r3, [r7, #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003244:	e003      	b.n	800324e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003246:	887b      	ldrh	r3, [r7, #2]
 8003248:	041a      	lsls	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	619a      	str	r2, [r3, #24]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e267      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d075      	beq.n	8003366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800327a:	4b88      	ldr	r3, [pc, #544]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b04      	cmp	r3, #4
 8003284:	d00c      	beq.n	80032a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003286:	4b85      	ldr	r3, [pc, #532]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800328e:	2b08      	cmp	r3, #8
 8003290:	d112      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003292:	4b82      	ldr	r3, [pc, #520]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800329a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800329e:	d10b      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	4b7e      	ldr	r3, [pc, #504]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d05b      	beq.n	8003364 <HAL_RCC_OscConfig+0x108>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d157      	bne.n	8003364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e242      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x74>
 80032c2:	4b76      	ldr	r3, [pc, #472]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a75      	ldr	r2, [pc, #468]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e01d      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x98>
 80032da:	4b70      	ldr	r3, [pc, #448]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a6f      	ldr	r2, [pc, #444]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b6d      	ldr	r3, [pc, #436]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a6c      	ldr	r2, [pc, #432]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032f4:	4b69      	ldr	r3, [pc, #420]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a68      	ldr	r2, [pc, #416]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b66      	ldr	r3, [pc, #408]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a65      	ldr	r2, [pc, #404]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800330a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7ff f8a8 	bl	8002468 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7ff f8a4 	bl	8002468 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	@ 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e207      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b5b      	ldr	r3, [pc, #364]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0xc0>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7ff f894 	bl	8002468 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7ff f890 	bl	8002468 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	@ 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e1f3      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	4b51      	ldr	r3, [pc, #324]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0xe8>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d063      	beq.n	800343a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003372:	4b4a      	ldr	r3, [pc, #296]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337e:	4b47      	ldr	r3, [pc, #284]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003386:	2b08      	cmp	r3, #8
 8003388:	d11c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338a:	4b44      	ldr	r3, [pc, #272]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d116      	bne.n	80033c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	4b41      	ldr	r3, [pc, #260]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_RCC_OscConfig+0x152>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e1c7      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b3b      	ldr	r3, [pc, #236]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4937      	ldr	r1, [pc, #220]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	e03a      	b.n	800343a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033cc:	4b34      	ldr	r3, [pc, #208]	@ (80034a0 <HAL_RCC_OscConfig+0x244>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7ff f849 	bl	8002468 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033da:	f7ff f845 	bl	8002468 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e1a8      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ec:	4b2b      	ldr	r3, [pc, #172]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	4b28      	ldr	r3, [pc, #160]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4925      	ldr	r1, [pc, #148]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
 800340c:	e015      	b.n	800343a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340e:	4b24      	ldr	r3, [pc, #144]	@ (80034a0 <HAL_RCC_OscConfig+0x244>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7ff f828 	bl	8002468 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341c:	f7ff f824 	bl	8002468 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e187      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342e:	4b1b      	ldr	r3, [pc, #108]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d036      	beq.n	80034b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <HAL_RCC_OscConfig+0x248>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003454:	f7ff f808 	bl	8002468 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345c:	f7ff f804 	bl	8002468 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e167      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346e:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <HAL_RCC_OscConfig+0x240>)
 8003470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x200>
 800347a:	e01b      	b.n	80034b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347c:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <HAL_RCC_OscConfig+0x248>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003482:	f7fe fff1 	bl	8002468 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	e00e      	b.n	80034a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348a:	f7fe ffed 	bl	8002468 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d907      	bls.n	80034a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e150      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
 800349c:	40023800 	.word	0x40023800
 80034a0:	42470000 	.word	0x42470000
 80034a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	4b88      	ldr	r3, [pc, #544]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 80034aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ea      	bne.n	800348a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8097 	beq.w	80035f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c6:	4b81      	ldr	r3, [pc, #516]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10f      	bne.n	80034f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	4b7d      	ldr	r3, [pc, #500]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	4a7c      	ldr	r2, [pc, #496]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034e2:	4b7a      	ldr	r3, [pc, #488]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	4b77      	ldr	r3, [pc, #476]	@ (80036d0 <HAL_RCC_OscConfig+0x474>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d118      	bne.n	8003530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fe:	4b74      	ldr	r3, [pc, #464]	@ (80036d0 <HAL_RCC_OscConfig+0x474>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a73      	ldr	r2, [pc, #460]	@ (80036d0 <HAL_RCC_OscConfig+0x474>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350a:	f7fe ffad 	bl	8002468 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003512:	f7fe ffa9 	bl	8002468 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e10c      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003524:	4b6a      	ldr	r3, [pc, #424]	@ (80036d0 <HAL_RCC_OscConfig+0x474>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x2ea>
 8003538:	4b64      	ldr	r3, [pc, #400]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353c:	4a63      	ldr	r2, [pc, #396]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6713      	str	r3, [r2, #112]	@ 0x70
 8003544:	e01c      	b.n	8003580 <HAL_RCC_OscConfig+0x324>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b05      	cmp	r3, #5
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x30c>
 800354e:	4b5f      	ldr	r3, [pc, #380]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003552:	4a5e      	ldr	r2, [pc, #376]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 8003554:	f043 0304 	orr.w	r3, r3, #4
 8003558:	6713      	str	r3, [r2, #112]	@ 0x70
 800355a:	4b5c      	ldr	r3, [pc, #368]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355e:	4a5b      	ldr	r2, [pc, #364]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6713      	str	r3, [r2, #112]	@ 0x70
 8003566:	e00b      	b.n	8003580 <HAL_RCC_OscConfig+0x324>
 8003568:	4b58      	ldr	r3, [pc, #352]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356c:	4a57      	ldr	r2, [pc, #348]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	@ 0x70
 8003574:	4b55      	ldr	r3, [pc, #340]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003578:	4a54      	ldr	r2, [pc, #336]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 800357a:	f023 0304 	bic.w	r3, r3, #4
 800357e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d015      	beq.n	80035b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fe ff6e 	bl	8002468 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003590:	f7fe ff6a 	bl	8002468 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e0cb      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a6:	4b49      	ldr	r3, [pc, #292]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0ee      	beq.n	8003590 <HAL_RCC_OscConfig+0x334>
 80035b2:	e014      	b.n	80035de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b4:	f7fe ff58 	bl	8002468 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fe ff54 	bl	8002468 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e0b5      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d2:	4b3e      	ldr	r3, [pc, #248]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1ee      	bne.n	80035bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d105      	bne.n	80035f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e4:	4b39      	ldr	r3, [pc, #228]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	4a38      	ldr	r2, [pc, #224]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 80035ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80a1 	beq.w	800373c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035fa:	4b34      	ldr	r3, [pc, #208]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b08      	cmp	r3, #8
 8003604:	d05c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d141      	bne.n	8003692 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360e:	4b31      	ldr	r3, [pc, #196]	@ (80036d4 <HAL_RCC_OscConfig+0x478>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fe ff28 	bl	8002468 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361c:	f7fe ff24 	bl	8002468 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e087      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362e:	4b27      	ldr	r3, [pc, #156]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	019b      	lsls	r3, r3, #6
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	3b01      	subs	r3, #1
 8003654:	041b      	lsls	r3, r3, #16
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	061b      	lsls	r3, r3, #24
 800365e:	491b      	ldr	r1, [pc, #108]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003664:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <HAL_RCC_OscConfig+0x478>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7fe fefd 	bl	8002468 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003672:	f7fe fef9 	bl	8002468 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e05c      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003684:	4b11      	ldr	r3, [pc, #68]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x416>
 8003690:	e054      	b.n	800373c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003692:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <HAL_RCC_OscConfig+0x478>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fe fee6 	bl	8002468 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe fee2 	bl	8002468 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e045      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	4b06      	ldr	r3, [pc, #24]	@ (80036cc <HAL_RCC_OscConfig+0x470>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x444>
 80036be:	e03d      	b.n	800373c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e038      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40007000 	.word	0x40007000
 80036d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003748 <HAL_RCC_OscConfig+0x4ec>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d028      	beq.n	8003738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d121      	bne.n	8003738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d11a      	bne.n	8003738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003708:	4013      	ands	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800370e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003710:	4293      	cmp	r3, r2
 8003712:	d111      	bne.n	8003738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	3b01      	subs	r3, #1
 8003722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d107      	bne.n	8003738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800

0800374c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0cc      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003760:	4b68      	ldr	r3, [pc, #416]	@ (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d90c      	bls.n	8003788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b65      	ldr	r3, [pc, #404]	@ (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b63      	ldr	r3, [pc, #396]	@ (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0b8      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037a0:	4b59      	ldr	r3, [pc, #356]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4a58      	ldr	r2, [pc, #352]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b8:	4b53      	ldr	r3, [pc, #332]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4a52      	ldr	r2, [pc, #328]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c4:	4b50      	ldr	r3, [pc, #320]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	494d      	ldr	r1, [pc, #308]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d044      	beq.n	800386c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d107      	bne.n	80037fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	4b47      	ldr	r3, [pc, #284]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d119      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e07f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d003      	beq.n	800380a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003806:	2b03      	cmp	r3, #3
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380a:	4b3f      	ldr	r3, [pc, #252]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e06f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381a:	4b3b      	ldr	r3, [pc, #236]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e067      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382a:	4b37      	ldr	r3, [pc, #220]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4934      	ldr	r1, [pc, #208]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800383c:	f7fe fe14 	bl	8002468 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	e00a      	b.n	800385a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003844:	f7fe fe10 	bl	8002468 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e04f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	4b2b      	ldr	r3, [pc, #172]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 020c 	and.w	r2, r3, #12
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d1eb      	bne.n	8003844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800386c:	4b25      	ldr	r3, [pc, #148]	@ (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d20c      	bcs.n	8003894 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b22      	ldr	r3, [pc, #136]	@ (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b20      	ldr	r3, [pc, #128]	@ (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e032      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a0:	4b19      	ldr	r3, [pc, #100]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4916      	ldr	r1, [pc, #88]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038be:	4b12      	ldr	r3, [pc, #72]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	490e      	ldr	r1, [pc, #56]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038d2:	f000 f821 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80038d6:	4602      	mov	r2, r0
 80038d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	490a      	ldr	r1, [pc, #40]	@ (800390c <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	5ccb      	ldrb	r3, [r1, r3]
 80038e6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ea:	4a09      	ldr	r2, [pc, #36]	@ (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038ee:	4b09      	ldr	r3, [pc, #36]	@ (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe fd74 	bl	80023e0 <HAL_InitTick>

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40023c00 	.word	0x40023c00
 8003908:	40023800 	.word	0x40023800
 800390c:	08009000 	.word	0x08009000
 8003910:	20000004 	.word	0x20000004
 8003914:	20000008 	.word	0x20000008

08003918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800391c:	b090      	sub	sp, #64	@ 0x40
 800391e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003930:	4b59      	ldr	r3, [pc, #356]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b08      	cmp	r3, #8
 800393a:	d00d      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x40>
 800393c:	2b08      	cmp	r3, #8
 800393e:	f200 80a1 	bhi.w	8003a84 <HAL_RCC_GetSysClockFreq+0x16c>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x34>
 8003946:	2b04      	cmp	r3, #4
 8003948:	d003      	beq.n	8003952 <HAL_RCC_GetSysClockFreq+0x3a>
 800394a:	e09b      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800394c:	4b53      	ldr	r3, [pc, #332]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x184>)
 800394e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003950:	e09b      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003952:	4b53      	ldr	r3, [pc, #332]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003954:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003956:	e098      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003958:	4b4f      	ldr	r3, [pc, #316]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x180>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003960:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003962:	4b4d      	ldr	r3, [pc, #308]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d028      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	099b      	lsrs	r3, r3, #6
 8003974:	2200      	movs	r2, #0
 8003976:	623b      	str	r3, [r7, #32]
 8003978:	627a      	str	r2, [r7, #36]	@ 0x24
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003980:	2100      	movs	r1, #0
 8003982:	4b47      	ldr	r3, [pc, #284]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003984:	fb03 f201 	mul.w	r2, r3, r1
 8003988:	2300      	movs	r3, #0
 800398a:	fb00 f303 	mul.w	r3, r0, r3
 800398e:	4413      	add	r3, r2
 8003990:	4a43      	ldr	r2, [pc, #268]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003992:	fba0 1202 	umull	r1, r2, r0, r2
 8003996:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003998:	460a      	mov	r2, r1
 800399a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800399c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800399e:	4413      	add	r3, r2
 80039a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a4:	2200      	movs	r2, #0
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	61fa      	str	r2, [r7, #28]
 80039aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039b2:	f7fd f8f9 	bl	8000ba8 <__aeabi_uldivmod>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4613      	mov	r3, r2
 80039bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039be:	e053      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c0:	4b35      	ldr	r3, [pc, #212]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x180>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	099b      	lsrs	r3, r3, #6
 80039c6:	2200      	movs	r2, #0
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	617a      	str	r2, [r7, #20]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039d2:	f04f 0b00 	mov.w	fp, #0
 80039d6:	4652      	mov	r2, sl
 80039d8:	465b      	mov	r3, fp
 80039da:	f04f 0000 	mov.w	r0, #0
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	0159      	lsls	r1, r3, #5
 80039e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e8:	0150      	lsls	r0, r2, #5
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	ebb2 080a 	subs.w	r8, r2, sl
 80039f2:	eb63 090b 	sbc.w	r9, r3, fp
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a0a:	ebb2 0408 	subs.w	r4, r2, r8
 8003a0e:	eb63 0509 	sbc.w	r5, r3, r9
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	00eb      	lsls	r3, r5, #3
 8003a1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a20:	00e2      	lsls	r2, r4, #3
 8003a22:	4614      	mov	r4, r2
 8003a24:	461d      	mov	r5, r3
 8003a26:	eb14 030a 	adds.w	r3, r4, sl
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	eb45 030b 	adc.w	r3, r5, fp
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a3e:	4629      	mov	r1, r5
 8003a40:	028b      	lsls	r3, r1, #10
 8003a42:	4621      	mov	r1, r4
 8003a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a48:	4621      	mov	r1, r4
 8003a4a:	028a      	lsls	r2, r1, #10
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a52:	2200      	movs	r2, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	60fa      	str	r2, [r7, #12]
 8003a58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a5c:	f7fd f8a4 	bl	8000ba8 <__aeabi_uldivmod>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4613      	mov	r3, r2
 8003a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a68:	4b0b      	ldr	r3, [pc, #44]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	0c1b      	lsrs	r3, r3, #16
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	3301      	adds	r3, #1
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003a78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a82:	e002      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a84:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x184>)
 8003a86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3740      	adds	r7, #64	@ 0x40
 8003a90:	46bd      	mov	sp, r7
 8003a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	00f42400 	.word	0x00f42400
 8003aa0:	017d7840 	.word	0x017d7840

08003aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	@ (8003ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20000004 	.word	0x20000004

08003abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ac0:	f7ff fff0 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b05      	ldr	r3, [pc, #20]	@ (8003adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	0a9b      	lsrs	r3, r3, #10
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	4903      	ldr	r1, [pc, #12]	@ (8003ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad2:	5ccb      	ldrb	r3, [r1, r3]
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	08009010 	.word	0x08009010

08003ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ae8:	f7ff ffdc 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	0b5b      	lsrs	r3, r3, #13
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	4903      	ldr	r1, [pc, #12]	@ (8003b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40023800 	.word	0x40023800
 8003b08:	08009010 	.word	0x08009010

08003b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e07b      	b.n	8003c16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d108      	bne.n	8003b38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b2e:	d009      	beq.n	8003b44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	61da      	str	r2, [r3, #28]
 8003b36:	e005      	b.n	8003b44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fe f9ac 	bl	8001ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc8:	ea42 0103 	orr.w	r1, r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0104 	and.w	r1, r3, #4
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	f003 0210 	and.w	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b088      	sub	sp, #32
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c2e:	f7fe fc1b 	bl	8002468 <HAL_GetTick>
 8003c32:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d001      	beq.n	8003c48 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
 8003c46:	e12a      	b.n	8003e9e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_SPI_Transmit+0x36>
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e122      	b.n	8003e9e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_SPI_Transmit+0x48>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e11b      	b.n	8003e9e <HAL_SPI_Transmit+0x280>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2203      	movs	r2, #3
 8003c72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	88fa      	ldrh	r2, [r7, #6]
 8003c86:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	88fa      	ldrh	r2, [r7, #6]
 8003c8c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb4:	d10f      	bne.n	8003cd6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce0:	2b40      	cmp	r3, #64	@ 0x40
 8003ce2:	d007      	beq.n	8003cf4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cfc:	d152      	bne.n	8003da4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_SPI_Transmit+0xee>
 8003d06:	8b7b      	ldrh	r3, [r7, #26]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d145      	bne.n	8003d98 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d10:	881a      	ldrh	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1c:	1c9a      	adds	r2, r3, #2
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d30:	e032      	b.n	8003d98 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d112      	bne.n	8003d66 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	881a      	ldrh	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d50:	1c9a      	adds	r2, r3, #2
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d64:	e018      	b.n	8003d98 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d66:	f7fe fb7f 	bl	8002468 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d803      	bhi.n	8003d7e <HAL_SPI_Transmit+0x160>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d102      	bne.n	8003d84 <HAL_SPI_Transmit+0x166>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e082      	b.n	8003e9e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1c7      	bne.n	8003d32 <HAL_SPI_Transmit+0x114>
 8003da2:	e053      	b.n	8003e4c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_SPI_Transmit+0x194>
 8003dac:	8b7b      	ldrh	r3, [r7, #26]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d147      	bne.n	8003e42 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	7812      	ldrb	r2, [r2, #0]
 8003dbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dd8:	e033      	b.n	8003e42 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d113      	bne.n	8003e10 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	7812      	ldrb	r2, [r2, #0]
 8003df4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e0e:	e018      	b.n	8003e42 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e10:	f7fe fb2a 	bl	8002468 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d803      	bhi.n	8003e28 <HAL_SPI_Transmit+0x20a>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e26:	d102      	bne.n	8003e2e <HAL_SPI_Transmit+0x210>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e02d      	b.n	8003e9e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1c6      	bne.n	8003dda <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	6839      	ldr	r1, [r7, #0]
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 fbd9 	bl	8004608 <SPI_EndRxTxTransaction>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10a      	bne.n	8003e80 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b088      	sub	sp, #32
 8003eaa:	af02      	add	r7, sp, #8
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d001      	beq.n	8003ec6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e104      	b.n	80040d0 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_SPI_Receive+0x2c>
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e0fc      	b.n	80040d0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ede:	d112      	bne.n	8003f06 <HAL_SPI_Receive+0x60>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10e      	bne.n	8003f06 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2204      	movs	r2, #4
 8003eec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ef0:	88fa      	ldrh	r2, [r7, #6]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f8eb 	bl	80040d8 <HAL_SPI_TransmitReceive>
 8003f02:	4603      	mov	r3, r0
 8003f04:	e0e4      	b.n	80040d0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f06:	f7fe faaf 	bl	8002468 <HAL_GetTick>
 8003f0a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_SPI_Receive+0x74>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e0da      	b.n	80040d0 <HAL_SPI_Receive+0x22a>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2204      	movs	r2, #4
 8003f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	88fa      	ldrh	r2, [r7, #6]
 8003f3a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	88fa      	ldrh	r2, [r7, #6]
 8003f40:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f68:	d10f      	bne.n	8003f8a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f94:	2b40      	cmp	r3, #64	@ 0x40
 8003f96:	d007      	beq.n	8003fa8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fa6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d170      	bne.n	8004092 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003fb0:	e035      	b.n	800401e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d115      	bne.n	8003fec <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f103 020c 	add.w	r2, r3, #12
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fcc:	7812      	ldrb	r2, [r2, #0]
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fea:	e018      	b.n	800401e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fec:	f7fe fa3c 	bl	8002468 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d803      	bhi.n	8004004 <HAL_SPI_Receive+0x15e>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d102      	bne.n	800400a <HAL_SPI_Receive+0x164>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e058      	b.n	80040d0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1c4      	bne.n	8003fb2 <HAL_SPI_Receive+0x10c>
 8004028:	e038      	b.n	800409c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d113      	bne.n	8004060 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004042:	b292      	uxth	r2, r2
 8004044:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404a:	1c9a      	adds	r2, r3, #2
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800405e:	e018      	b.n	8004092 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004060:	f7fe fa02 	bl	8002468 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d803      	bhi.n	8004078 <HAL_SPI_Receive+0x1d2>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d102      	bne.n	800407e <HAL_SPI_Receive+0x1d8>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e01e      	b.n	80040d0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1c6      	bne.n	800402a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	6839      	ldr	r1, [r7, #0]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fa4b 	bl	800453c <SPI_EndRxTransaction>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80040ce:	2300      	movs	r3, #0
  }
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08a      	sub	sp, #40	@ 0x28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040e6:	2301      	movs	r3, #1
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040ea:	f7fe f9bd 	bl	8002468 <HAL_GetTick>
 80040ee:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040f6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80040fe:	887b      	ldrh	r3, [r7, #2]
 8004100:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004102:	7ffb      	ldrb	r3, [r7, #31]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d00c      	beq.n	8004122 <HAL_SPI_TransmitReceive+0x4a>
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800410e:	d106      	bne.n	800411e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <HAL_SPI_TransmitReceive+0x46>
 8004118:	7ffb      	ldrb	r3, [r7, #31]
 800411a:	2b04      	cmp	r3, #4
 800411c:	d001      	beq.n	8004122 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800411e:	2302      	movs	r3, #2
 8004120:	e17f      	b.n	8004422 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_SPI_TransmitReceive+0x5c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_SPI_TransmitReceive+0x5c>
 800412e:	887b      	ldrh	r3, [r7, #2]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e174      	b.n	8004422 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_SPI_TransmitReceive+0x6e>
 8004142:	2302      	movs	r3, #2
 8004144:	e16d      	b.n	8004422 <HAL_SPI_TransmitReceive+0x34a>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b04      	cmp	r3, #4
 8004158:	d003      	beq.n	8004162 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2205      	movs	r2, #5
 800415e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	887a      	ldrh	r2, [r7, #2]
 8004172:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	887a      	ldrh	r2, [r7, #2]
 8004178:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	887a      	ldrh	r2, [r7, #2]
 8004184:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	887a      	ldrh	r2, [r7, #2]
 800418a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a2:	2b40      	cmp	r3, #64	@ 0x40
 80041a4:	d007      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041be:	d17e      	bne.n	80042be <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_SPI_TransmitReceive+0xf6>
 80041c8:	8afb      	ldrh	r3, [r7, #22]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d16c      	bne.n	80042a8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	881a      	ldrh	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041de:	1c9a      	adds	r2, r3, #2
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041f2:	e059      	b.n	80042a8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d11b      	bne.n	800423a <HAL_SPI_TransmitReceive+0x162>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d016      	beq.n	800423a <HAL_SPI_TransmitReceive+0x162>
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	2b01      	cmp	r3, #1
 8004210:	d113      	bne.n	800423a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004216:	881a      	ldrh	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004222:	1c9a      	adds	r2, r3, #2
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d119      	bne.n	800427c <HAL_SPI_TransmitReceive+0x1a4>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d014      	beq.n	800427c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	b292      	uxth	r2, r2
 800425e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004264:	1c9a      	adds	r2, r3, #2
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004278:	2301      	movs	r3, #1
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800427c:	f7fe f8f4 	bl	8002468 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004288:	429a      	cmp	r2, r3
 800428a:	d80d      	bhi.n	80042a8 <HAL_SPI_TransmitReceive+0x1d0>
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d009      	beq.n	80042a8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e0bc      	b.n	8004422 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1a0      	bne.n	80041f4 <HAL_SPI_TransmitReceive+0x11c>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d19b      	bne.n	80041f4 <HAL_SPI_TransmitReceive+0x11c>
 80042bc:	e082      	b.n	80043c4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_SPI_TransmitReceive+0x1f4>
 80042c6:	8afb      	ldrh	r3, [r7, #22]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d171      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	7812      	ldrb	r2, [r2, #0]
 80042d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042f2:	e05d      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d11c      	bne.n	800433c <HAL_SPI_TransmitReceive+0x264>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d017      	beq.n	800433c <HAL_SPI_TransmitReceive+0x264>
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	2b01      	cmp	r3, #1
 8004310:	d114      	bne.n	800433c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	330c      	adds	r3, #12
 800431c:	7812      	ldrb	r2, [r2, #0]
 800431e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b01      	cmp	r3, #1
 8004348:	d119      	bne.n	800437e <HAL_SPI_TransmitReceive+0x2a6>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d014      	beq.n	800437e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800437a:	2301      	movs	r3, #1
 800437c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800437e:	f7fe f873 	bl	8002468 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800438a:	429a      	cmp	r2, r3
 800438c:	d803      	bhi.n	8004396 <HAL_SPI_TransmitReceive+0x2be>
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d102      	bne.n	800439c <HAL_SPI_TransmitReceive+0x2c4>
 8004396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e038      	b.n	8004422 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d19c      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x21c>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d197      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043c4:	6a3a      	ldr	r2, [r7, #32]
 80043c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f91d 	bl	8004608 <SPI_EndRxTxTransaction>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e01d      	b.n	8004422 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004420:	2300      	movs	r3, #0
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3728      	adds	r7, #40	@ 0x28
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800443c:	f7fe f814 	bl	8002468 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	4413      	add	r3, r2
 800444a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800444c:	f7fe f80c 	bl	8002468 <HAL_GetTick>
 8004450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004452:	4b39      	ldr	r3, [pc, #228]	@ (8004538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	015b      	lsls	r3, r3, #5
 8004458:	0d1b      	lsrs	r3, r3, #20
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	fb02 f303 	mul.w	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004462:	e055      	b.n	8004510 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d051      	beq.n	8004510 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800446c:	f7fd fffc 	bl	8002468 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	429a      	cmp	r2, r3
 800447a:	d902      	bls.n	8004482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d13d      	bne.n	80044fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800449a:	d111      	bne.n	80044c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a4:	d004      	beq.n	80044b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ae:	d107      	bne.n	80044c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c8:	d10f      	bne.n	80044ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e018      	b.n	8004530 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
 8004508:	e002      	b.n	8004510 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	3b01      	subs	r3, #1
 800450e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4013      	ands	r3, r2
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	429a      	cmp	r2, r3
 800451e:	bf0c      	ite	eq
 8004520:	2301      	moveq	r3, #1
 8004522:	2300      	movne	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	429a      	cmp	r2, r3
 800452c:	d19a      	bne.n	8004464 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000004 	.word	0x20000004

0800453c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004550:	d111      	bne.n	8004576 <SPI_EndRxTransaction+0x3a>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800455a:	d004      	beq.n	8004566 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004564:	d107      	bne.n	8004576 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004574:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800457e:	d12a      	bne.n	80045d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004588:	d012      	beq.n	80045b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2200      	movs	r2, #0
 8004592:	2180      	movs	r1, #128	@ 0x80
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f7ff ff49 	bl	800442c <SPI_WaitFlagStateUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02d      	beq.n	80045fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e026      	b.n	80045fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2200      	movs	r2, #0
 80045b8:	2101      	movs	r1, #1
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f7ff ff36 	bl	800442c <SPI_WaitFlagStateUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01a      	beq.n	80045fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ca:	f043 0220 	orr.w	r2, r3, #32
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e013      	b.n	80045fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2200      	movs	r2, #0
 80045de:	2101      	movs	r1, #1
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff ff23 	bl	800442c <SPI_WaitFlagStateUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e000      	b.n	80045fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2201      	movs	r2, #1
 800461c:	2102      	movs	r1, #2
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff ff04 	bl	800442c <SPI_WaitFlagStateUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462e:	f043 0220 	orr.w	r2, r3, #32
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e032      	b.n	80046a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800463a:	4b1b      	ldr	r3, [pc, #108]	@ (80046a8 <SPI_EndRxTxTransaction+0xa0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1b      	ldr	r2, [pc, #108]	@ (80046ac <SPI_EndRxTxTransaction+0xa4>)
 8004640:	fba2 2303 	umull	r2, r3, r2, r3
 8004644:	0d5b      	lsrs	r3, r3, #21
 8004646:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004658:	d112      	bne.n	8004680 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2200      	movs	r2, #0
 8004662:	2180      	movs	r1, #128	@ 0x80
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff fee1 	bl	800442c <SPI_WaitFlagStateUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d016      	beq.n	800469e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004674:	f043 0220 	orr.w	r2, r3, #32
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e00f      	b.n	80046a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	3b01      	subs	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	2b80      	cmp	r3, #128	@ 0x80
 8004698:	d0f2      	beq.n	8004680 <SPI_EndRxTxTransaction+0x78>
 800469a:	e000      	b.n	800469e <SPI_EndRxTxTransaction+0x96>
        break;
 800469c:	bf00      	nop
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20000004 	.word	0x20000004
 80046ac:	165e9f81 	.word	0x165e9f81

080046b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e042      	b.n	8004748 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fd fdaa 	bl	8002230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2224      	movs	r2, #36	@ 0x24
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fec7 	bl	8005488 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695a      	ldr	r2, [r3, #20]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	@ 0x28
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b20      	cmp	r3, #32
 800476e:	d175      	bne.n	800485c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_UART_Transmit+0x2c>
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e06e      	b.n	800485e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2221      	movs	r2, #33	@ 0x21
 800478a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800478e:	f7fd fe6b 	bl	8002468 <HAL_GetTick>
 8004792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	88fa      	ldrh	r2, [r7, #6]
 8004798:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	88fa      	ldrh	r2, [r7, #6]
 800479e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a8:	d108      	bne.n	80047bc <HAL_UART_Transmit+0x6c>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	e003      	b.n	80047c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047c4:	e02e      	b.n	8004824 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2200      	movs	r2, #0
 80047ce:	2180      	movs	r1, #128	@ 0x80
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 fc3e 	bl	8005052 <UART_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e03a      	b.n	800485e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10b      	bne.n	8004806 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	3302      	adds	r3, #2
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	e007      	b.n	8004816 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	781a      	ldrb	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	3301      	adds	r3, #1
 8004814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1cb      	bne.n	80047c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2200      	movs	r2, #0
 8004836:	2140      	movs	r1, #64	@ 0x40
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fc0a 	bl	8005052 <UART_WaitOnFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e006      	b.n	800485e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	e000      	b.n	800485e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800485c:	2302      	movs	r3, #2
  }
}
 800485e:	4618      	mov	r0, r3
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08c      	sub	sp, #48	@ 0x30
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	4613      	mov	r3, r2
 8004874:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b20      	cmp	r3, #32
 8004880:	d162      	bne.n	8004948 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <HAL_UART_Transmit_DMA+0x26>
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e05b      	b.n	800494a <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	88fa      	ldrh	r2, [r7, #6]
 800489c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	88fa      	ldrh	r2, [r7, #6]
 80048a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2221      	movs	r2, #33	@ 0x21
 80048ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b6:	4a27      	ldr	r2, [pc, #156]	@ (8004954 <HAL_UART_Transmit_DMA+0xec>)
 80048b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048be:	4a26      	ldr	r2, [pc, #152]	@ (8004958 <HAL_UART_Transmit_DMA+0xf0>)
 80048c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	4a25      	ldr	r2, [pc, #148]	@ (800495c <HAL_UART_Transmit_DMA+0xf4>)
 80048c8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ce:	2200      	movs	r2, #0
 80048d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80048d2:	f107 0308 	add.w	r3, r7, #8
 80048d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80048dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3304      	adds	r3, #4
 80048e6:	461a      	mov	r2, r3
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	f7fd ffad 	bl	8002848 <HAL_DMA_Start_IT>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2210      	movs	r2, #16
 80048f8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e021      	b.n	800494a <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800490e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3314      	adds	r3, #20
 8004916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	617b      	str	r3, [r7, #20]
   return(result);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004926:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3314      	adds	r3, #20
 800492e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004930:	627a      	str	r2, [r7, #36]	@ 0x24
 8004932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6a39      	ldr	r1, [r7, #32]
 8004936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	61fb      	str	r3, [r7, #28]
   return(result);
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e5      	bne.n	8004910 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	e000      	b.n	800494a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004948:	2302      	movs	r3, #2
  }
}
 800494a:	4618      	mov	r0, r3
 800494c:	3730      	adds	r7, #48	@ 0x30
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	08004f09 	.word	0x08004f09
 8004958:	08004fa3 	.word	0x08004fa3
 800495c:	08004fbf 	.word	0x08004fbf

08004960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b0ba      	sub	sp, #232	@ 0xe8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004986:	2300      	movs	r3, #0
 8004988:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800498c:	2300      	movs	r3, #0
 800498e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800499e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10f      	bne.n	80049c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_UART_IRQHandler+0x66>
 80049b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fca4 	bl	800530c <UART_Receive_IT>
      return;
 80049c4:	e273      	b.n	8004eae <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80de 	beq.w	8004b8c <HAL_UART_IRQHandler+0x22c>
 80049d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80d1 	beq.w	8004b8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_UART_IRQHandler+0xae>
 80049f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a06:	f043 0201 	orr.w	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00b      	beq.n	8004a32 <HAL_UART_IRQHandler+0xd2>
 8004a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2a:	f043 0202 	orr.w	r2, r3, #2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <HAL_UART_IRQHandler+0xf6>
 8004a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4e:	f043 0204 	orr.w	r2, r3, #4
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d011      	beq.n	8004a86 <HAL_UART_IRQHandler+0x126>
 8004a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d105      	bne.n	8004a7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7e:	f043 0208 	orr.w	r2, r3, #8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 820a 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <HAL_UART_IRQHandler+0x14e>
 8004a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fc2f 	bl	800530c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab8:	2b40      	cmp	r3, #64	@ 0x40
 8004aba:	bf0c      	ite	eq
 8004abc:	2301      	moveq	r3, #1
 8004abe:	2300      	movne	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <HAL_UART_IRQHandler+0x17a>
 8004ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d04f      	beq.n	8004b7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fb3a 	bl	8005154 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aea:	2b40      	cmp	r3, #64	@ 0x40
 8004aec:	d141      	bne.n	8004b72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3314      	adds	r3, #20
 8004af4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3314      	adds	r3, #20
 8004b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1d9      	bne.n	8004aee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d013      	beq.n	8004b6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b46:	4a8a      	ldr	r2, [pc, #552]	@ (8004d70 <HAL_UART_IRQHandler+0x410>)
 8004b48:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fd ff42 	bl	80029d8 <HAL_DMA_Abort_IT>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d016      	beq.n	8004b88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b64:	4610      	mov	r0, r2
 8004b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	e00e      	b.n	8004b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f9b6 	bl	8004edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e00a      	b.n	8004b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f9b2 	bl	8004edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e006      	b.n	8004b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f9ae 	bl	8004edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b86:	e18d      	b.n	8004ea4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	bf00      	nop
    return;
 8004b8a:	e18b      	b.n	8004ea4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f040 8167 	bne.w	8004e64 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 8160 	beq.w	8004e64 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8159 	beq.w	8004e64 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd2:	2b40      	cmp	r3, #64	@ 0x40
 8004bd4:	f040 80ce 	bne.w	8004d74 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004be4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80a9 	beq.w	8004d40 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	f080 80a2 	bcs.w	8004d40 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c0e:	f000 8088 	beq.w	8004d22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1d9      	bne.n	8004c12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e1      	bne.n	8004c5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004caa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3314      	adds	r3, #20
 8004cba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ccc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e3      	bne.n	8004c9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cf2:	f023 0310 	bic.w	r3, r3, #16
 8004cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e3      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fd fdeb 	bl	80028f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f8d9 	bl	8004ef0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004d3e:	e0b3      	b.n	8004ea8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	f040 80ad 	bne.w	8004ea8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d58:	f040 80a6 	bne.w	8004ea8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d66:	4619      	mov	r1, r3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f8c1 	bl	8004ef0 <HAL_UARTEx_RxEventCallback>
      return;
 8004d6e:	e09b      	b.n	8004ea8 <HAL_UART_IRQHandler+0x548>
 8004d70:	0800521b 	.word	0x0800521b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 808e 	beq.w	8004eac <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004d90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8089 	beq.w	8004eac <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	330c      	adds	r3, #12
 8004da0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004db0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	330c      	adds	r3, #12
 8004dba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004dbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004dc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e3      	bne.n	8004d9a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	623b      	str	r3, [r7, #32]
   return(result);
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3314      	adds	r3, #20
 8004df2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004df6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e3      	bne.n	8004dd2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	330c      	adds	r3, #12
 8004e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	e853 3f00 	ldrex	r3, [r3]
 8004e26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0310 	bic.w	r3, r3, #16
 8004e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e3c:	61fa      	str	r2, [r7, #28]
 8004e3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	69b9      	ldr	r1, [r7, #24]
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	617b      	str	r3, [r7, #20]
   return(result);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e3      	bne.n	8004e18 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f847 	bl	8004ef0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e62:	e023      	b.n	8004eac <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <HAL_UART_IRQHandler+0x524>
 8004e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f9dd 	bl	800523c <UART_Transmit_IT>
    return;
 8004e82:	e014      	b.n	8004eae <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00e      	beq.n	8004eae <HAL_UART_IRQHandler+0x54e>
 8004e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fa1d 	bl	80052dc <UART_EndTransmit_IT>
    return;
 8004ea2:	e004      	b.n	8004eae <HAL_UART_IRQHandler+0x54e>
    return;
 8004ea4:	bf00      	nop
 8004ea6:	e002      	b.n	8004eae <HAL_UART_IRQHandler+0x54e>
      return;
 8004ea8:	bf00      	nop
 8004eaa:	e000      	b.n	8004eae <HAL_UART_IRQHandler+0x54e>
      return;
 8004eac:	bf00      	nop
  }
}
 8004eae:	37e8      	adds	r7, #232	@ 0xe8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b090      	sub	sp, #64	@ 0x40
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d137      	bne.n	8004f94 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f26:	2200      	movs	r2, #0
 8004f28:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3314      	adds	r3, #20
 8004f30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	623b      	str	r3, [r7, #32]
   return(result);
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3314      	adds	r3, #20
 8004f48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e5      	bne.n	8004f2a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f7e:	61fa      	str	r2, [r7, #28]
 8004f80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	69b9      	ldr	r1, [r7, #24]
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	617b      	str	r3, [r7, #20]
   return(result);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e5      	bne.n	8004f5e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f92:	e002      	b.n	8004f9a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004f94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004f96:	f7fc ff3d 	bl	8001e14 <HAL_UART_TxCpltCallback>
}
 8004f9a:	bf00      	nop
 8004f9c:	3740      	adds	r7, #64	@ 0x40
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff ff7f 	bl	8004eb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fda:	2b80      	cmp	r3, #128	@ 0x80
 8004fdc:	bf0c      	ite	eq
 8004fde:	2301      	moveq	r3, #1
 8004fe0:	2300      	movne	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b21      	cmp	r3, #33	@ 0x21
 8004ff0:	d108      	bne.n	8005004 <UART_DMAError+0x46>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004ffe:	68b8      	ldr	r0, [r7, #8]
 8005000:	f000 f880 	bl	8005104 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500e:	2b40      	cmp	r3, #64	@ 0x40
 8005010:	bf0c      	ite	eq
 8005012:	2301      	moveq	r3, #1
 8005014:	2300      	movne	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b22      	cmp	r3, #34	@ 0x22
 8005024:	d108      	bne.n	8005038 <UART_DMAError+0x7a>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2200      	movs	r2, #0
 8005030:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005032:	68b8      	ldr	r0, [r7, #8]
 8005034:	f000 f88e 	bl	8005154 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503c:	f043 0210 	orr.w	r2, r3, #16
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005044:	68b8      	ldr	r0, [r7, #8]
 8005046:	f7ff ff49 	bl	8004edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b086      	sub	sp, #24
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	603b      	str	r3, [r7, #0]
 800505e:	4613      	mov	r3, r2
 8005060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005062:	e03b      	b.n	80050dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d037      	beq.n	80050dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800506c:	f7fd f9fc 	bl	8002468 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	6a3a      	ldr	r2, [r7, #32]
 8005078:	429a      	cmp	r2, r3
 800507a:	d302      	bcc.n	8005082 <UART_WaitOnFlagUntilTimeout+0x30>
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e03a      	b.n	80050fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d023      	beq.n	80050dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b80      	cmp	r3, #128	@ 0x80
 8005098:	d020      	beq.n	80050dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b40      	cmp	r3, #64	@ 0x40
 800509e:	d01d      	beq.n	80050dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d116      	bne.n	80050dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f845 	bl	8005154 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2208      	movs	r2, #8
 80050ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e00f      	b.n	80050fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4013      	ands	r3, r2
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	bf0c      	ite	eq
 80050ec:	2301      	moveq	r3, #1
 80050ee:	2300      	movne	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	461a      	mov	r2, r3
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d0b4      	beq.n	8005064 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b089      	sub	sp, #36	@ 0x24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	330c      	adds	r3, #12
 8005112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	60bb      	str	r3, [r7, #8]
   return(result);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	330c      	adds	r3, #12
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	61ba      	str	r2, [r7, #24]
 800512e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6979      	ldr	r1, [r7, #20]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	613b      	str	r3, [r7, #16]
   return(result);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e5      	bne.n	800510c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005148:	bf00      	nop
 800514a:	3724      	adds	r7, #36	@ 0x24
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005154:	b480      	push	{r7}
 8005156:	b095      	sub	sp, #84	@ 0x54
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	330c      	adds	r3, #12
 8005162:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800516c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800517c:	643a      	str	r2, [r7, #64]	@ 0x40
 800517e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005182:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005184:	e841 2300 	strex	r3, r2, [r1]
 8005188:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e5      	bne.n	800515c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3314      	adds	r3, #20
 8005196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	61fb      	str	r3, [r7, #28]
   return(result);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3314      	adds	r3, #20
 80051ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e5      	bne.n	8005190 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d119      	bne.n	8005200 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	60bb      	str	r3, [r7, #8]
   return(result);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f023 0310 	bic.w	r3, r3, #16
 80051e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051ec:	61ba      	str	r2, [r7, #24]
 80051ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6979      	ldr	r1, [r7, #20]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	613b      	str	r3, [r7, #16]
   return(result);
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e5      	bne.n	80051cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800520e:	bf00      	nop
 8005210:	3754      	adds	r7, #84	@ 0x54
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005226:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f7ff fe54 	bl	8004edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005234:	bf00      	nop
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b21      	cmp	r3, #33	@ 0x21
 800524e:	d13e      	bne.n	80052ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005258:	d114      	bne.n	8005284 <UART_Transmit_IT+0x48>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d110      	bne.n	8005284 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005276:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	1c9a      	adds	r2, r3, #2
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	621a      	str	r2, [r3, #32]
 8005282:	e008      	b.n	8005296 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	1c59      	adds	r1, r3, #1
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6211      	str	r1, [r2, #32]
 800528e:	781a      	ldrb	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29b      	uxth	r3, r3
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4619      	mov	r1, r3
 80052a4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10f      	bne.n	80052ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68da      	ldr	r2, [r3, #12]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e000      	b.n	80052d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052ce:	2302      	movs	r3, #2
  }
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7fc fd89 	bl	8001e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08c      	sub	sp, #48	@ 0x30
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005314:	2300      	movs	r3, #0
 8005316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005318:	2300      	movs	r3, #0
 800531a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b22      	cmp	r3, #34	@ 0x22
 8005326:	f040 80aa 	bne.w	800547e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005332:	d115      	bne.n	8005360 <UART_Receive_IT+0x54>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d111      	bne.n	8005360 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005340:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	b29b      	uxth	r3, r3
 800534a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534e:	b29a      	uxth	r2, r3
 8005350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005352:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005358:	1c9a      	adds	r2, r3, #2
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	629a      	str	r2, [r3, #40]	@ 0x28
 800535e:	e024      	b.n	80053aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005364:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800536e:	d007      	beq.n	8005380 <UART_Receive_IT+0x74>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10a      	bne.n	800538e <UART_Receive_IT+0x82>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d106      	bne.n	800538e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	b2da      	uxtb	r2, r3
 8005388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	e008      	b.n	80053a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800539a:	b2da      	uxtb	r2, r3
 800539c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	4619      	mov	r1, r3
 80053b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d15d      	bne.n	800547a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0220 	bic.w	r2, r2, #32
 80053cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0201 	bic.w	r2, r2, #1
 80053ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005400:	2b01      	cmp	r3, #1
 8005402:	d135      	bne.n	8005470 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	330c      	adds	r3, #12
 8005410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	613b      	str	r3, [r7, #16]
   return(result);
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f023 0310 	bic.w	r3, r3, #16
 8005420:	627b      	str	r3, [r7, #36]	@ 0x24
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330c      	adds	r3, #12
 8005428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800542a:	623a      	str	r2, [r7, #32]
 800542c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	69f9      	ldr	r1, [r7, #28]
 8005430:	6a3a      	ldr	r2, [r7, #32]
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	61bb      	str	r3, [r7, #24]
   return(result);
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e5      	bne.n	800540a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b10      	cmp	r3, #16
 800544a:	d10a      	bne.n	8005462 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff fd41 	bl	8004ef0 <HAL_UARTEx_RxEventCallback>
 800546e:	e002      	b.n	8005476 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff fd29 	bl	8004ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	e002      	b.n	8005480 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
  }
}
 8005480:	4618      	mov	r0, r3
 8005482:	3730      	adds	r7, #48	@ 0x30
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800548c:	b0c0      	sub	sp, #256	@ 0x100
 800548e:	af00      	add	r7, sp, #0
 8005490:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a4:	68d9      	ldr	r1, [r3, #12]
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	ea40 0301 	orr.w	r3, r0, r1
 80054b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	431a      	orrs	r2, r3
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054e0:	f021 010c 	bic.w	r1, r1, #12
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054ee:	430b      	orrs	r3, r1
 80054f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005502:	6999      	ldr	r1, [r3, #24]
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	ea40 0301 	orr.w	r3, r0, r1
 800550e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	4b8f      	ldr	r3, [pc, #572]	@ (8005754 <UART_SetConfig+0x2cc>)
 8005518:	429a      	cmp	r2, r3
 800551a:	d005      	beq.n	8005528 <UART_SetConfig+0xa0>
 800551c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b8d      	ldr	r3, [pc, #564]	@ (8005758 <UART_SetConfig+0x2d0>)
 8005524:	429a      	cmp	r2, r3
 8005526:	d104      	bne.n	8005532 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005528:	f7fe fadc 	bl	8003ae4 <HAL_RCC_GetPCLK2Freq>
 800552c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005530:	e003      	b.n	800553a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005532:	f7fe fac3 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 8005536:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800553a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005544:	f040 810c 	bne.w	8005760 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800554c:	2200      	movs	r2, #0
 800554e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005552:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005556:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800555a:	4622      	mov	r2, r4
 800555c:	462b      	mov	r3, r5
 800555e:	1891      	adds	r1, r2, r2
 8005560:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005562:	415b      	adcs	r3, r3
 8005564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005566:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800556a:	4621      	mov	r1, r4
 800556c:	eb12 0801 	adds.w	r8, r2, r1
 8005570:	4629      	mov	r1, r5
 8005572:	eb43 0901 	adc.w	r9, r3, r1
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800558a:	4690      	mov	r8, r2
 800558c:	4699      	mov	r9, r3
 800558e:	4623      	mov	r3, r4
 8005590:	eb18 0303 	adds.w	r3, r8, r3
 8005594:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005598:	462b      	mov	r3, r5
 800559a:	eb49 0303 	adc.w	r3, r9, r3
 800559e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055b6:	460b      	mov	r3, r1
 80055b8:	18db      	adds	r3, r3, r3
 80055ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80055bc:	4613      	mov	r3, r2
 80055be:	eb42 0303 	adc.w	r3, r2, r3
 80055c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80055c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055cc:	f7fb faec 	bl	8000ba8 <__aeabi_uldivmod>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4b61      	ldr	r3, [pc, #388]	@ (800575c <UART_SetConfig+0x2d4>)
 80055d6:	fba3 2302 	umull	r2, r3, r3, r2
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	011c      	lsls	r4, r3, #4
 80055de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055f0:	4642      	mov	r2, r8
 80055f2:	464b      	mov	r3, r9
 80055f4:	1891      	adds	r1, r2, r2
 80055f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055f8:	415b      	adcs	r3, r3
 80055fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005600:	4641      	mov	r1, r8
 8005602:	eb12 0a01 	adds.w	sl, r2, r1
 8005606:	4649      	mov	r1, r9
 8005608:	eb43 0b01 	adc.w	fp, r3, r1
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005618:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800561c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005620:	4692      	mov	sl, r2
 8005622:	469b      	mov	fp, r3
 8005624:	4643      	mov	r3, r8
 8005626:	eb1a 0303 	adds.w	r3, sl, r3
 800562a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800562e:	464b      	mov	r3, r9
 8005630:	eb4b 0303 	adc.w	r3, fp, r3
 8005634:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005644:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005648:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800564c:	460b      	mov	r3, r1
 800564e:	18db      	adds	r3, r3, r3
 8005650:	643b      	str	r3, [r7, #64]	@ 0x40
 8005652:	4613      	mov	r3, r2
 8005654:	eb42 0303 	adc.w	r3, r2, r3
 8005658:	647b      	str	r3, [r7, #68]	@ 0x44
 800565a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800565e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005662:	f7fb faa1 	bl	8000ba8 <__aeabi_uldivmod>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4611      	mov	r1, r2
 800566c:	4b3b      	ldr	r3, [pc, #236]	@ (800575c <UART_SetConfig+0x2d4>)
 800566e:	fba3 2301 	umull	r2, r3, r3, r1
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	2264      	movs	r2, #100	@ 0x64
 8005676:	fb02 f303 	mul.w	r3, r2, r3
 800567a:	1acb      	subs	r3, r1, r3
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005682:	4b36      	ldr	r3, [pc, #216]	@ (800575c <UART_SetConfig+0x2d4>)
 8005684:	fba3 2302 	umull	r2, r3, r3, r2
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005690:	441c      	add	r4, r3
 8005692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005696:	2200      	movs	r2, #0
 8005698:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800569c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80056a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80056a4:	4642      	mov	r2, r8
 80056a6:	464b      	mov	r3, r9
 80056a8:	1891      	adds	r1, r2, r2
 80056aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80056ac:	415b      	adcs	r3, r3
 80056ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056b4:	4641      	mov	r1, r8
 80056b6:	1851      	adds	r1, r2, r1
 80056b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80056ba:	4649      	mov	r1, r9
 80056bc:	414b      	adcs	r3, r1
 80056be:	637b      	str	r3, [r7, #52]	@ 0x34
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056cc:	4659      	mov	r1, fp
 80056ce:	00cb      	lsls	r3, r1, #3
 80056d0:	4651      	mov	r1, sl
 80056d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056d6:	4651      	mov	r1, sl
 80056d8:	00ca      	lsls	r2, r1, #3
 80056da:	4610      	mov	r0, r2
 80056dc:	4619      	mov	r1, r3
 80056de:	4603      	mov	r3, r0
 80056e0:	4642      	mov	r2, r8
 80056e2:	189b      	adds	r3, r3, r2
 80056e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056e8:	464b      	mov	r3, r9
 80056ea:	460a      	mov	r2, r1
 80056ec:	eb42 0303 	adc.w	r3, r2, r3
 80056f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005700:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005704:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005708:	460b      	mov	r3, r1
 800570a:	18db      	adds	r3, r3, r3
 800570c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800570e:	4613      	mov	r3, r2
 8005710:	eb42 0303 	adc.w	r3, r2, r3
 8005714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005716:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800571a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800571e:	f7fb fa43 	bl	8000ba8 <__aeabi_uldivmod>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4b0d      	ldr	r3, [pc, #52]	@ (800575c <UART_SetConfig+0x2d4>)
 8005728:	fba3 1302 	umull	r1, r3, r3, r2
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	2164      	movs	r1, #100	@ 0x64
 8005730:	fb01 f303 	mul.w	r3, r1, r3
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	3332      	adds	r3, #50	@ 0x32
 800573a:	4a08      	ldr	r2, [pc, #32]	@ (800575c <UART_SetConfig+0x2d4>)
 800573c:	fba2 2303 	umull	r2, r3, r2, r3
 8005740:	095b      	lsrs	r3, r3, #5
 8005742:	f003 0207 	and.w	r2, r3, #7
 8005746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4422      	add	r2, r4
 800574e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005750:	e106      	b.n	8005960 <UART_SetConfig+0x4d8>
 8005752:	bf00      	nop
 8005754:	40011000 	.word	0x40011000
 8005758:	40011400 	.word	0x40011400
 800575c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005764:	2200      	movs	r2, #0
 8005766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800576a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800576e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005772:	4642      	mov	r2, r8
 8005774:	464b      	mov	r3, r9
 8005776:	1891      	adds	r1, r2, r2
 8005778:	6239      	str	r1, [r7, #32]
 800577a:	415b      	adcs	r3, r3
 800577c:	627b      	str	r3, [r7, #36]	@ 0x24
 800577e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005782:	4641      	mov	r1, r8
 8005784:	1854      	adds	r4, r2, r1
 8005786:	4649      	mov	r1, r9
 8005788:	eb43 0501 	adc.w	r5, r3, r1
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	00eb      	lsls	r3, r5, #3
 8005796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800579a:	00e2      	lsls	r2, r4, #3
 800579c:	4614      	mov	r4, r2
 800579e:	461d      	mov	r5, r3
 80057a0:	4643      	mov	r3, r8
 80057a2:	18e3      	adds	r3, r4, r3
 80057a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057a8:	464b      	mov	r3, r9
 80057aa:	eb45 0303 	adc.w	r3, r5, r3
 80057ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057ce:	4629      	mov	r1, r5
 80057d0:	008b      	lsls	r3, r1, #2
 80057d2:	4621      	mov	r1, r4
 80057d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057d8:	4621      	mov	r1, r4
 80057da:	008a      	lsls	r2, r1, #2
 80057dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057e0:	f7fb f9e2 	bl	8000ba8 <__aeabi_uldivmod>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4b60      	ldr	r3, [pc, #384]	@ (800596c <UART_SetConfig+0x4e4>)
 80057ea:	fba3 2302 	umull	r2, r3, r3, r2
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	011c      	lsls	r4, r3, #4
 80057f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005800:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005804:	4642      	mov	r2, r8
 8005806:	464b      	mov	r3, r9
 8005808:	1891      	adds	r1, r2, r2
 800580a:	61b9      	str	r1, [r7, #24]
 800580c:	415b      	adcs	r3, r3
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005814:	4641      	mov	r1, r8
 8005816:	1851      	adds	r1, r2, r1
 8005818:	6139      	str	r1, [r7, #16]
 800581a:	4649      	mov	r1, r9
 800581c:	414b      	adcs	r3, r1
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800582c:	4659      	mov	r1, fp
 800582e:	00cb      	lsls	r3, r1, #3
 8005830:	4651      	mov	r1, sl
 8005832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005836:	4651      	mov	r1, sl
 8005838:	00ca      	lsls	r2, r1, #3
 800583a:	4610      	mov	r0, r2
 800583c:	4619      	mov	r1, r3
 800583e:	4603      	mov	r3, r0
 8005840:	4642      	mov	r2, r8
 8005842:	189b      	adds	r3, r3, r2
 8005844:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005848:	464b      	mov	r3, r9
 800584a:	460a      	mov	r2, r1
 800584c:	eb42 0303 	adc.w	r3, r2, r3
 8005850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800585e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800586c:	4649      	mov	r1, r9
 800586e:	008b      	lsls	r3, r1, #2
 8005870:	4641      	mov	r1, r8
 8005872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005876:	4641      	mov	r1, r8
 8005878:	008a      	lsls	r2, r1, #2
 800587a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800587e:	f7fb f993 	bl	8000ba8 <__aeabi_uldivmod>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4611      	mov	r1, r2
 8005888:	4b38      	ldr	r3, [pc, #224]	@ (800596c <UART_SetConfig+0x4e4>)
 800588a:	fba3 2301 	umull	r2, r3, r3, r1
 800588e:	095b      	lsrs	r3, r3, #5
 8005890:	2264      	movs	r2, #100	@ 0x64
 8005892:	fb02 f303 	mul.w	r3, r2, r3
 8005896:	1acb      	subs	r3, r1, r3
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	3332      	adds	r3, #50	@ 0x32
 800589c:	4a33      	ldr	r2, [pc, #204]	@ (800596c <UART_SetConfig+0x4e4>)
 800589e:	fba2 2303 	umull	r2, r3, r2, r3
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058a8:	441c      	add	r4, r3
 80058aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ae:	2200      	movs	r2, #0
 80058b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80058b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80058b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80058b8:	4642      	mov	r2, r8
 80058ba:	464b      	mov	r3, r9
 80058bc:	1891      	adds	r1, r2, r2
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	415b      	adcs	r3, r3
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058c8:	4641      	mov	r1, r8
 80058ca:	1851      	adds	r1, r2, r1
 80058cc:	6039      	str	r1, [r7, #0]
 80058ce:	4649      	mov	r1, r9
 80058d0:	414b      	adcs	r3, r1
 80058d2:	607b      	str	r3, [r7, #4]
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058e0:	4659      	mov	r1, fp
 80058e2:	00cb      	lsls	r3, r1, #3
 80058e4:	4651      	mov	r1, sl
 80058e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ea:	4651      	mov	r1, sl
 80058ec:	00ca      	lsls	r2, r1, #3
 80058ee:	4610      	mov	r0, r2
 80058f0:	4619      	mov	r1, r3
 80058f2:	4603      	mov	r3, r0
 80058f4:	4642      	mov	r2, r8
 80058f6:	189b      	adds	r3, r3, r2
 80058f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058fa:	464b      	mov	r3, r9
 80058fc:	460a      	mov	r2, r1
 80058fe:	eb42 0303 	adc.w	r3, r2, r3
 8005902:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	663b      	str	r3, [r7, #96]	@ 0x60
 800590e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800591c:	4649      	mov	r1, r9
 800591e:	008b      	lsls	r3, r1, #2
 8005920:	4641      	mov	r1, r8
 8005922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005926:	4641      	mov	r1, r8
 8005928:	008a      	lsls	r2, r1, #2
 800592a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800592e:	f7fb f93b 	bl	8000ba8 <__aeabi_uldivmod>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4b0d      	ldr	r3, [pc, #52]	@ (800596c <UART_SetConfig+0x4e4>)
 8005938:	fba3 1302 	umull	r1, r3, r3, r2
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	2164      	movs	r1, #100	@ 0x64
 8005940:	fb01 f303 	mul.w	r3, r1, r3
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	3332      	adds	r3, #50	@ 0x32
 800594a:	4a08      	ldr	r2, [pc, #32]	@ (800596c <UART_SetConfig+0x4e4>)
 800594c:	fba2 2303 	umull	r2, r3, r2, r3
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	f003 020f 	and.w	r2, r3, #15
 8005956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4422      	add	r2, r4
 800595e:	609a      	str	r2, [r3, #8]
}
 8005960:	bf00      	nop
 8005962:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005966:	46bd      	mov	sp, r7
 8005968:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800596c:	51eb851f 	.word	0x51eb851f

08005970 <__cvt>:
 8005970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	ec57 6b10 	vmov	r6, r7, d0
 8005978:	2f00      	cmp	r7, #0
 800597a:	460c      	mov	r4, r1
 800597c:	4619      	mov	r1, r3
 800597e:	463b      	mov	r3, r7
 8005980:	bfbb      	ittet	lt
 8005982:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005986:	461f      	movlt	r7, r3
 8005988:	2300      	movge	r3, #0
 800598a:	232d      	movlt	r3, #45	@ 0x2d
 800598c:	700b      	strb	r3, [r1, #0]
 800598e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005990:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005994:	4691      	mov	r9, r2
 8005996:	f023 0820 	bic.w	r8, r3, #32
 800599a:	bfbc      	itt	lt
 800599c:	4632      	movlt	r2, r6
 800599e:	4616      	movlt	r6, r2
 80059a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059a4:	d005      	beq.n	80059b2 <__cvt+0x42>
 80059a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80059aa:	d100      	bne.n	80059ae <__cvt+0x3e>
 80059ac:	3401      	adds	r4, #1
 80059ae:	2102      	movs	r1, #2
 80059b0:	e000      	b.n	80059b4 <__cvt+0x44>
 80059b2:	2103      	movs	r1, #3
 80059b4:	ab03      	add	r3, sp, #12
 80059b6:	9301      	str	r3, [sp, #4]
 80059b8:	ab02      	add	r3, sp, #8
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	ec47 6b10 	vmov	d0, r6, r7
 80059c0:	4653      	mov	r3, sl
 80059c2:	4622      	mov	r2, r4
 80059c4:	f001 f840 	bl	8006a48 <_dtoa_r>
 80059c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80059cc:	4605      	mov	r5, r0
 80059ce:	d119      	bne.n	8005a04 <__cvt+0x94>
 80059d0:	f019 0f01 	tst.w	r9, #1
 80059d4:	d00e      	beq.n	80059f4 <__cvt+0x84>
 80059d6:	eb00 0904 	add.w	r9, r0, r4
 80059da:	2200      	movs	r2, #0
 80059dc:	2300      	movs	r3, #0
 80059de:	4630      	mov	r0, r6
 80059e0:	4639      	mov	r1, r7
 80059e2:	f7fb f871 	bl	8000ac8 <__aeabi_dcmpeq>
 80059e6:	b108      	cbz	r0, 80059ec <__cvt+0x7c>
 80059e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80059ec:	2230      	movs	r2, #48	@ 0x30
 80059ee:	9b03      	ldr	r3, [sp, #12]
 80059f0:	454b      	cmp	r3, r9
 80059f2:	d31e      	bcc.n	8005a32 <__cvt+0xc2>
 80059f4:	9b03      	ldr	r3, [sp, #12]
 80059f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059f8:	1b5b      	subs	r3, r3, r5
 80059fa:	4628      	mov	r0, r5
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	b004      	add	sp, #16
 8005a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a08:	eb00 0904 	add.w	r9, r0, r4
 8005a0c:	d1e5      	bne.n	80059da <__cvt+0x6a>
 8005a0e:	7803      	ldrb	r3, [r0, #0]
 8005a10:	2b30      	cmp	r3, #48	@ 0x30
 8005a12:	d10a      	bne.n	8005a2a <__cvt+0xba>
 8005a14:	2200      	movs	r2, #0
 8005a16:	2300      	movs	r3, #0
 8005a18:	4630      	mov	r0, r6
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	f7fb f854 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a20:	b918      	cbnz	r0, 8005a2a <__cvt+0xba>
 8005a22:	f1c4 0401 	rsb	r4, r4, #1
 8005a26:	f8ca 4000 	str.w	r4, [sl]
 8005a2a:	f8da 3000 	ldr.w	r3, [sl]
 8005a2e:	4499      	add	r9, r3
 8005a30:	e7d3      	b.n	80059da <__cvt+0x6a>
 8005a32:	1c59      	adds	r1, r3, #1
 8005a34:	9103      	str	r1, [sp, #12]
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	e7d9      	b.n	80059ee <__cvt+0x7e>

08005a3a <__exponent>:
 8005a3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a3c:	2900      	cmp	r1, #0
 8005a3e:	bfba      	itte	lt
 8005a40:	4249      	neglt	r1, r1
 8005a42:	232d      	movlt	r3, #45	@ 0x2d
 8005a44:	232b      	movge	r3, #43	@ 0x2b
 8005a46:	2909      	cmp	r1, #9
 8005a48:	7002      	strb	r2, [r0, #0]
 8005a4a:	7043      	strb	r3, [r0, #1]
 8005a4c:	dd29      	ble.n	8005aa2 <__exponent+0x68>
 8005a4e:	f10d 0307 	add.w	r3, sp, #7
 8005a52:	461d      	mov	r5, r3
 8005a54:	270a      	movs	r7, #10
 8005a56:	461a      	mov	r2, r3
 8005a58:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a5c:	fb07 1416 	mls	r4, r7, r6, r1
 8005a60:	3430      	adds	r4, #48	@ 0x30
 8005a62:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a66:	460c      	mov	r4, r1
 8005a68:	2c63      	cmp	r4, #99	@ 0x63
 8005a6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a6e:	4631      	mov	r1, r6
 8005a70:	dcf1      	bgt.n	8005a56 <__exponent+0x1c>
 8005a72:	3130      	adds	r1, #48	@ 0x30
 8005a74:	1e94      	subs	r4, r2, #2
 8005a76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a7a:	1c41      	adds	r1, r0, #1
 8005a7c:	4623      	mov	r3, r4
 8005a7e:	42ab      	cmp	r3, r5
 8005a80:	d30a      	bcc.n	8005a98 <__exponent+0x5e>
 8005a82:	f10d 0309 	add.w	r3, sp, #9
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	42ac      	cmp	r4, r5
 8005a8a:	bf88      	it	hi
 8005a8c:	2300      	movhi	r3, #0
 8005a8e:	3302      	adds	r3, #2
 8005a90:	4403      	add	r3, r0
 8005a92:	1a18      	subs	r0, r3, r0
 8005a94:	b003      	add	sp, #12
 8005a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a98:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005aa0:	e7ed      	b.n	8005a7e <__exponent+0x44>
 8005aa2:	2330      	movs	r3, #48	@ 0x30
 8005aa4:	3130      	adds	r1, #48	@ 0x30
 8005aa6:	7083      	strb	r3, [r0, #2]
 8005aa8:	70c1      	strb	r1, [r0, #3]
 8005aaa:	1d03      	adds	r3, r0, #4
 8005aac:	e7f1      	b.n	8005a92 <__exponent+0x58>
	...

08005ab0 <_printf_float>:
 8005ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab4:	b08d      	sub	sp, #52	@ 0x34
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005abc:	4616      	mov	r6, r2
 8005abe:	461f      	mov	r7, r3
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	f000 fec1 	bl	8006848 <_localeconv_r>
 8005ac6:	6803      	ldr	r3, [r0, #0]
 8005ac8:	9304      	str	r3, [sp, #16]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fa fbd0 	bl	8000270 <strlen>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad8:	9005      	str	r0, [sp, #20]
 8005ada:	3307      	adds	r3, #7
 8005adc:	f023 0307 	bic.w	r3, r3, #7
 8005ae0:	f103 0208 	add.w	r2, r3, #8
 8005ae4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ae8:	f8d4 b000 	ldr.w	fp, [r4]
 8005aec:	f8c8 2000 	str.w	r2, [r8]
 8005af0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005af4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005af8:	9307      	str	r3, [sp, #28]
 8005afa:	f8cd 8018 	str.w	r8, [sp, #24]
 8005afe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005b02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b06:	4b9c      	ldr	r3, [pc, #624]	@ (8005d78 <_printf_float+0x2c8>)
 8005b08:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0c:	f7fb f80e 	bl	8000b2c <__aeabi_dcmpun>
 8005b10:	bb70      	cbnz	r0, 8005b70 <_printf_float+0xc0>
 8005b12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b16:	4b98      	ldr	r3, [pc, #608]	@ (8005d78 <_printf_float+0x2c8>)
 8005b18:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1c:	f7fa ffe8 	bl	8000af0 <__aeabi_dcmple>
 8005b20:	bb30      	cbnz	r0, 8005b70 <_printf_float+0xc0>
 8005b22:	2200      	movs	r2, #0
 8005b24:	2300      	movs	r3, #0
 8005b26:	4640      	mov	r0, r8
 8005b28:	4649      	mov	r1, r9
 8005b2a:	f7fa ffd7 	bl	8000adc <__aeabi_dcmplt>
 8005b2e:	b110      	cbz	r0, 8005b36 <_printf_float+0x86>
 8005b30:	232d      	movs	r3, #45	@ 0x2d
 8005b32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b36:	4a91      	ldr	r2, [pc, #580]	@ (8005d7c <_printf_float+0x2cc>)
 8005b38:	4b91      	ldr	r3, [pc, #580]	@ (8005d80 <_printf_float+0x2d0>)
 8005b3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005b3e:	bf8c      	ite	hi
 8005b40:	4690      	movhi	r8, r2
 8005b42:	4698      	movls	r8, r3
 8005b44:	2303      	movs	r3, #3
 8005b46:	6123      	str	r3, [r4, #16]
 8005b48:	f02b 0304 	bic.w	r3, fp, #4
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	f04f 0900 	mov.w	r9, #0
 8005b52:	9700      	str	r7, [sp, #0]
 8005b54:	4633      	mov	r3, r6
 8005b56:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005b58:	4621      	mov	r1, r4
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 f9d2 	bl	8005f04 <_printf_common>
 8005b60:	3001      	adds	r0, #1
 8005b62:	f040 808d 	bne.w	8005c80 <_printf_float+0x1d0>
 8005b66:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6a:	b00d      	add	sp, #52	@ 0x34
 8005b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	4640      	mov	r0, r8
 8005b76:	4649      	mov	r1, r9
 8005b78:	f7fa ffd8 	bl	8000b2c <__aeabi_dcmpun>
 8005b7c:	b140      	cbz	r0, 8005b90 <_printf_float+0xe0>
 8005b7e:	464b      	mov	r3, r9
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bfbc      	itt	lt
 8005b84:	232d      	movlt	r3, #45	@ 0x2d
 8005b86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b8a:	4a7e      	ldr	r2, [pc, #504]	@ (8005d84 <_printf_float+0x2d4>)
 8005b8c:	4b7e      	ldr	r3, [pc, #504]	@ (8005d88 <_printf_float+0x2d8>)
 8005b8e:	e7d4      	b.n	8005b3a <_printf_float+0x8a>
 8005b90:	6863      	ldr	r3, [r4, #4]
 8005b92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005b96:	9206      	str	r2, [sp, #24]
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	d13b      	bne.n	8005c14 <_printf_float+0x164>
 8005b9c:	2306      	movs	r3, #6
 8005b9e:	6063      	str	r3, [r4, #4]
 8005ba0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	6022      	str	r2, [r4, #0]
 8005ba8:	9303      	str	r3, [sp, #12]
 8005baa:	ab0a      	add	r3, sp, #40	@ 0x28
 8005bac:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005bb0:	ab09      	add	r3, sp, #36	@ 0x24
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	6861      	ldr	r1, [r4, #4]
 8005bb6:	ec49 8b10 	vmov	d0, r8, r9
 8005bba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f7ff fed6 	bl	8005970 <__cvt>
 8005bc4:	9b06      	ldr	r3, [sp, #24]
 8005bc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005bc8:	2b47      	cmp	r3, #71	@ 0x47
 8005bca:	4680      	mov	r8, r0
 8005bcc:	d129      	bne.n	8005c22 <_printf_float+0x172>
 8005bce:	1cc8      	adds	r0, r1, #3
 8005bd0:	db02      	blt.n	8005bd8 <_printf_float+0x128>
 8005bd2:	6863      	ldr	r3, [r4, #4]
 8005bd4:	4299      	cmp	r1, r3
 8005bd6:	dd41      	ble.n	8005c5c <_printf_float+0x1ac>
 8005bd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8005bdc:	fa5f fa8a 	uxtb.w	sl, sl
 8005be0:	3901      	subs	r1, #1
 8005be2:	4652      	mov	r2, sl
 8005be4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005be8:	9109      	str	r1, [sp, #36]	@ 0x24
 8005bea:	f7ff ff26 	bl	8005a3a <__exponent>
 8005bee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bf0:	1813      	adds	r3, r2, r0
 8005bf2:	2a01      	cmp	r2, #1
 8005bf4:	4681      	mov	r9, r0
 8005bf6:	6123      	str	r3, [r4, #16]
 8005bf8:	dc02      	bgt.n	8005c00 <_printf_float+0x150>
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	07d2      	lsls	r2, r2, #31
 8005bfe:	d501      	bpl.n	8005c04 <_printf_float+0x154>
 8005c00:	3301      	adds	r3, #1
 8005c02:	6123      	str	r3, [r4, #16]
 8005c04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0a2      	beq.n	8005b52 <_printf_float+0xa2>
 8005c0c:	232d      	movs	r3, #45	@ 0x2d
 8005c0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c12:	e79e      	b.n	8005b52 <_printf_float+0xa2>
 8005c14:	9a06      	ldr	r2, [sp, #24]
 8005c16:	2a47      	cmp	r2, #71	@ 0x47
 8005c18:	d1c2      	bne.n	8005ba0 <_printf_float+0xf0>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1c0      	bne.n	8005ba0 <_printf_float+0xf0>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e7bd      	b.n	8005b9e <_printf_float+0xee>
 8005c22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c26:	d9db      	bls.n	8005be0 <_printf_float+0x130>
 8005c28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005c2c:	d118      	bne.n	8005c60 <_printf_float+0x1b0>
 8005c2e:	2900      	cmp	r1, #0
 8005c30:	6863      	ldr	r3, [r4, #4]
 8005c32:	dd0b      	ble.n	8005c4c <_printf_float+0x19c>
 8005c34:	6121      	str	r1, [r4, #16]
 8005c36:	b913      	cbnz	r3, 8005c3e <_printf_float+0x18e>
 8005c38:	6822      	ldr	r2, [r4, #0]
 8005c3a:	07d0      	lsls	r0, r2, #31
 8005c3c:	d502      	bpl.n	8005c44 <_printf_float+0x194>
 8005c3e:	3301      	adds	r3, #1
 8005c40:	440b      	add	r3, r1
 8005c42:	6123      	str	r3, [r4, #16]
 8005c44:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005c46:	f04f 0900 	mov.w	r9, #0
 8005c4a:	e7db      	b.n	8005c04 <_printf_float+0x154>
 8005c4c:	b913      	cbnz	r3, 8005c54 <_printf_float+0x1a4>
 8005c4e:	6822      	ldr	r2, [r4, #0]
 8005c50:	07d2      	lsls	r2, r2, #31
 8005c52:	d501      	bpl.n	8005c58 <_printf_float+0x1a8>
 8005c54:	3302      	adds	r3, #2
 8005c56:	e7f4      	b.n	8005c42 <_printf_float+0x192>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e7f2      	b.n	8005c42 <_printf_float+0x192>
 8005c5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c62:	4299      	cmp	r1, r3
 8005c64:	db05      	blt.n	8005c72 <_printf_float+0x1c2>
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	6121      	str	r1, [r4, #16]
 8005c6a:	07d8      	lsls	r0, r3, #31
 8005c6c:	d5ea      	bpl.n	8005c44 <_printf_float+0x194>
 8005c6e:	1c4b      	adds	r3, r1, #1
 8005c70:	e7e7      	b.n	8005c42 <_printf_float+0x192>
 8005c72:	2900      	cmp	r1, #0
 8005c74:	bfd4      	ite	le
 8005c76:	f1c1 0202 	rsble	r2, r1, #2
 8005c7a:	2201      	movgt	r2, #1
 8005c7c:	4413      	add	r3, r2
 8005c7e:	e7e0      	b.n	8005c42 <_printf_float+0x192>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	055a      	lsls	r2, r3, #21
 8005c84:	d407      	bmi.n	8005c96 <_printf_float+0x1e6>
 8005c86:	6923      	ldr	r3, [r4, #16]
 8005c88:	4642      	mov	r2, r8
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	47b8      	blx	r7
 8005c90:	3001      	adds	r0, #1
 8005c92:	d12b      	bne.n	8005cec <_printf_float+0x23c>
 8005c94:	e767      	b.n	8005b66 <_printf_float+0xb6>
 8005c96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c9a:	f240 80dd 	bls.w	8005e58 <_printf_float+0x3a8>
 8005c9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f7fa ff0f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d033      	beq.n	8005d16 <_printf_float+0x266>
 8005cae:	4a37      	ldr	r2, [pc, #220]	@ (8005d8c <_printf_float+0x2dc>)
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f43f af54 	beq.w	8005b66 <_printf_float+0xb6>
 8005cbe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005cc2:	4543      	cmp	r3, r8
 8005cc4:	db02      	blt.n	8005ccc <_printf_float+0x21c>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	07d8      	lsls	r0, r3, #31
 8005cca:	d50f      	bpl.n	8005cec <_printf_float+0x23c>
 8005ccc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	f43f af45 	beq.w	8005b66 <_printf_float+0xb6>
 8005cdc:	f04f 0900 	mov.w	r9, #0
 8005ce0:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ce4:	f104 0a1a 	add.w	sl, r4, #26
 8005ce8:	45c8      	cmp	r8, r9
 8005cea:	dc09      	bgt.n	8005d00 <_printf_float+0x250>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	079b      	lsls	r3, r3, #30
 8005cf0:	f100 8103 	bmi.w	8005efa <_printf_float+0x44a>
 8005cf4:	68e0      	ldr	r0, [r4, #12]
 8005cf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cf8:	4298      	cmp	r0, r3
 8005cfa:	bfb8      	it	lt
 8005cfc:	4618      	movlt	r0, r3
 8005cfe:	e734      	b.n	8005b6a <_printf_float+0xba>
 8005d00:	2301      	movs	r3, #1
 8005d02:	4652      	mov	r2, sl
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b8      	blx	r7
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	f43f af2b 	beq.w	8005b66 <_printf_float+0xb6>
 8005d10:	f109 0901 	add.w	r9, r9, #1
 8005d14:	e7e8      	b.n	8005ce8 <_printf_float+0x238>
 8005d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dc39      	bgt.n	8005d90 <_printf_float+0x2e0>
 8005d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d8c <_printf_float+0x2dc>)
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4631      	mov	r1, r6
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b8      	blx	r7
 8005d26:	3001      	adds	r0, #1
 8005d28:	f43f af1d 	beq.w	8005b66 <_printf_float+0xb6>
 8005d2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005d30:	ea59 0303 	orrs.w	r3, r9, r3
 8005d34:	d102      	bne.n	8005d3c <_printf_float+0x28c>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	07d9      	lsls	r1, r3, #31
 8005d3a:	d5d7      	bpl.n	8005cec <_printf_float+0x23c>
 8005d3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d40:	4631      	mov	r1, r6
 8005d42:	4628      	mov	r0, r5
 8005d44:	47b8      	blx	r7
 8005d46:	3001      	adds	r0, #1
 8005d48:	f43f af0d 	beq.w	8005b66 <_printf_float+0xb6>
 8005d4c:	f04f 0a00 	mov.w	sl, #0
 8005d50:	f104 0b1a 	add.w	fp, r4, #26
 8005d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d56:	425b      	negs	r3, r3
 8005d58:	4553      	cmp	r3, sl
 8005d5a:	dc01      	bgt.n	8005d60 <_printf_float+0x2b0>
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	e793      	b.n	8005c88 <_printf_float+0x1d8>
 8005d60:	2301      	movs	r3, #1
 8005d62:	465a      	mov	r2, fp
 8005d64:	4631      	mov	r1, r6
 8005d66:	4628      	mov	r0, r5
 8005d68:	47b8      	blx	r7
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	f43f aefb 	beq.w	8005b66 <_printf_float+0xb6>
 8005d70:	f10a 0a01 	add.w	sl, sl, #1
 8005d74:	e7ee      	b.n	8005d54 <_printf_float+0x2a4>
 8005d76:	bf00      	nop
 8005d78:	7fefffff 	.word	0x7fefffff
 8005d7c:	08009024 	.word	0x08009024
 8005d80:	08009020 	.word	0x08009020
 8005d84:	0800902c 	.word	0x0800902c
 8005d88:	08009028 	.word	0x08009028
 8005d8c:	08009030 	.word	0x08009030
 8005d90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d96:	4553      	cmp	r3, sl
 8005d98:	bfa8      	it	ge
 8005d9a:	4653      	movge	r3, sl
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	4699      	mov	r9, r3
 8005da0:	dc36      	bgt.n	8005e10 <_printf_float+0x360>
 8005da2:	f04f 0b00 	mov.w	fp, #0
 8005da6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005daa:	f104 021a 	add.w	r2, r4, #26
 8005dae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005db0:	9306      	str	r3, [sp, #24]
 8005db2:	eba3 0309 	sub.w	r3, r3, r9
 8005db6:	455b      	cmp	r3, fp
 8005db8:	dc31      	bgt.n	8005e1e <_printf_float+0x36e>
 8005dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dbc:	459a      	cmp	sl, r3
 8005dbe:	dc3a      	bgt.n	8005e36 <_printf_float+0x386>
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	07da      	lsls	r2, r3, #31
 8005dc4:	d437      	bmi.n	8005e36 <_printf_float+0x386>
 8005dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc8:	ebaa 0903 	sub.w	r9, sl, r3
 8005dcc:	9b06      	ldr	r3, [sp, #24]
 8005dce:	ebaa 0303 	sub.w	r3, sl, r3
 8005dd2:	4599      	cmp	r9, r3
 8005dd4:	bfa8      	it	ge
 8005dd6:	4699      	movge	r9, r3
 8005dd8:	f1b9 0f00 	cmp.w	r9, #0
 8005ddc:	dc33      	bgt.n	8005e46 <_printf_float+0x396>
 8005dde:	f04f 0800 	mov.w	r8, #0
 8005de2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005de6:	f104 0b1a 	add.w	fp, r4, #26
 8005dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dec:	ebaa 0303 	sub.w	r3, sl, r3
 8005df0:	eba3 0309 	sub.w	r3, r3, r9
 8005df4:	4543      	cmp	r3, r8
 8005df6:	f77f af79 	ble.w	8005cec <_printf_float+0x23c>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	465a      	mov	r2, fp
 8005dfe:	4631      	mov	r1, r6
 8005e00:	4628      	mov	r0, r5
 8005e02:	47b8      	blx	r7
 8005e04:	3001      	adds	r0, #1
 8005e06:	f43f aeae 	beq.w	8005b66 <_printf_float+0xb6>
 8005e0a:	f108 0801 	add.w	r8, r8, #1
 8005e0e:	e7ec      	b.n	8005dea <_printf_float+0x33a>
 8005e10:	4642      	mov	r2, r8
 8005e12:	4631      	mov	r1, r6
 8005e14:	4628      	mov	r0, r5
 8005e16:	47b8      	blx	r7
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d1c2      	bne.n	8005da2 <_printf_float+0x2f2>
 8005e1c:	e6a3      	b.n	8005b66 <_printf_float+0xb6>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4631      	mov	r1, r6
 8005e22:	4628      	mov	r0, r5
 8005e24:	9206      	str	r2, [sp, #24]
 8005e26:	47b8      	blx	r7
 8005e28:	3001      	adds	r0, #1
 8005e2a:	f43f ae9c 	beq.w	8005b66 <_printf_float+0xb6>
 8005e2e:	9a06      	ldr	r2, [sp, #24]
 8005e30:	f10b 0b01 	add.w	fp, fp, #1
 8005e34:	e7bb      	b.n	8005dae <_printf_float+0x2fe>
 8005e36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	47b8      	blx	r7
 8005e40:	3001      	adds	r0, #1
 8005e42:	d1c0      	bne.n	8005dc6 <_printf_float+0x316>
 8005e44:	e68f      	b.n	8005b66 <_printf_float+0xb6>
 8005e46:	9a06      	ldr	r2, [sp, #24]
 8005e48:	464b      	mov	r3, r9
 8005e4a:	4442      	add	r2, r8
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4628      	mov	r0, r5
 8005e50:	47b8      	blx	r7
 8005e52:	3001      	adds	r0, #1
 8005e54:	d1c3      	bne.n	8005dde <_printf_float+0x32e>
 8005e56:	e686      	b.n	8005b66 <_printf_float+0xb6>
 8005e58:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e5c:	f1ba 0f01 	cmp.w	sl, #1
 8005e60:	dc01      	bgt.n	8005e66 <_printf_float+0x3b6>
 8005e62:	07db      	lsls	r3, r3, #31
 8005e64:	d536      	bpl.n	8005ed4 <_printf_float+0x424>
 8005e66:	2301      	movs	r3, #1
 8005e68:	4642      	mov	r2, r8
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b8      	blx	r7
 8005e70:	3001      	adds	r0, #1
 8005e72:	f43f ae78 	beq.w	8005b66 <_printf_float+0xb6>
 8005e76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	47b8      	blx	r7
 8005e80:	3001      	adds	r0, #1
 8005e82:	f43f ae70 	beq.w	8005b66 <_printf_float+0xb6>
 8005e86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e92:	f7fa fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e96:	b9c0      	cbnz	r0, 8005eca <_printf_float+0x41a>
 8005e98:	4653      	mov	r3, sl
 8005e9a:	f108 0201 	add.w	r2, r8, #1
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b8      	blx	r7
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d10c      	bne.n	8005ec2 <_printf_float+0x412>
 8005ea8:	e65d      	b.n	8005b66 <_printf_float+0xb6>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	465a      	mov	r2, fp
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	47b8      	blx	r7
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	f43f ae56 	beq.w	8005b66 <_printf_float+0xb6>
 8005eba:	f108 0801 	add.w	r8, r8, #1
 8005ebe:	45d0      	cmp	r8, sl
 8005ec0:	dbf3      	blt.n	8005eaa <_printf_float+0x3fa>
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005ec8:	e6df      	b.n	8005c8a <_printf_float+0x1da>
 8005eca:	f04f 0800 	mov.w	r8, #0
 8005ece:	f104 0b1a 	add.w	fp, r4, #26
 8005ed2:	e7f4      	b.n	8005ebe <_printf_float+0x40e>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	4642      	mov	r2, r8
 8005ed8:	e7e1      	b.n	8005e9e <_printf_float+0x3ee>
 8005eda:	2301      	movs	r3, #1
 8005edc:	464a      	mov	r2, r9
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b8      	blx	r7
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	f43f ae3e 	beq.w	8005b66 <_printf_float+0xb6>
 8005eea:	f108 0801 	add.w	r8, r8, #1
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005ef2:	1a5b      	subs	r3, r3, r1
 8005ef4:	4543      	cmp	r3, r8
 8005ef6:	dcf0      	bgt.n	8005eda <_printf_float+0x42a>
 8005ef8:	e6fc      	b.n	8005cf4 <_printf_float+0x244>
 8005efa:	f04f 0800 	mov.w	r8, #0
 8005efe:	f104 0919 	add.w	r9, r4, #25
 8005f02:	e7f4      	b.n	8005eee <_printf_float+0x43e>

08005f04 <_printf_common>:
 8005f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	4616      	mov	r6, r2
 8005f0a:	4698      	mov	r8, r3
 8005f0c:	688a      	ldr	r2, [r1, #8]
 8005f0e:	690b      	ldr	r3, [r1, #16]
 8005f10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f14:	4293      	cmp	r3, r2
 8005f16:	bfb8      	it	lt
 8005f18:	4613      	movlt	r3, r2
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f20:	4607      	mov	r7, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	b10a      	cbz	r2, 8005f2a <_printf_common+0x26>
 8005f26:	3301      	adds	r3, #1
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	0699      	lsls	r1, r3, #26
 8005f2e:	bf42      	ittt	mi
 8005f30:	6833      	ldrmi	r3, [r6, #0]
 8005f32:	3302      	addmi	r3, #2
 8005f34:	6033      	strmi	r3, [r6, #0]
 8005f36:	6825      	ldr	r5, [r4, #0]
 8005f38:	f015 0506 	ands.w	r5, r5, #6
 8005f3c:	d106      	bne.n	8005f4c <_printf_common+0x48>
 8005f3e:	f104 0a19 	add.w	sl, r4, #25
 8005f42:	68e3      	ldr	r3, [r4, #12]
 8005f44:	6832      	ldr	r2, [r6, #0]
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	42ab      	cmp	r3, r5
 8005f4a:	dc26      	bgt.n	8005f9a <_printf_common+0x96>
 8005f4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f50:	6822      	ldr	r2, [r4, #0]
 8005f52:	3b00      	subs	r3, #0
 8005f54:	bf18      	it	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	0692      	lsls	r2, r2, #26
 8005f5a:	d42b      	bmi.n	8005fb4 <_printf_common+0xb0>
 8005f5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f60:	4641      	mov	r1, r8
 8005f62:	4638      	mov	r0, r7
 8005f64:	47c8      	blx	r9
 8005f66:	3001      	adds	r0, #1
 8005f68:	d01e      	beq.n	8005fa8 <_printf_common+0xa4>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	6922      	ldr	r2, [r4, #16]
 8005f6e:	f003 0306 	and.w	r3, r3, #6
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	bf02      	ittt	eq
 8005f76:	68e5      	ldreq	r5, [r4, #12]
 8005f78:	6833      	ldreq	r3, [r6, #0]
 8005f7a:	1aed      	subeq	r5, r5, r3
 8005f7c:	68a3      	ldr	r3, [r4, #8]
 8005f7e:	bf0c      	ite	eq
 8005f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f84:	2500      	movne	r5, #0
 8005f86:	4293      	cmp	r3, r2
 8005f88:	bfc4      	itt	gt
 8005f8a:	1a9b      	subgt	r3, r3, r2
 8005f8c:	18ed      	addgt	r5, r5, r3
 8005f8e:	2600      	movs	r6, #0
 8005f90:	341a      	adds	r4, #26
 8005f92:	42b5      	cmp	r5, r6
 8005f94:	d11a      	bne.n	8005fcc <_printf_common+0xc8>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e008      	b.n	8005fac <_printf_common+0xa8>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	4652      	mov	r2, sl
 8005f9e:	4641      	mov	r1, r8
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	47c8      	blx	r9
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d103      	bne.n	8005fb0 <_printf_common+0xac>
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	e7c6      	b.n	8005f42 <_printf_common+0x3e>
 8005fb4:	18e1      	adds	r1, r4, r3
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	2030      	movs	r0, #48	@ 0x30
 8005fba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fbe:	4422      	add	r2, r4
 8005fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fc8:	3302      	adds	r3, #2
 8005fca:	e7c7      	b.n	8005f5c <_printf_common+0x58>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	4622      	mov	r2, r4
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	47c8      	blx	r9
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d0e6      	beq.n	8005fa8 <_printf_common+0xa4>
 8005fda:	3601      	adds	r6, #1
 8005fdc:	e7d9      	b.n	8005f92 <_printf_common+0x8e>
	...

08005fe0 <_printf_i>:
 8005fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	7e0f      	ldrb	r7, [r1, #24]
 8005fe6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fe8:	2f78      	cmp	r7, #120	@ 0x78
 8005fea:	4691      	mov	r9, r2
 8005fec:	4680      	mov	r8, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	469a      	mov	sl, r3
 8005ff2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ff6:	d807      	bhi.n	8006008 <_printf_i+0x28>
 8005ff8:	2f62      	cmp	r7, #98	@ 0x62
 8005ffa:	d80a      	bhi.n	8006012 <_printf_i+0x32>
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	f000 80d1 	beq.w	80061a4 <_printf_i+0x1c4>
 8006002:	2f58      	cmp	r7, #88	@ 0x58
 8006004:	f000 80b8 	beq.w	8006178 <_printf_i+0x198>
 8006008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800600c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006010:	e03a      	b.n	8006088 <_printf_i+0xa8>
 8006012:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006016:	2b15      	cmp	r3, #21
 8006018:	d8f6      	bhi.n	8006008 <_printf_i+0x28>
 800601a:	a101      	add	r1, pc, #4	@ (adr r1, 8006020 <_printf_i+0x40>)
 800601c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006020:	08006079 	.word	0x08006079
 8006024:	0800608d 	.word	0x0800608d
 8006028:	08006009 	.word	0x08006009
 800602c:	08006009 	.word	0x08006009
 8006030:	08006009 	.word	0x08006009
 8006034:	08006009 	.word	0x08006009
 8006038:	0800608d 	.word	0x0800608d
 800603c:	08006009 	.word	0x08006009
 8006040:	08006009 	.word	0x08006009
 8006044:	08006009 	.word	0x08006009
 8006048:	08006009 	.word	0x08006009
 800604c:	0800618b 	.word	0x0800618b
 8006050:	080060b7 	.word	0x080060b7
 8006054:	08006145 	.word	0x08006145
 8006058:	08006009 	.word	0x08006009
 800605c:	08006009 	.word	0x08006009
 8006060:	080061ad 	.word	0x080061ad
 8006064:	08006009 	.word	0x08006009
 8006068:	080060b7 	.word	0x080060b7
 800606c:	08006009 	.word	0x08006009
 8006070:	08006009 	.word	0x08006009
 8006074:	0800614d 	.word	0x0800614d
 8006078:	6833      	ldr	r3, [r6, #0]
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6032      	str	r2, [r6, #0]
 8006080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006088:	2301      	movs	r3, #1
 800608a:	e09c      	b.n	80061c6 <_printf_i+0x1e6>
 800608c:	6833      	ldr	r3, [r6, #0]
 800608e:	6820      	ldr	r0, [r4, #0]
 8006090:	1d19      	adds	r1, r3, #4
 8006092:	6031      	str	r1, [r6, #0]
 8006094:	0606      	lsls	r6, r0, #24
 8006096:	d501      	bpl.n	800609c <_printf_i+0xbc>
 8006098:	681d      	ldr	r5, [r3, #0]
 800609a:	e003      	b.n	80060a4 <_printf_i+0xc4>
 800609c:	0645      	lsls	r5, r0, #25
 800609e:	d5fb      	bpl.n	8006098 <_printf_i+0xb8>
 80060a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060a4:	2d00      	cmp	r5, #0
 80060a6:	da03      	bge.n	80060b0 <_printf_i+0xd0>
 80060a8:	232d      	movs	r3, #45	@ 0x2d
 80060aa:	426d      	negs	r5, r5
 80060ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060b0:	4858      	ldr	r0, [pc, #352]	@ (8006214 <_printf_i+0x234>)
 80060b2:	230a      	movs	r3, #10
 80060b4:	e011      	b.n	80060da <_printf_i+0xfa>
 80060b6:	6821      	ldr	r1, [r4, #0]
 80060b8:	6833      	ldr	r3, [r6, #0]
 80060ba:	0608      	lsls	r0, r1, #24
 80060bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80060c0:	d402      	bmi.n	80060c8 <_printf_i+0xe8>
 80060c2:	0649      	lsls	r1, r1, #25
 80060c4:	bf48      	it	mi
 80060c6:	b2ad      	uxthmi	r5, r5
 80060c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80060ca:	4852      	ldr	r0, [pc, #328]	@ (8006214 <_printf_i+0x234>)
 80060cc:	6033      	str	r3, [r6, #0]
 80060ce:	bf14      	ite	ne
 80060d0:	230a      	movne	r3, #10
 80060d2:	2308      	moveq	r3, #8
 80060d4:	2100      	movs	r1, #0
 80060d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060da:	6866      	ldr	r6, [r4, #4]
 80060dc:	60a6      	str	r6, [r4, #8]
 80060de:	2e00      	cmp	r6, #0
 80060e0:	db05      	blt.n	80060ee <_printf_i+0x10e>
 80060e2:	6821      	ldr	r1, [r4, #0]
 80060e4:	432e      	orrs	r6, r5
 80060e6:	f021 0104 	bic.w	r1, r1, #4
 80060ea:	6021      	str	r1, [r4, #0]
 80060ec:	d04b      	beq.n	8006186 <_printf_i+0x1a6>
 80060ee:	4616      	mov	r6, r2
 80060f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80060f4:	fb03 5711 	mls	r7, r3, r1, r5
 80060f8:	5dc7      	ldrb	r7, [r0, r7]
 80060fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060fe:	462f      	mov	r7, r5
 8006100:	42bb      	cmp	r3, r7
 8006102:	460d      	mov	r5, r1
 8006104:	d9f4      	bls.n	80060f0 <_printf_i+0x110>
 8006106:	2b08      	cmp	r3, #8
 8006108:	d10b      	bne.n	8006122 <_printf_i+0x142>
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	07df      	lsls	r7, r3, #31
 800610e:	d508      	bpl.n	8006122 <_printf_i+0x142>
 8006110:	6923      	ldr	r3, [r4, #16]
 8006112:	6861      	ldr	r1, [r4, #4]
 8006114:	4299      	cmp	r1, r3
 8006116:	bfde      	ittt	le
 8006118:	2330      	movle	r3, #48	@ 0x30
 800611a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800611e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006122:	1b92      	subs	r2, r2, r6
 8006124:	6122      	str	r2, [r4, #16]
 8006126:	f8cd a000 	str.w	sl, [sp]
 800612a:	464b      	mov	r3, r9
 800612c:	aa03      	add	r2, sp, #12
 800612e:	4621      	mov	r1, r4
 8006130:	4640      	mov	r0, r8
 8006132:	f7ff fee7 	bl	8005f04 <_printf_common>
 8006136:	3001      	adds	r0, #1
 8006138:	d14a      	bne.n	80061d0 <_printf_i+0x1f0>
 800613a:	f04f 30ff 	mov.w	r0, #4294967295
 800613e:	b004      	add	sp, #16
 8006140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	f043 0320 	orr.w	r3, r3, #32
 800614a:	6023      	str	r3, [r4, #0]
 800614c:	4832      	ldr	r0, [pc, #200]	@ (8006218 <_printf_i+0x238>)
 800614e:	2778      	movs	r7, #120	@ 0x78
 8006150:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	6831      	ldr	r1, [r6, #0]
 8006158:	061f      	lsls	r7, r3, #24
 800615a:	f851 5b04 	ldr.w	r5, [r1], #4
 800615e:	d402      	bmi.n	8006166 <_printf_i+0x186>
 8006160:	065f      	lsls	r7, r3, #25
 8006162:	bf48      	it	mi
 8006164:	b2ad      	uxthmi	r5, r5
 8006166:	6031      	str	r1, [r6, #0]
 8006168:	07d9      	lsls	r1, r3, #31
 800616a:	bf44      	itt	mi
 800616c:	f043 0320 	orrmi.w	r3, r3, #32
 8006170:	6023      	strmi	r3, [r4, #0]
 8006172:	b11d      	cbz	r5, 800617c <_printf_i+0x19c>
 8006174:	2310      	movs	r3, #16
 8006176:	e7ad      	b.n	80060d4 <_printf_i+0xf4>
 8006178:	4826      	ldr	r0, [pc, #152]	@ (8006214 <_printf_i+0x234>)
 800617a:	e7e9      	b.n	8006150 <_printf_i+0x170>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	f023 0320 	bic.w	r3, r3, #32
 8006182:	6023      	str	r3, [r4, #0]
 8006184:	e7f6      	b.n	8006174 <_printf_i+0x194>
 8006186:	4616      	mov	r6, r2
 8006188:	e7bd      	b.n	8006106 <_printf_i+0x126>
 800618a:	6833      	ldr	r3, [r6, #0]
 800618c:	6825      	ldr	r5, [r4, #0]
 800618e:	6961      	ldr	r1, [r4, #20]
 8006190:	1d18      	adds	r0, r3, #4
 8006192:	6030      	str	r0, [r6, #0]
 8006194:	062e      	lsls	r6, r5, #24
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	d501      	bpl.n	800619e <_printf_i+0x1be>
 800619a:	6019      	str	r1, [r3, #0]
 800619c:	e002      	b.n	80061a4 <_printf_i+0x1c4>
 800619e:	0668      	lsls	r0, r5, #25
 80061a0:	d5fb      	bpl.n	800619a <_printf_i+0x1ba>
 80061a2:	8019      	strh	r1, [r3, #0]
 80061a4:	2300      	movs	r3, #0
 80061a6:	6123      	str	r3, [r4, #16]
 80061a8:	4616      	mov	r6, r2
 80061aa:	e7bc      	b.n	8006126 <_printf_i+0x146>
 80061ac:	6833      	ldr	r3, [r6, #0]
 80061ae:	1d1a      	adds	r2, r3, #4
 80061b0:	6032      	str	r2, [r6, #0]
 80061b2:	681e      	ldr	r6, [r3, #0]
 80061b4:	6862      	ldr	r2, [r4, #4]
 80061b6:	2100      	movs	r1, #0
 80061b8:	4630      	mov	r0, r6
 80061ba:	f7fa f809 	bl	80001d0 <memchr>
 80061be:	b108      	cbz	r0, 80061c4 <_printf_i+0x1e4>
 80061c0:	1b80      	subs	r0, r0, r6
 80061c2:	6060      	str	r0, [r4, #4]
 80061c4:	6863      	ldr	r3, [r4, #4]
 80061c6:	6123      	str	r3, [r4, #16]
 80061c8:	2300      	movs	r3, #0
 80061ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061ce:	e7aa      	b.n	8006126 <_printf_i+0x146>
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	4632      	mov	r2, r6
 80061d4:	4649      	mov	r1, r9
 80061d6:	4640      	mov	r0, r8
 80061d8:	47d0      	blx	sl
 80061da:	3001      	adds	r0, #1
 80061dc:	d0ad      	beq.n	800613a <_printf_i+0x15a>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	079b      	lsls	r3, r3, #30
 80061e2:	d413      	bmi.n	800620c <_printf_i+0x22c>
 80061e4:	68e0      	ldr	r0, [r4, #12]
 80061e6:	9b03      	ldr	r3, [sp, #12]
 80061e8:	4298      	cmp	r0, r3
 80061ea:	bfb8      	it	lt
 80061ec:	4618      	movlt	r0, r3
 80061ee:	e7a6      	b.n	800613e <_printf_i+0x15e>
 80061f0:	2301      	movs	r3, #1
 80061f2:	4632      	mov	r2, r6
 80061f4:	4649      	mov	r1, r9
 80061f6:	4640      	mov	r0, r8
 80061f8:	47d0      	blx	sl
 80061fa:	3001      	adds	r0, #1
 80061fc:	d09d      	beq.n	800613a <_printf_i+0x15a>
 80061fe:	3501      	adds	r5, #1
 8006200:	68e3      	ldr	r3, [r4, #12]
 8006202:	9903      	ldr	r1, [sp, #12]
 8006204:	1a5b      	subs	r3, r3, r1
 8006206:	42ab      	cmp	r3, r5
 8006208:	dcf2      	bgt.n	80061f0 <_printf_i+0x210>
 800620a:	e7eb      	b.n	80061e4 <_printf_i+0x204>
 800620c:	2500      	movs	r5, #0
 800620e:	f104 0619 	add.w	r6, r4, #25
 8006212:	e7f5      	b.n	8006200 <_printf_i+0x220>
 8006214:	08009032 	.word	0x08009032
 8006218:	08009043 	.word	0x08009043

0800621c <__sflush_r>:
 800621c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006224:	0716      	lsls	r6, r2, #28
 8006226:	4605      	mov	r5, r0
 8006228:	460c      	mov	r4, r1
 800622a:	d454      	bmi.n	80062d6 <__sflush_r+0xba>
 800622c:	684b      	ldr	r3, [r1, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	dc02      	bgt.n	8006238 <__sflush_r+0x1c>
 8006232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	dd48      	ble.n	80062ca <__sflush_r+0xae>
 8006238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800623a:	2e00      	cmp	r6, #0
 800623c:	d045      	beq.n	80062ca <__sflush_r+0xae>
 800623e:	2300      	movs	r3, #0
 8006240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006244:	682f      	ldr	r7, [r5, #0]
 8006246:	6a21      	ldr	r1, [r4, #32]
 8006248:	602b      	str	r3, [r5, #0]
 800624a:	d030      	beq.n	80062ae <__sflush_r+0x92>
 800624c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800624e:	89a3      	ldrh	r3, [r4, #12]
 8006250:	0759      	lsls	r1, r3, #29
 8006252:	d505      	bpl.n	8006260 <__sflush_r+0x44>
 8006254:	6863      	ldr	r3, [r4, #4]
 8006256:	1ad2      	subs	r2, r2, r3
 8006258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800625a:	b10b      	cbz	r3, 8006260 <__sflush_r+0x44>
 800625c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800625e:	1ad2      	subs	r2, r2, r3
 8006260:	2300      	movs	r3, #0
 8006262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006264:	6a21      	ldr	r1, [r4, #32]
 8006266:	4628      	mov	r0, r5
 8006268:	47b0      	blx	r6
 800626a:	1c43      	adds	r3, r0, #1
 800626c:	89a3      	ldrh	r3, [r4, #12]
 800626e:	d106      	bne.n	800627e <__sflush_r+0x62>
 8006270:	6829      	ldr	r1, [r5, #0]
 8006272:	291d      	cmp	r1, #29
 8006274:	d82b      	bhi.n	80062ce <__sflush_r+0xb2>
 8006276:	4a2a      	ldr	r2, [pc, #168]	@ (8006320 <__sflush_r+0x104>)
 8006278:	40ca      	lsrs	r2, r1
 800627a:	07d6      	lsls	r6, r2, #31
 800627c:	d527      	bpl.n	80062ce <__sflush_r+0xb2>
 800627e:	2200      	movs	r2, #0
 8006280:	6062      	str	r2, [r4, #4]
 8006282:	04d9      	lsls	r1, r3, #19
 8006284:	6922      	ldr	r2, [r4, #16]
 8006286:	6022      	str	r2, [r4, #0]
 8006288:	d504      	bpl.n	8006294 <__sflush_r+0x78>
 800628a:	1c42      	adds	r2, r0, #1
 800628c:	d101      	bne.n	8006292 <__sflush_r+0x76>
 800628e:	682b      	ldr	r3, [r5, #0]
 8006290:	b903      	cbnz	r3, 8006294 <__sflush_r+0x78>
 8006292:	6560      	str	r0, [r4, #84]	@ 0x54
 8006294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006296:	602f      	str	r7, [r5, #0]
 8006298:	b1b9      	cbz	r1, 80062ca <__sflush_r+0xae>
 800629a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800629e:	4299      	cmp	r1, r3
 80062a0:	d002      	beq.n	80062a8 <__sflush_r+0x8c>
 80062a2:	4628      	mov	r0, r5
 80062a4:	f001 f9a0 	bl	80075e8 <_free_r>
 80062a8:	2300      	movs	r3, #0
 80062aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80062ac:	e00d      	b.n	80062ca <__sflush_r+0xae>
 80062ae:	2301      	movs	r3, #1
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b0      	blx	r6
 80062b4:	4602      	mov	r2, r0
 80062b6:	1c50      	adds	r0, r2, #1
 80062b8:	d1c9      	bne.n	800624e <__sflush_r+0x32>
 80062ba:	682b      	ldr	r3, [r5, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0c6      	beq.n	800624e <__sflush_r+0x32>
 80062c0:	2b1d      	cmp	r3, #29
 80062c2:	d001      	beq.n	80062c8 <__sflush_r+0xac>
 80062c4:	2b16      	cmp	r3, #22
 80062c6:	d11e      	bne.n	8006306 <__sflush_r+0xea>
 80062c8:	602f      	str	r7, [r5, #0]
 80062ca:	2000      	movs	r0, #0
 80062cc:	e022      	b.n	8006314 <__sflush_r+0xf8>
 80062ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062d2:	b21b      	sxth	r3, r3
 80062d4:	e01b      	b.n	800630e <__sflush_r+0xf2>
 80062d6:	690f      	ldr	r7, [r1, #16]
 80062d8:	2f00      	cmp	r7, #0
 80062da:	d0f6      	beq.n	80062ca <__sflush_r+0xae>
 80062dc:	0793      	lsls	r3, r2, #30
 80062de:	680e      	ldr	r6, [r1, #0]
 80062e0:	bf08      	it	eq
 80062e2:	694b      	ldreq	r3, [r1, #20]
 80062e4:	600f      	str	r7, [r1, #0]
 80062e6:	bf18      	it	ne
 80062e8:	2300      	movne	r3, #0
 80062ea:	eba6 0807 	sub.w	r8, r6, r7
 80062ee:	608b      	str	r3, [r1, #8]
 80062f0:	f1b8 0f00 	cmp.w	r8, #0
 80062f4:	dde9      	ble.n	80062ca <__sflush_r+0xae>
 80062f6:	6a21      	ldr	r1, [r4, #32]
 80062f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80062fa:	4643      	mov	r3, r8
 80062fc:	463a      	mov	r2, r7
 80062fe:	4628      	mov	r0, r5
 8006300:	47b0      	blx	r6
 8006302:	2800      	cmp	r0, #0
 8006304:	dc08      	bgt.n	8006318 <__sflush_r+0xfc>
 8006306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800630a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800630e:	81a3      	strh	r3, [r4, #12]
 8006310:	f04f 30ff 	mov.w	r0, #4294967295
 8006314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006318:	4407      	add	r7, r0
 800631a:	eba8 0800 	sub.w	r8, r8, r0
 800631e:	e7e7      	b.n	80062f0 <__sflush_r+0xd4>
 8006320:	20400001 	.word	0x20400001

08006324 <_fflush_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	690b      	ldr	r3, [r1, #16]
 8006328:	4605      	mov	r5, r0
 800632a:	460c      	mov	r4, r1
 800632c:	b913      	cbnz	r3, 8006334 <_fflush_r+0x10>
 800632e:	2500      	movs	r5, #0
 8006330:	4628      	mov	r0, r5
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	b118      	cbz	r0, 800633e <_fflush_r+0x1a>
 8006336:	6a03      	ldr	r3, [r0, #32]
 8006338:	b90b      	cbnz	r3, 800633e <_fflush_r+0x1a>
 800633a:	f000 f8bb 	bl	80064b4 <__sinit>
 800633e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f3      	beq.n	800632e <_fflush_r+0xa>
 8006346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006348:	07d0      	lsls	r0, r2, #31
 800634a:	d404      	bmi.n	8006356 <_fflush_r+0x32>
 800634c:	0599      	lsls	r1, r3, #22
 800634e:	d402      	bmi.n	8006356 <_fflush_r+0x32>
 8006350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006352:	f000 faee 	bl	8006932 <__retarget_lock_acquire_recursive>
 8006356:	4628      	mov	r0, r5
 8006358:	4621      	mov	r1, r4
 800635a:	f7ff ff5f 	bl	800621c <__sflush_r>
 800635e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006360:	07da      	lsls	r2, r3, #31
 8006362:	4605      	mov	r5, r0
 8006364:	d4e4      	bmi.n	8006330 <_fflush_r+0xc>
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	059b      	lsls	r3, r3, #22
 800636a:	d4e1      	bmi.n	8006330 <_fflush_r+0xc>
 800636c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800636e:	f000 fae1 	bl	8006934 <__retarget_lock_release_recursive>
 8006372:	e7dd      	b.n	8006330 <_fflush_r+0xc>

08006374 <fflush>:
 8006374:	4601      	mov	r1, r0
 8006376:	b920      	cbnz	r0, 8006382 <fflush+0xe>
 8006378:	4a04      	ldr	r2, [pc, #16]	@ (800638c <fflush+0x18>)
 800637a:	4905      	ldr	r1, [pc, #20]	@ (8006390 <fflush+0x1c>)
 800637c:	4805      	ldr	r0, [pc, #20]	@ (8006394 <fflush+0x20>)
 800637e:	f000 b8b1 	b.w	80064e4 <_fwalk_sglue>
 8006382:	4b05      	ldr	r3, [pc, #20]	@ (8006398 <fflush+0x24>)
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	f7ff bfcd 	b.w	8006324 <_fflush_r>
 800638a:	bf00      	nop
 800638c:	20000010 	.word	0x20000010
 8006390:	08006325 	.word	0x08006325
 8006394:	20000020 	.word	0x20000020
 8006398:	2000001c 	.word	0x2000001c

0800639c <std>:
 800639c:	2300      	movs	r3, #0
 800639e:	b510      	push	{r4, lr}
 80063a0:	4604      	mov	r4, r0
 80063a2:	e9c0 3300 	strd	r3, r3, [r0]
 80063a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063aa:	6083      	str	r3, [r0, #8]
 80063ac:	8181      	strh	r1, [r0, #12]
 80063ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80063b0:	81c2      	strh	r2, [r0, #14]
 80063b2:	6183      	str	r3, [r0, #24]
 80063b4:	4619      	mov	r1, r3
 80063b6:	2208      	movs	r2, #8
 80063b8:	305c      	adds	r0, #92	@ 0x5c
 80063ba:	f000 fa3d 	bl	8006838 <memset>
 80063be:	4b0d      	ldr	r3, [pc, #52]	@ (80063f4 <std+0x58>)
 80063c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80063c2:	4b0d      	ldr	r3, [pc, #52]	@ (80063f8 <std+0x5c>)
 80063c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063c6:	4b0d      	ldr	r3, [pc, #52]	@ (80063fc <std+0x60>)
 80063c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006400 <std+0x64>)
 80063cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80063ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <std+0x68>)
 80063d0:	6224      	str	r4, [r4, #32]
 80063d2:	429c      	cmp	r4, r3
 80063d4:	d006      	beq.n	80063e4 <std+0x48>
 80063d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063da:	4294      	cmp	r4, r2
 80063dc:	d002      	beq.n	80063e4 <std+0x48>
 80063de:	33d0      	adds	r3, #208	@ 0xd0
 80063e0:	429c      	cmp	r4, r3
 80063e2:	d105      	bne.n	80063f0 <std+0x54>
 80063e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063ec:	f000 baa0 	b.w	8006930 <__retarget_lock_init_recursive>
 80063f0:	bd10      	pop	{r4, pc}
 80063f2:	bf00      	nop
 80063f4:	08006611 	.word	0x08006611
 80063f8:	08006633 	.word	0x08006633
 80063fc:	0800666b 	.word	0x0800666b
 8006400:	0800668f 	.word	0x0800668f
 8006404:	20000594 	.word	0x20000594

08006408 <stdio_exit_handler>:
 8006408:	4a02      	ldr	r2, [pc, #8]	@ (8006414 <stdio_exit_handler+0xc>)
 800640a:	4903      	ldr	r1, [pc, #12]	@ (8006418 <stdio_exit_handler+0x10>)
 800640c:	4803      	ldr	r0, [pc, #12]	@ (800641c <stdio_exit_handler+0x14>)
 800640e:	f000 b869 	b.w	80064e4 <_fwalk_sglue>
 8006412:	bf00      	nop
 8006414:	20000010 	.word	0x20000010
 8006418:	08006325 	.word	0x08006325
 800641c:	20000020 	.word	0x20000020

08006420 <cleanup_stdio>:
 8006420:	6841      	ldr	r1, [r0, #4]
 8006422:	4b0c      	ldr	r3, [pc, #48]	@ (8006454 <cleanup_stdio+0x34>)
 8006424:	4299      	cmp	r1, r3
 8006426:	b510      	push	{r4, lr}
 8006428:	4604      	mov	r4, r0
 800642a:	d001      	beq.n	8006430 <cleanup_stdio+0x10>
 800642c:	f7ff ff7a 	bl	8006324 <_fflush_r>
 8006430:	68a1      	ldr	r1, [r4, #8]
 8006432:	4b09      	ldr	r3, [pc, #36]	@ (8006458 <cleanup_stdio+0x38>)
 8006434:	4299      	cmp	r1, r3
 8006436:	d002      	beq.n	800643e <cleanup_stdio+0x1e>
 8006438:	4620      	mov	r0, r4
 800643a:	f7ff ff73 	bl	8006324 <_fflush_r>
 800643e:	68e1      	ldr	r1, [r4, #12]
 8006440:	4b06      	ldr	r3, [pc, #24]	@ (800645c <cleanup_stdio+0x3c>)
 8006442:	4299      	cmp	r1, r3
 8006444:	d004      	beq.n	8006450 <cleanup_stdio+0x30>
 8006446:	4620      	mov	r0, r4
 8006448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800644c:	f7ff bf6a 	b.w	8006324 <_fflush_r>
 8006450:	bd10      	pop	{r4, pc}
 8006452:	bf00      	nop
 8006454:	20000594 	.word	0x20000594
 8006458:	200005fc 	.word	0x200005fc
 800645c:	20000664 	.word	0x20000664

08006460 <global_stdio_init.part.0>:
 8006460:	b510      	push	{r4, lr}
 8006462:	4b0b      	ldr	r3, [pc, #44]	@ (8006490 <global_stdio_init.part.0+0x30>)
 8006464:	4c0b      	ldr	r4, [pc, #44]	@ (8006494 <global_stdio_init.part.0+0x34>)
 8006466:	4a0c      	ldr	r2, [pc, #48]	@ (8006498 <global_stdio_init.part.0+0x38>)
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	4620      	mov	r0, r4
 800646c:	2200      	movs	r2, #0
 800646e:	2104      	movs	r1, #4
 8006470:	f7ff ff94 	bl	800639c <std>
 8006474:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006478:	2201      	movs	r2, #1
 800647a:	2109      	movs	r1, #9
 800647c:	f7ff ff8e 	bl	800639c <std>
 8006480:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006484:	2202      	movs	r2, #2
 8006486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800648a:	2112      	movs	r1, #18
 800648c:	f7ff bf86 	b.w	800639c <std>
 8006490:	200006cc 	.word	0x200006cc
 8006494:	20000594 	.word	0x20000594
 8006498:	08006409 	.word	0x08006409

0800649c <__sfp_lock_acquire>:
 800649c:	4801      	ldr	r0, [pc, #4]	@ (80064a4 <__sfp_lock_acquire+0x8>)
 800649e:	f000 ba48 	b.w	8006932 <__retarget_lock_acquire_recursive>
 80064a2:	bf00      	nop
 80064a4:	200006d5 	.word	0x200006d5

080064a8 <__sfp_lock_release>:
 80064a8:	4801      	ldr	r0, [pc, #4]	@ (80064b0 <__sfp_lock_release+0x8>)
 80064aa:	f000 ba43 	b.w	8006934 <__retarget_lock_release_recursive>
 80064ae:	bf00      	nop
 80064b0:	200006d5 	.word	0x200006d5

080064b4 <__sinit>:
 80064b4:	b510      	push	{r4, lr}
 80064b6:	4604      	mov	r4, r0
 80064b8:	f7ff fff0 	bl	800649c <__sfp_lock_acquire>
 80064bc:	6a23      	ldr	r3, [r4, #32]
 80064be:	b11b      	cbz	r3, 80064c8 <__sinit+0x14>
 80064c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c4:	f7ff bff0 	b.w	80064a8 <__sfp_lock_release>
 80064c8:	4b04      	ldr	r3, [pc, #16]	@ (80064dc <__sinit+0x28>)
 80064ca:	6223      	str	r3, [r4, #32]
 80064cc:	4b04      	ldr	r3, [pc, #16]	@ (80064e0 <__sinit+0x2c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1f5      	bne.n	80064c0 <__sinit+0xc>
 80064d4:	f7ff ffc4 	bl	8006460 <global_stdio_init.part.0>
 80064d8:	e7f2      	b.n	80064c0 <__sinit+0xc>
 80064da:	bf00      	nop
 80064dc:	08006421 	.word	0x08006421
 80064e0:	200006cc 	.word	0x200006cc

080064e4 <_fwalk_sglue>:
 80064e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e8:	4607      	mov	r7, r0
 80064ea:	4688      	mov	r8, r1
 80064ec:	4614      	mov	r4, r2
 80064ee:	2600      	movs	r6, #0
 80064f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064f4:	f1b9 0901 	subs.w	r9, r9, #1
 80064f8:	d505      	bpl.n	8006506 <_fwalk_sglue+0x22>
 80064fa:	6824      	ldr	r4, [r4, #0]
 80064fc:	2c00      	cmp	r4, #0
 80064fe:	d1f7      	bne.n	80064f0 <_fwalk_sglue+0xc>
 8006500:	4630      	mov	r0, r6
 8006502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006506:	89ab      	ldrh	r3, [r5, #12]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d907      	bls.n	800651c <_fwalk_sglue+0x38>
 800650c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006510:	3301      	adds	r3, #1
 8006512:	d003      	beq.n	800651c <_fwalk_sglue+0x38>
 8006514:	4629      	mov	r1, r5
 8006516:	4638      	mov	r0, r7
 8006518:	47c0      	blx	r8
 800651a:	4306      	orrs	r6, r0
 800651c:	3568      	adds	r5, #104	@ 0x68
 800651e:	e7e9      	b.n	80064f4 <_fwalk_sglue+0x10>

08006520 <iprintf>:
 8006520:	b40f      	push	{r0, r1, r2, r3}
 8006522:	b507      	push	{r0, r1, r2, lr}
 8006524:	4906      	ldr	r1, [pc, #24]	@ (8006540 <iprintf+0x20>)
 8006526:	ab04      	add	r3, sp, #16
 8006528:	6808      	ldr	r0, [r1, #0]
 800652a:	f853 2b04 	ldr.w	r2, [r3], #4
 800652e:	6881      	ldr	r1, [r0, #8]
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	f001 fe55 	bl	80081e0 <_vfiprintf_r>
 8006536:	b003      	add	sp, #12
 8006538:	f85d eb04 	ldr.w	lr, [sp], #4
 800653c:	b004      	add	sp, #16
 800653e:	4770      	bx	lr
 8006540:	2000001c 	.word	0x2000001c

08006544 <putchar>:
 8006544:	4b02      	ldr	r3, [pc, #8]	@ (8006550 <putchar+0xc>)
 8006546:	4601      	mov	r1, r0
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	6882      	ldr	r2, [r0, #8]
 800654c:	f001 bfc2 	b.w	80084d4 <_putc_r>
 8006550:	2000001c 	.word	0x2000001c

08006554 <_puts_r>:
 8006554:	6a03      	ldr	r3, [r0, #32]
 8006556:	b570      	push	{r4, r5, r6, lr}
 8006558:	6884      	ldr	r4, [r0, #8]
 800655a:	4605      	mov	r5, r0
 800655c:	460e      	mov	r6, r1
 800655e:	b90b      	cbnz	r3, 8006564 <_puts_r+0x10>
 8006560:	f7ff ffa8 	bl	80064b4 <__sinit>
 8006564:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006566:	07db      	lsls	r3, r3, #31
 8006568:	d405      	bmi.n	8006576 <_puts_r+0x22>
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	0598      	lsls	r0, r3, #22
 800656e:	d402      	bmi.n	8006576 <_puts_r+0x22>
 8006570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006572:	f000 f9de 	bl	8006932 <__retarget_lock_acquire_recursive>
 8006576:	89a3      	ldrh	r3, [r4, #12]
 8006578:	0719      	lsls	r1, r3, #28
 800657a:	d502      	bpl.n	8006582 <_puts_r+0x2e>
 800657c:	6923      	ldr	r3, [r4, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d135      	bne.n	80065ee <_puts_r+0x9a>
 8006582:	4621      	mov	r1, r4
 8006584:	4628      	mov	r0, r5
 8006586:	f000 f901 	bl	800678c <__swsetup_r>
 800658a:	b380      	cbz	r0, 80065ee <_puts_r+0x9a>
 800658c:	f04f 35ff 	mov.w	r5, #4294967295
 8006590:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006592:	07da      	lsls	r2, r3, #31
 8006594:	d405      	bmi.n	80065a2 <_puts_r+0x4e>
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	059b      	lsls	r3, r3, #22
 800659a:	d402      	bmi.n	80065a2 <_puts_r+0x4e>
 800659c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800659e:	f000 f9c9 	bl	8006934 <__retarget_lock_release_recursive>
 80065a2:	4628      	mov	r0, r5
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	da04      	bge.n	80065b4 <_puts_r+0x60>
 80065aa:	69a2      	ldr	r2, [r4, #24]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	dc17      	bgt.n	80065e0 <_puts_r+0x8c>
 80065b0:	290a      	cmp	r1, #10
 80065b2:	d015      	beq.n	80065e0 <_puts_r+0x8c>
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	6022      	str	r2, [r4, #0]
 80065ba:	7019      	strb	r1, [r3, #0]
 80065bc:	68a3      	ldr	r3, [r4, #8]
 80065be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065c2:	3b01      	subs	r3, #1
 80065c4:	60a3      	str	r3, [r4, #8]
 80065c6:	2900      	cmp	r1, #0
 80065c8:	d1ed      	bne.n	80065a6 <_puts_r+0x52>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	da11      	bge.n	80065f2 <_puts_r+0x9e>
 80065ce:	4622      	mov	r2, r4
 80065d0:	210a      	movs	r1, #10
 80065d2:	4628      	mov	r0, r5
 80065d4:	f000 f89c 	bl	8006710 <__swbuf_r>
 80065d8:	3001      	adds	r0, #1
 80065da:	d0d7      	beq.n	800658c <_puts_r+0x38>
 80065dc:	250a      	movs	r5, #10
 80065de:	e7d7      	b.n	8006590 <_puts_r+0x3c>
 80065e0:	4622      	mov	r2, r4
 80065e2:	4628      	mov	r0, r5
 80065e4:	f000 f894 	bl	8006710 <__swbuf_r>
 80065e8:	3001      	adds	r0, #1
 80065ea:	d1e7      	bne.n	80065bc <_puts_r+0x68>
 80065ec:	e7ce      	b.n	800658c <_puts_r+0x38>
 80065ee:	3e01      	subs	r6, #1
 80065f0:	e7e4      	b.n	80065bc <_puts_r+0x68>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	6022      	str	r2, [r4, #0]
 80065f8:	220a      	movs	r2, #10
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	e7ee      	b.n	80065dc <_puts_r+0x88>
	...

08006600 <puts>:
 8006600:	4b02      	ldr	r3, [pc, #8]	@ (800660c <puts+0xc>)
 8006602:	4601      	mov	r1, r0
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	f7ff bfa5 	b.w	8006554 <_puts_r>
 800660a:	bf00      	nop
 800660c:	2000001c 	.word	0x2000001c

08006610 <__sread>:
 8006610:	b510      	push	{r4, lr}
 8006612:	460c      	mov	r4, r1
 8006614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006618:	f000 f93c 	bl	8006894 <_read_r>
 800661c:	2800      	cmp	r0, #0
 800661e:	bfab      	itete	ge
 8006620:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006622:	89a3      	ldrhlt	r3, [r4, #12]
 8006624:	181b      	addge	r3, r3, r0
 8006626:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800662a:	bfac      	ite	ge
 800662c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800662e:	81a3      	strhlt	r3, [r4, #12]
 8006630:	bd10      	pop	{r4, pc}

08006632 <__swrite>:
 8006632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006636:	461f      	mov	r7, r3
 8006638:	898b      	ldrh	r3, [r1, #12]
 800663a:	05db      	lsls	r3, r3, #23
 800663c:	4605      	mov	r5, r0
 800663e:	460c      	mov	r4, r1
 8006640:	4616      	mov	r6, r2
 8006642:	d505      	bpl.n	8006650 <__swrite+0x1e>
 8006644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006648:	2302      	movs	r3, #2
 800664a:	2200      	movs	r2, #0
 800664c:	f000 f910 	bl	8006870 <_lseek_r>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006656:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800665a:	81a3      	strh	r3, [r4, #12]
 800665c:	4632      	mov	r2, r6
 800665e:	463b      	mov	r3, r7
 8006660:	4628      	mov	r0, r5
 8006662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006666:	f000 b927 	b.w	80068b8 <_write_r>

0800666a <__sseek>:
 800666a:	b510      	push	{r4, lr}
 800666c:	460c      	mov	r4, r1
 800666e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006672:	f000 f8fd 	bl	8006870 <_lseek_r>
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	bf15      	itete	ne
 800667c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800667e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006682:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006686:	81a3      	strheq	r3, [r4, #12]
 8006688:	bf18      	it	ne
 800668a:	81a3      	strhne	r3, [r4, #12]
 800668c:	bd10      	pop	{r4, pc}

0800668e <__sclose>:
 800668e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006692:	f000 b8dd 	b.w	8006850 <_close_r>

08006696 <_vsniprintf_r>:
 8006696:	b530      	push	{r4, r5, lr}
 8006698:	4614      	mov	r4, r2
 800669a:	2c00      	cmp	r4, #0
 800669c:	b09b      	sub	sp, #108	@ 0x6c
 800669e:	4605      	mov	r5, r0
 80066a0:	461a      	mov	r2, r3
 80066a2:	da05      	bge.n	80066b0 <_vsniprintf_r+0x1a>
 80066a4:	238b      	movs	r3, #139	@ 0x8b
 80066a6:	6003      	str	r3, [r0, #0]
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	b01b      	add	sp, #108	@ 0x6c
 80066ae:	bd30      	pop	{r4, r5, pc}
 80066b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80066b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80066be:	bf14      	ite	ne
 80066c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80066c4:	4623      	moveq	r3, r4
 80066c6:	9302      	str	r3, [sp, #8]
 80066c8:	9305      	str	r3, [sp, #20]
 80066ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80066ce:	9100      	str	r1, [sp, #0]
 80066d0:	9104      	str	r1, [sp, #16]
 80066d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80066d6:	4669      	mov	r1, sp
 80066d8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80066da:	f001 fc5b 	bl	8007f94 <_svfiprintf_r>
 80066de:	1c43      	adds	r3, r0, #1
 80066e0:	bfbc      	itt	lt
 80066e2:	238b      	movlt	r3, #139	@ 0x8b
 80066e4:	602b      	strlt	r3, [r5, #0]
 80066e6:	2c00      	cmp	r4, #0
 80066e8:	d0e0      	beq.n	80066ac <_vsniprintf_r+0x16>
 80066ea:	9b00      	ldr	r3, [sp, #0]
 80066ec:	2200      	movs	r2, #0
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	e7dc      	b.n	80066ac <_vsniprintf_r+0x16>
	...

080066f4 <vsniprintf>:
 80066f4:	b507      	push	{r0, r1, r2, lr}
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	4613      	mov	r3, r2
 80066fa:	460a      	mov	r2, r1
 80066fc:	4601      	mov	r1, r0
 80066fe:	4803      	ldr	r0, [pc, #12]	@ (800670c <vsniprintf+0x18>)
 8006700:	6800      	ldr	r0, [r0, #0]
 8006702:	f7ff ffc8 	bl	8006696 <_vsniprintf_r>
 8006706:	b003      	add	sp, #12
 8006708:	f85d fb04 	ldr.w	pc, [sp], #4
 800670c:	2000001c 	.word	0x2000001c

08006710 <__swbuf_r>:
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006712:	460e      	mov	r6, r1
 8006714:	4614      	mov	r4, r2
 8006716:	4605      	mov	r5, r0
 8006718:	b118      	cbz	r0, 8006722 <__swbuf_r+0x12>
 800671a:	6a03      	ldr	r3, [r0, #32]
 800671c:	b90b      	cbnz	r3, 8006722 <__swbuf_r+0x12>
 800671e:	f7ff fec9 	bl	80064b4 <__sinit>
 8006722:	69a3      	ldr	r3, [r4, #24]
 8006724:	60a3      	str	r3, [r4, #8]
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	071a      	lsls	r2, r3, #28
 800672a:	d501      	bpl.n	8006730 <__swbuf_r+0x20>
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	b943      	cbnz	r3, 8006742 <__swbuf_r+0x32>
 8006730:	4621      	mov	r1, r4
 8006732:	4628      	mov	r0, r5
 8006734:	f000 f82a 	bl	800678c <__swsetup_r>
 8006738:	b118      	cbz	r0, 8006742 <__swbuf_r+0x32>
 800673a:	f04f 37ff 	mov.w	r7, #4294967295
 800673e:	4638      	mov	r0, r7
 8006740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	6922      	ldr	r2, [r4, #16]
 8006746:	1a98      	subs	r0, r3, r2
 8006748:	6963      	ldr	r3, [r4, #20]
 800674a:	b2f6      	uxtb	r6, r6
 800674c:	4283      	cmp	r3, r0
 800674e:	4637      	mov	r7, r6
 8006750:	dc05      	bgt.n	800675e <__swbuf_r+0x4e>
 8006752:	4621      	mov	r1, r4
 8006754:	4628      	mov	r0, r5
 8006756:	f7ff fde5 	bl	8006324 <_fflush_r>
 800675a:	2800      	cmp	r0, #0
 800675c:	d1ed      	bne.n	800673a <__swbuf_r+0x2a>
 800675e:	68a3      	ldr	r3, [r4, #8]
 8006760:	3b01      	subs	r3, #1
 8006762:	60a3      	str	r3, [r4, #8]
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	6022      	str	r2, [r4, #0]
 800676a:	701e      	strb	r6, [r3, #0]
 800676c:	6962      	ldr	r2, [r4, #20]
 800676e:	1c43      	adds	r3, r0, #1
 8006770:	429a      	cmp	r2, r3
 8006772:	d004      	beq.n	800677e <__swbuf_r+0x6e>
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	07db      	lsls	r3, r3, #31
 8006778:	d5e1      	bpl.n	800673e <__swbuf_r+0x2e>
 800677a:	2e0a      	cmp	r6, #10
 800677c:	d1df      	bne.n	800673e <__swbuf_r+0x2e>
 800677e:	4621      	mov	r1, r4
 8006780:	4628      	mov	r0, r5
 8006782:	f7ff fdcf 	bl	8006324 <_fflush_r>
 8006786:	2800      	cmp	r0, #0
 8006788:	d0d9      	beq.n	800673e <__swbuf_r+0x2e>
 800678a:	e7d6      	b.n	800673a <__swbuf_r+0x2a>

0800678c <__swsetup_r>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4b29      	ldr	r3, [pc, #164]	@ (8006834 <__swsetup_r+0xa8>)
 8006790:	4605      	mov	r5, r0
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	460c      	mov	r4, r1
 8006796:	b118      	cbz	r0, 80067a0 <__swsetup_r+0x14>
 8006798:	6a03      	ldr	r3, [r0, #32]
 800679a:	b90b      	cbnz	r3, 80067a0 <__swsetup_r+0x14>
 800679c:	f7ff fe8a 	bl	80064b4 <__sinit>
 80067a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a4:	0719      	lsls	r1, r3, #28
 80067a6:	d422      	bmi.n	80067ee <__swsetup_r+0x62>
 80067a8:	06da      	lsls	r2, r3, #27
 80067aa:	d407      	bmi.n	80067bc <__swsetup_r+0x30>
 80067ac:	2209      	movs	r2, #9
 80067ae:	602a      	str	r2, [r5, #0]
 80067b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ba:	e033      	b.n	8006824 <__swsetup_r+0x98>
 80067bc:	0758      	lsls	r0, r3, #29
 80067be:	d512      	bpl.n	80067e6 <__swsetup_r+0x5a>
 80067c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067c2:	b141      	cbz	r1, 80067d6 <__swsetup_r+0x4a>
 80067c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067c8:	4299      	cmp	r1, r3
 80067ca:	d002      	beq.n	80067d2 <__swsetup_r+0x46>
 80067cc:	4628      	mov	r0, r5
 80067ce:	f000 ff0b 	bl	80075e8 <_free_r>
 80067d2:	2300      	movs	r3, #0
 80067d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067dc:	81a3      	strh	r3, [r4, #12]
 80067de:	2300      	movs	r3, #0
 80067e0:	6063      	str	r3, [r4, #4]
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	f043 0308 	orr.w	r3, r3, #8
 80067ec:	81a3      	strh	r3, [r4, #12]
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	b94b      	cbnz	r3, 8006806 <__swsetup_r+0x7a>
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067fc:	d003      	beq.n	8006806 <__swsetup_r+0x7a>
 80067fe:	4621      	mov	r1, r4
 8006800:	4628      	mov	r0, r5
 8006802:	f001 fe2b 	bl	800845c <__smakebuf_r>
 8006806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800680a:	f013 0201 	ands.w	r2, r3, #1
 800680e:	d00a      	beq.n	8006826 <__swsetup_r+0x9a>
 8006810:	2200      	movs	r2, #0
 8006812:	60a2      	str	r2, [r4, #8]
 8006814:	6962      	ldr	r2, [r4, #20]
 8006816:	4252      	negs	r2, r2
 8006818:	61a2      	str	r2, [r4, #24]
 800681a:	6922      	ldr	r2, [r4, #16]
 800681c:	b942      	cbnz	r2, 8006830 <__swsetup_r+0xa4>
 800681e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006822:	d1c5      	bne.n	80067b0 <__swsetup_r+0x24>
 8006824:	bd38      	pop	{r3, r4, r5, pc}
 8006826:	0799      	lsls	r1, r3, #30
 8006828:	bf58      	it	pl
 800682a:	6962      	ldrpl	r2, [r4, #20]
 800682c:	60a2      	str	r2, [r4, #8]
 800682e:	e7f4      	b.n	800681a <__swsetup_r+0x8e>
 8006830:	2000      	movs	r0, #0
 8006832:	e7f7      	b.n	8006824 <__swsetup_r+0x98>
 8006834:	2000001c 	.word	0x2000001c

08006838 <memset>:
 8006838:	4402      	add	r2, r0
 800683a:	4603      	mov	r3, r0
 800683c:	4293      	cmp	r3, r2
 800683e:	d100      	bne.n	8006842 <memset+0xa>
 8006840:	4770      	bx	lr
 8006842:	f803 1b01 	strb.w	r1, [r3], #1
 8006846:	e7f9      	b.n	800683c <memset+0x4>

08006848 <_localeconv_r>:
 8006848:	4800      	ldr	r0, [pc, #0]	@ (800684c <_localeconv_r+0x4>)
 800684a:	4770      	bx	lr
 800684c:	2000015c 	.word	0x2000015c

08006850 <_close_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4d06      	ldr	r5, [pc, #24]	@ (800686c <_close_r+0x1c>)
 8006854:	2300      	movs	r3, #0
 8006856:	4604      	mov	r4, r0
 8006858:	4608      	mov	r0, r1
 800685a:	602b      	str	r3, [r5, #0]
 800685c:	f7fb fc42 	bl	80020e4 <_close>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d102      	bne.n	800686a <_close_r+0x1a>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	b103      	cbz	r3, 800686a <_close_r+0x1a>
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	200006d0 	.word	0x200006d0

08006870 <_lseek_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4d07      	ldr	r5, [pc, #28]	@ (8006890 <_lseek_r+0x20>)
 8006874:	4604      	mov	r4, r0
 8006876:	4608      	mov	r0, r1
 8006878:	4611      	mov	r1, r2
 800687a:	2200      	movs	r2, #0
 800687c:	602a      	str	r2, [r5, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	f7fb fc57 	bl	8002132 <_lseek>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d102      	bne.n	800688e <_lseek_r+0x1e>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	b103      	cbz	r3, 800688e <_lseek_r+0x1e>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	200006d0 	.word	0x200006d0

08006894 <_read_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	4d07      	ldr	r5, [pc, #28]	@ (80068b4 <_read_r+0x20>)
 8006898:	4604      	mov	r4, r0
 800689a:	4608      	mov	r0, r1
 800689c:	4611      	mov	r1, r2
 800689e:	2200      	movs	r2, #0
 80068a0:	602a      	str	r2, [r5, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	f7fb fc01 	bl	80020aa <_read>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d102      	bne.n	80068b2 <_read_r+0x1e>
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <_read_r+0x1e>
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	200006d0 	.word	0x200006d0

080068b8 <_write_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4d07      	ldr	r5, [pc, #28]	@ (80068d8 <_write_r+0x20>)
 80068bc:	4604      	mov	r4, r0
 80068be:	4608      	mov	r0, r1
 80068c0:	4611      	mov	r1, r2
 80068c2:	2200      	movs	r2, #0
 80068c4:	602a      	str	r2, [r5, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	f7fb fa08 	bl	8001cdc <_write>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_write_r+0x1e>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_write_r+0x1e>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	200006d0 	.word	0x200006d0

080068dc <__errno>:
 80068dc:	4b01      	ldr	r3, [pc, #4]	@ (80068e4 <__errno+0x8>)
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	2000001c 	.word	0x2000001c

080068e8 <__libc_init_array>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006920 <__libc_init_array+0x38>)
 80068ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006924 <__libc_init_array+0x3c>)
 80068ee:	1b64      	subs	r4, r4, r5
 80068f0:	10a4      	asrs	r4, r4, #2
 80068f2:	2600      	movs	r6, #0
 80068f4:	42a6      	cmp	r6, r4
 80068f6:	d109      	bne.n	800690c <__libc_init_array+0x24>
 80068f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006928 <__libc_init_array+0x40>)
 80068fa:	4c0c      	ldr	r4, [pc, #48]	@ (800692c <__libc_init_array+0x44>)
 80068fc:	f001 ff5e 	bl	80087bc <_init>
 8006900:	1b64      	subs	r4, r4, r5
 8006902:	10a4      	asrs	r4, r4, #2
 8006904:	2600      	movs	r6, #0
 8006906:	42a6      	cmp	r6, r4
 8006908:	d105      	bne.n	8006916 <__libc_init_array+0x2e>
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006910:	4798      	blx	r3
 8006912:	3601      	adds	r6, #1
 8006914:	e7ee      	b.n	80068f4 <__libc_init_array+0xc>
 8006916:	f855 3b04 	ldr.w	r3, [r5], #4
 800691a:	4798      	blx	r3
 800691c:	3601      	adds	r6, #1
 800691e:	e7f2      	b.n	8006906 <__libc_init_array+0x1e>
 8006920:	0800939c 	.word	0x0800939c
 8006924:	0800939c 	.word	0x0800939c
 8006928:	0800939c 	.word	0x0800939c
 800692c:	080093a0 	.word	0x080093a0

08006930 <__retarget_lock_init_recursive>:
 8006930:	4770      	bx	lr

08006932 <__retarget_lock_acquire_recursive>:
 8006932:	4770      	bx	lr

08006934 <__retarget_lock_release_recursive>:
 8006934:	4770      	bx	lr

08006936 <quorem>:
 8006936:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693a:	6903      	ldr	r3, [r0, #16]
 800693c:	690c      	ldr	r4, [r1, #16]
 800693e:	42a3      	cmp	r3, r4
 8006940:	4607      	mov	r7, r0
 8006942:	db7e      	blt.n	8006a42 <quorem+0x10c>
 8006944:	3c01      	subs	r4, #1
 8006946:	f101 0814 	add.w	r8, r1, #20
 800694a:	00a3      	lsls	r3, r4, #2
 800694c:	f100 0514 	add.w	r5, r0, #20
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800695c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006960:	3301      	adds	r3, #1
 8006962:	429a      	cmp	r2, r3
 8006964:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006968:	fbb2 f6f3 	udiv	r6, r2, r3
 800696c:	d32e      	bcc.n	80069cc <quorem+0x96>
 800696e:	f04f 0a00 	mov.w	sl, #0
 8006972:	46c4      	mov	ip, r8
 8006974:	46ae      	mov	lr, r5
 8006976:	46d3      	mov	fp, sl
 8006978:	f85c 3b04 	ldr.w	r3, [ip], #4
 800697c:	b298      	uxth	r0, r3
 800697e:	fb06 a000 	mla	r0, r6, r0, sl
 8006982:	0c02      	lsrs	r2, r0, #16
 8006984:	0c1b      	lsrs	r3, r3, #16
 8006986:	fb06 2303 	mla	r3, r6, r3, r2
 800698a:	f8de 2000 	ldr.w	r2, [lr]
 800698e:	b280      	uxth	r0, r0
 8006990:	b292      	uxth	r2, r2
 8006992:	1a12      	subs	r2, r2, r0
 8006994:	445a      	add	r2, fp
 8006996:	f8de 0000 	ldr.w	r0, [lr]
 800699a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800699e:	b29b      	uxth	r3, r3
 80069a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80069a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80069a8:	b292      	uxth	r2, r2
 80069aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80069ae:	45e1      	cmp	r9, ip
 80069b0:	f84e 2b04 	str.w	r2, [lr], #4
 80069b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80069b8:	d2de      	bcs.n	8006978 <quorem+0x42>
 80069ba:	9b00      	ldr	r3, [sp, #0]
 80069bc:	58eb      	ldr	r3, [r5, r3]
 80069be:	b92b      	cbnz	r3, 80069cc <quorem+0x96>
 80069c0:	9b01      	ldr	r3, [sp, #4]
 80069c2:	3b04      	subs	r3, #4
 80069c4:	429d      	cmp	r5, r3
 80069c6:	461a      	mov	r2, r3
 80069c8:	d32f      	bcc.n	8006a2a <quorem+0xf4>
 80069ca:	613c      	str	r4, [r7, #16]
 80069cc:	4638      	mov	r0, r7
 80069ce:	f001 f97d 	bl	8007ccc <__mcmp>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	db25      	blt.n	8006a22 <quorem+0xec>
 80069d6:	4629      	mov	r1, r5
 80069d8:	2000      	movs	r0, #0
 80069da:	f858 2b04 	ldr.w	r2, [r8], #4
 80069de:	f8d1 c000 	ldr.w	ip, [r1]
 80069e2:	fa1f fe82 	uxth.w	lr, r2
 80069e6:	fa1f f38c 	uxth.w	r3, ip
 80069ea:	eba3 030e 	sub.w	r3, r3, lr
 80069ee:	4403      	add	r3, r0
 80069f0:	0c12      	lsrs	r2, r2, #16
 80069f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a00:	45c1      	cmp	r9, r8
 8006a02:	f841 3b04 	str.w	r3, [r1], #4
 8006a06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a0a:	d2e6      	bcs.n	80069da <quorem+0xa4>
 8006a0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a14:	b922      	cbnz	r2, 8006a20 <quorem+0xea>
 8006a16:	3b04      	subs	r3, #4
 8006a18:	429d      	cmp	r5, r3
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	d30b      	bcc.n	8006a36 <quorem+0x100>
 8006a1e:	613c      	str	r4, [r7, #16]
 8006a20:	3601      	adds	r6, #1
 8006a22:	4630      	mov	r0, r6
 8006a24:	b003      	add	sp, #12
 8006a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2a:	6812      	ldr	r2, [r2, #0]
 8006a2c:	3b04      	subs	r3, #4
 8006a2e:	2a00      	cmp	r2, #0
 8006a30:	d1cb      	bne.n	80069ca <quorem+0x94>
 8006a32:	3c01      	subs	r4, #1
 8006a34:	e7c6      	b.n	80069c4 <quorem+0x8e>
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	3b04      	subs	r3, #4
 8006a3a:	2a00      	cmp	r2, #0
 8006a3c:	d1ef      	bne.n	8006a1e <quorem+0xe8>
 8006a3e:	3c01      	subs	r4, #1
 8006a40:	e7ea      	b.n	8006a18 <quorem+0xe2>
 8006a42:	2000      	movs	r0, #0
 8006a44:	e7ee      	b.n	8006a24 <quorem+0xee>
	...

08006a48 <_dtoa_r>:
 8006a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	69c7      	ldr	r7, [r0, #28]
 8006a4e:	b097      	sub	sp, #92	@ 0x5c
 8006a50:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006a54:	ec55 4b10 	vmov	r4, r5, d0
 8006a58:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006a5a:	9107      	str	r1, [sp, #28]
 8006a5c:	4681      	mov	r9, r0
 8006a5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a60:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a62:	b97f      	cbnz	r7, 8006a84 <_dtoa_r+0x3c>
 8006a64:	2010      	movs	r0, #16
 8006a66:	f000 fe09 	bl	800767c <malloc>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006a70:	b920      	cbnz	r0, 8006a7c <_dtoa_r+0x34>
 8006a72:	4ba9      	ldr	r3, [pc, #676]	@ (8006d18 <_dtoa_r+0x2d0>)
 8006a74:	21ef      	movs	r1, #239	@ 0xef
 8006a76:	48a9      	ldr	r0, [pc, #676]	@ (8006d1c <_dtoa_r+0x2d4>)
 8006a78:	f001 fdba 	bl	80085f0 <__assert_func>
 8006a7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a80:	6007      	str	r7, [r0, #0]
 8006a82:	60c7      	str	r7, [r0, #12]
 8006a84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a88:	6819      	ldr	r1, [r3, #0]
 8006a8a:	b159      	cbz	r1, 8006aa4 <_dtoa_r+0x5c>
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	604a      	str	r2, [r1, #4]
 8006a90:	2301      	movs	r3, #1
 8006a92:	4093      	lsls	r3, r2
 8006a94:	608b      	str	r3, [r1, #8]
 8006a96:	4648      	mov	r0, r9
 8006a98:	f000 fee6 	bl	8007868 <_Bfree>
 8006a9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	1e2b      	subs	r3, r5, #0
 8006aa6:	bfb9      	ittee	lt
 8006aa8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006aac:	9305      	strlt	r3, [sp, #20]
 8006aae:	2300      	movge	r3, #0
 8006ab0:	6033      	strge	r3, [r6, #0]
 8006ab2:	9f05      	ldr	r7, [sp, #20]
 8006ab4:	4b9a      	ldr	r3, [pc, #616]	@ (8006d20 <_dtoa_r+0x2d8>)
 8006ab6:	bfbc      	itt	lt
 8006ab8:	2201      	movlt	r2, #1
 8006aba:	6032      	strlt	r2, [r6, #0]
 8006abc:	43bb      	bics	r3, r7
 8006abe:	d112      	bne.n	8006ae6 <_dtoa_r+0x9e>
 8006ac0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ac2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006acc:	4323      	orrs	r3, r4
 8006ace:	f000 855a 	beq.w	8007586 <_dtoa_r+0xb3e>
 8006ad2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ad4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006d34 <_dtoa_r+0x2ec>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 855c 	beq.w	8007596 <_dtoa_r+0xb4e>
 8006ade:	f10a 0303 	add.w	r3, sl, #3
 8006ae2:	f000 bd56 	b.w	8007592 <_dtoa_r+0xb4a>
 8006ae6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006aea:	2200      	movs	r2, #0
 8006aec:	ec51 0b17 	vmov	r0, r1, d7
 8006af0:	2300      	movs	r3, #0
 8006af2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006af6:	f7f9 ffe7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006afa:	4680      	mov	r8, r0
 8006afc:	b158      	cbz	r0, 8006b16 <_dtoa_r+0xce>
 8006afe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006b00:	2301      	movs	r3, #1
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b06:	b113      	cbz	r3, 8006b0e <_dtoa_r+0xc6>
 8006b08:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006b0a:	4b86      	ldr	r3, [pc, #536]	@ (8006d24 <_dtoa_r+0x2dc>)
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006d38 <_dtoa_r+0x2f0>
 8006b12:	f000 bd40 	b.w	8007596 <_dtoa_r+0xb4e>
 8006b16:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006b1a:	aa14      	add	r2, sp, #80	@ 0x50
 8006b1c:	a915      	add	r1, sp, #84	@ 0x54
 8006b1e:	4648      	mov	r0, r9
 8006b20:	f001 f984 	bl	8007e2c <__d2b>
 8006b24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b28:	9002      	str	r0, [sp, #8]
 8006b2a:	2e00      	cmp	r6, #0
 8006b2c:	d078      	beq.n	8006c20 <_dtoa_r+0x1d8>
 8006b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b30:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b48:	4619      	mov	r1, r3
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	4b76      	ldr	r3, [pc, #472]	@ (8006d28 <_dtoa_r+0x2e0>)
 8006b4e:	f7f9 fb9b 	bl	8000288 <__aeabi_dsub>
 8006b52:	a36b      	add	r3, pc, #428	@ (adr r3, 8006d00 <_dtoa_r+0x2b8>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f7f9 fd4e 	bl	80005f8 <__aeabi_dmul>
 8006b5c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006d08 <_dtoa_r+0x2c0>)
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	f7f9 fb93 	bl	800028c <__adddf3>
 8006b66:	4604      	mov	r4, r0
 8006b68:	4630      	mov	r0, r6
 8006b6a:	460d      	mov	r5, r1
 8006b6c:	f7f9 fcda 	bl	8000524 <__aeabi_i2d>
 8006b70:	a367      	add	r3, pc, #412	@ (adr r3, 8006d10 <_dtoa_r+0x2c8>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f7f9 fd3f 	bl	80005f8 <__aeabi_dmul>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4620      	mov	r0, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	f7f9 fb83 	bl	800028c <__adddf3>
 8006b86:	4604      	mov	r4, r0
 8006b88:	460d      	mov	r5, r1
 8006b8a:	f7f9 ffe5 	bl	8000b58 <__aeabi_d2iz>
 8006b8e:	2200      	movs	r2, #0
 8006b90:	4607      	mov	r7, r0
 8006b92:	2300      	movs	r3, #0
 8006b94:	4620      	mov	r0, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	f7f9 ffa0 	bl	8000adc <__aeabi_dcmplt>
 8006b9c:	b140      	cbz	r0, 8006bb0 <_dtoa_r+0x168>
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	f7f9 fcc0 	bl	8000524 <__aeabi_i2d>
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	462b      	mov	r3, r5
 8006ba8:	f7f9 ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bac:	b900      	cbnz	r0, 8006bb0 <_dtoa_r+0x168>
 8006bae:	3f01      	subs	r7, #1
 8006bb0:	2f16      	cmp	r7, #22
 8006bb2:	d852      	bhi.n	8006c5a <_dtoa_r+0x212>
 8006bb4:	4b5d      	ldr	r3, [pc, #372]	@ (8006d2c <_dtoa_r+0x2e4>)
 8006bb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006bc2:	f7f9 ff8b 	bl	8000adc <__aeabi_dcmplt>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d049      	beq.n	8006c5e <_dtoa_r+0x216>
 8006bca:	3f01      	subs	r7, #1
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9310      	str	r3, [sp, #64]	@ 0x40
 8006bd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006bd2:	1b9b      	subs	r3, r3, r6
 8006bd4:	1e5a      	subs	r2, r3, #1
 8006bd6:	bf45      	ittet	mi
 8006bd8:	f1c3 0301 	rsbmi	r3, r3, #1
 8006bdc:	9300      	strmi	r3, [sp, #0]
 8006bde:	2300      	movpl	r3, #0
 8006be0:	2300      	movmi	r3, #0
 8006be2:	9206      	str	r2, [sp, #24]
 8006be4:	bf54      	ite	pl
 8006be6:	9300      	strpl	r3, [sp, #0]
 8006be8:	9306      	strmi	r3, [sp, #24]
 8006bea:	2f00      	cmp	r7, #0
 8006bec:	db39      	blt.n	8006c62 <_dtoa_r+0x21a>
 8006bee:	9b06      	ldr	r3, [sp, #24]
 8006bf0:	970d      	str	r7, [sp, #52]	@ 0x34
 8006bf2:	443b      	add	r3, r7
 8006bf4:	9306      	str	r3, [sp, #24]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9308      	str	r3, [sp, #32]
 8006bfa:	9b07      	ldr	r3, [sp, #28]
 8006bfc:	2b09      	cmp	r3, #9
 8006bfe:	d863      	bhi.n	8006cc8 <_dtoa_r+0x280>
 8006c00:	2b05      	cmp	r3, #5
 8006c02:	bfc4      	itt	gt
 8006c04:	3b04      	subgt	r3, #4
 8006c06:	9307      	strgt	r3, [sp, #28]
 8006c08:	9b07      	ldr	r3, [sp, #28]
 8006c0a:	f1a3 0302 	sub.w	r3, r3, #2
 8006c0e:	bfcc      	ite	gt
 8006c10:	2400      	movgt	r4, #0
 8006c12:	2401      	movle	r4, #1
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d863      	bhi.n	8006ce0 <_dtoa_r+0x298>
 8006c18:	e8df f003 	tbb	[pc, r3]
 8006c1c:	2b375452 	.word	0x2b375452
 8006c20:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006c24:	441e      	add	r6, r3
 8006c26:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	bfc1      	itttt	gt
 8006c2e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c32:	409f      	lslgt	r7, r3
 8006c34:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c38:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c3c:	bfd6      	itet	le
 8006c3e:	f1c3 0320 	rsble	r3, r3, #32
 8006c42:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c46:	fa04 f003 	lslle.w	r0, r4, r3
 8006c4a:	f7f9 fc5b 	bl	8000504 <__aeabi_ui2d>
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c54:	3e01      	subs	r6, #1
 8006c56:	9212      	str	r2, [sp, #72]	@ 0x48
 8006c58:	e776      	b.n	8006b48 <_dtoa_r+0x100>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e7b7      	b.n	8006bce <_dtoa_r+0x186>
 8006c5e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006c60:	e7b6      	b.n	8006bd0 <_dtoa_r+0x188>
 8006c62:	9b00      	ldr	r3, [sp, #0]
 8006c64:	1bdb      	subs	r3, r3, r7
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	427b      	negs	r3, r7
 8006c6a:	9308      	str	r3, [sp, #32]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006c70:	e7c3      	b.n	8006bfa <_dtoa_r+0x1b2>
 8006c72:	2301      	movs	r3, #1
 8006c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c78:	eb07 0b03 	add.w	fp, r7, r3
 8006c7c:	f10b 0301 	add.w	r3, fp, #1
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	9303      	str	r3, [sp, #12]
 8006c84:	bfb8      	it	lt
 8006c86:	2301      	movlt	r3, #1
 8006c88:	e006      	b.n	8006c98 <_dtoa_r+0x250>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dd28      	ble.n	8006ce6 <_dtoa_r+0x29e>
 8006c94:	469b      	mov	fp, r3
 8006c96:	9303      	str	r3, [sp, #12]
 8006c98:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	2204      	movs	r2, #4
 8006ca0:	f102 0514 	add.w	r5, r2, #20
 8006ca4:	429d      	cmp	r5, r3
 8006ca6:	d926      	bls.n	8006cf6 <_dtoa_r+0x2ae>
 8006ca8:	6041      	str	r1, [r0, #4]
 8006caa:	4648      	mov	r0, r9
 8006cac:	f000 fd9c 	bl	80077e8 <_Balloc>
 8006cb0:	4682      	mov	sl, r0
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d142      	bne.n	8006d3c <_dtoa_r+0x2f4>
 8006cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d30 <_dtoa_r+0x2e8>)
 8006cb8:	4602      	mov	r2, r0
 8006cba:	f240 11af 	movw	r1, #431	@ 0x1af
 8006cbe:	e6da      	b.n	8006a76 <_dtoa_r+0x2e>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e7e3      	b.n	8006c8c <_dtoa_r+0x244>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e7d5      	b.n	8006c74 <_dtoa_r+0x22c>
 8006cc8:	2401      	movs	r4, #1
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9307      	str	r3, [sp, #28]
 8006cce:	9409      	str	r4, [sp, #36]	@ 0x24
 8006cd0:	f04f 3bff 	mov.w	fp, #4294967295
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8cd b00c 	str.w	fp, [sp, #12]
 8006cda:	2312      	movs	r3, #18
 8006cdc:	920c      	str	r2, [sp, #48]	@ 0x30
 8006cde:	e7db      	b.n	8006c98 <_dtoa_r+0x250>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ce4:	e7f4      	b.n	8006cd0 <_dtoa_r+0x288>
 8006ce6:	f04f 0b01 	mov.w	fp, #1
 8006cea:	f8cd b00c 	str.w	fp, [sp, #12]
 8006cee:	465b      	mov	r3, fp
 8006cf0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006cf4:	e7d0      	b.n	8006c98 <_dtoa_r+0x250>
 8006cf6:	3101      	adds	r1, #1
 8006cf8:	0052      	lsls	r2, r2, #1
 8006cfa:	e7d1      	b.n	8006ca0 <_dtoa_r+0x258>
 8006cfc:	f3af 8000 	nop.w
 8006d00:	636f4361 	.word	0x636f4361
 8006d04:	3fd287a7 	.word	0x3fd287a7
 8006d08:	8b60c8b3 	.word	0x8b60c8b3
 8006d0c:	3fc68a28 	.word	0x3fc68a28
 8006d10:	509f79fb 	.word	0x509f79fb
 8006d14:	3fd34413 	.word	0x3fd34413
 8006d18:	08009061 	.word	0x08009061
 8006d1c:	08009078 	.word	0x08009078
 8006d20:	7ff00000 	.word	0x7ff00000
 8006d24:	08009031 	.word	0x08009031
 8006d28:	3ff80000 	.word	0x3ff80000
 8006d2c:	080091c8 	.word	0x080091c8
 8006d30:	080090d0 	.word	0x080090d0
 8006d34:	0800905d 	.word	0x0800905d
 8006d38:	08009030 	.word	0x08009030
 8006d3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006d40:	6018      	str	r0, [r3, #0]
 8006d42:	9b03      	ldr	r3, [sp, #12]
 8006d44:	2b0e      	cmp	r3, #14
 8006d46:	f200 80a1 	bhi.w	8006e8c <_dtoa_r+0x444>
 8006d4a:	2c00      	cmp	r4, #0
 8006d4c:	f000 809e 	beq.w	8006e8c <_dtoa_r+0x444>
 8006d50:	2f00      	cmp	r7, #0
 8006d52:	dd33      	ble.n	8006dbc <_dtoa_r+0x374>
 8006d54:	4b9c      	ldr	r3, [pc, #624]	@ (8006fc8 <_dtoa_r+0x580>)
 8006d56:	f007 020f 	and.w	r2, r7, #15
 8006d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d5e:	ed93 7b00 	vldr	d7, [r3]
 8006d62:	05f8      	lsls	r0, r7, #23
 8006d64:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006d68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d6c:	d516      	bpl.n	8006d9c <_dtoa_r+0x354>
 8006d6e:	4b97      	ldr	r3, [pc, #604]	@ (8006fcc <_dtoa_r+0x584>)
 8006d70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d78:	f7f9 fd68 	bl	800084c <__aeabi_ddiv>
 8006d7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d80:	f004 040f 	and.w	r4, r4, #15
 8006d84:	2603      	movs	r6, #3
 8006d86:	4d91      	ldr	r5, [pc, #580]	@ (8006fcc <_dtoa_r+0x584>)
 8006d88:	b954      	cbnz	r4, 8006da0 <_dtoa_r+0x358>
 8006d8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d92:	f7f9 fd5b 	bl	800084c <__aeabi_ddiv>
 8006d96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d9a:	e028      	b.n	8006dee <_dtoa_r+0x3a6>
 8006d9c:	2602      	movs	r6, #2
 8006d9e:	e7f2      	b.n	8006d86 <_dtoa_r+0x33e>
 8006da0:	07e1      	lsls	r1, r4, #31
 8006da2:	d508      	bpl.n	8006db6 <_dtoa_r+0x36e>
 8006da4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006da8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dac:	f7f9 fc24 	bl	80005f8 <__aeabi_dmul>
 8006db0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006db4:	3601      	adds	r6, #1
 8006db6:	1064      	asrs	r4, r4, #1
 8006db8:	3508      	adds	r5, #8
 8006dba:	e7e5      	b.n	8006d88 <_dtoa_r+0x340>
 8006dbc:	f000 80af 	beq.w	8006f1e <_dtoa_r+0x4d6>
 8006dc0:	427c      	negs	r4, r7
 8006dc2:	4b81      	ldr	r3, [pc, #516]	@ (8006fc8 <_dtoa_r+0x580>)
 8006dc4:	4d81      	ldr	r5, [pc, #516]	@ (8006fcc <_dtoa_r+0x584>)
 8006dc6:	f004 020f 	and.w	r2, r4, #15
 8006dca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006dd6:	f7f9 fc0f 	bl	80005f8 <__aeabi_dmul>
 8006dda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dde:	1124      	asrs	r4, r4, #4
 8006de0:	2300      	movs	r3, #0
 8006de2:	2602      	movs	r6, #2
 8006de4:	2c00      	cmp	r4, #0
 8006de6:	f040 808f 	bne.w	8006f08 <_dtoa_r+0x4c0>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1d3      	bne.n	8006d96 <_dtoa_r+0x34e>
 8006dee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006df0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 8094 	beq.w	8006f22 <_dtoa_r+0x4da>
 8006dfa:	4b75      	ldr	r3, [pc, #468]	@ (8006fd0 <_dtoa_r+0x588>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4620      	mov	r0, r4
 8006e00:	4629      	mov	r1, r5
 8006e02:	f7f9 fe6b 	bl	8000adc <__aeabi_dcmplt>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	f000 808b 	beq.w	8006f22 <_dtoa_r+0x4da>
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 8087 	beq.w	8006f22 <_dtoa_r+0x4da>
 8006e14:	f1bb 0f00 	cmp.w	fp, #0
 8006e18:	dd34      	ble.n	8006e84 <_dtoa_r+0x43c>
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	4b6d      	ldr	r3, [pc, #436]	@ (8006fd4 <_dtoa_r+0x58c>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4629      	mov	r1, r5
 8006e22:	f7f9 fbe9 	bl	80005f8 <__aeabi_dmul>
 8006e26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e2a:	f107 38ff 	add.w	r8, r7, #4294967295
 8006e2e:	3601      	adds	r6, #1
 8006e30:	465c      	mov	r4, fp
 8006e32:	4630      	mov	r0, r6
 8006e34:	f7f9 fb76 	bl	8000524 <__aeabi_i2d>
 8006e38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e3c:	f7f9 fbdc 	bl	80005f8 <__aeabi_dmul>
 8006e40:	4b65      	ldr	r3, [pc, #404]	@ (8006fd8 <_dtoa_r+0x590>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	f7f9 fa22 	bl	800028c <__adddf3>
 8006e48:	4605      	mov	r5, r0
 8006e4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e4e:	2c00      	cmp	r4, #0
 8006e50:	d16a      	bne.n	8006f28 <_dtoa_r+0x4e0>
 8006e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e56:	4b61      	ldr	r3, [pc, #388]	@ (8006fdc <_dtoa_r+0x594>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f7f9 fa15 	bl	8000288 <__aeabi_dsub>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e66:	462a      	mov	r2, r5
 8006e68:	4633      	mov	r3, r6
 8006e6a:	f7f9 fe55 	bl	8000b18 <__aeabi_dcmpgt>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	f040 8298 	bne.w	80073a4 <_dtoa_r+0x95c>
 8006e74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e78:	462a      	mov	r2, r5
 8006e7a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e7e:	f7f9 fe2d 	bl	8000adc <__aeabi_dcmplt>
 8006e82:	bb38      	cbnz	r0, 8006ed4 <_dtoa_r+0x48c>
 8006e84:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006e88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f2c0 8157 	blt.w	8007142 <_dtoa_r+0x6fa>
 8006e94:	2f0e      	cmp	r7, #14
 8006e96:	f300 8154 	bgt.w	8007142 <_dtoa_r+0x6fa>
 8006e9a:	4b4b      	ldr	r3, [pc, #300]	@ (8006fc8 <_dtoa_r+0x580>)
 8006e9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ea0:	ed93 7b00 	vldr	d7, [r3]
 8006ea4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	ed8d 7b00 	vstr	d7, [sp]
 8006eac:	f280 80e5 	bge.w	800707a <_dtoa_r+0x632>
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f300 80e1 	bgt.w	800707a <_dtoa_r+0x632>
 8006eb8:	d10c      	bne.n	8006ed4 <_dtoa_r+0x48c>
 8006eba:	4b48      	ldr	r3, [pc, #288]	@ (8006fdc <_dtoa_r+0x594>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	ec51 0b17 	vmov	r0, r1, d7
 8006ec2:	f7f9 fb99 	bl	80005f8 <__aeabi_dmul>
 8006ec6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eca:	f7f9 fe1b 	bl	8000b04 <__aeabi_dcmpge>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	f000 8266 	beq.w	80073a0 <_dtoa_r+0x958>
 8006ed4:	2400      	movs	r4, #0
 8006ed6:	4625      	mov	r5, r4
 8006ed8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006eda:	4656      	mov	r6, sl
 8006edc:	ea6f 0803 	mvn.w	r8, r3
 8006ee0:	2700      	movs	r7, #0
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	4648      	mov	r0, r9
 8006ee6:	f000 fcbf 	bl	8007868 <_Bfree>
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	f000 80bd 	beq.w	800706a <_dtoa_r+0x622>
 8006ef0:	b12f      	cbz	r7, 8006efe <_dtoa_r+0x4b6>
 8006ef2:	42af      	cmp	r7, r5
 8006ef4:	d003      	beq.n	8006efe <_dtoa_r+0x4b6>
 8006ef6:	4639      	mov	r1, r7
 8006ef8:	4648      	mov	r0, r9
 8006efa:	f000 fcb5 	bl	8007868 <_Bfree>
 8006efe:	4629      	mov	r1, r5
 8006f00:	4648      	mov	r0, r9
 8006f02:	f000 fcb1 	bl	8007868 <_Bfree>
 8006f06:	e0b0      	b.n	800706a <_dtoa_r+0x622>
 8006f08:	07e2      	lsls	r2, r4, #31
 8006f0a:	d505      	bpl.n	8006f18 <_dtoa_r+0x4d0>
 8006f0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f10:	f7f9 fb72 	bl	80005f8 <__aeabi_dmul>
 8006f14:	3601      	adds	r6, #1
 8006f16:	2301      	movs	r3, #1
 8006f18:	1064      	asrs	r4, r4, #1
 8006f1a:	3508      	adds	r5, #8
 8006f1c:	e762      	b.n	8006de4 <_dtoa_r+0x39c>
 8006f1e:	2602      	movs	r6, #2
 8006f20:	e765      	b.n	8006dee <_dtoa_r+0x3a6>
 8006f22:	9c03      	ldr	r4, [sp, #12]
 8006f24:	46b8      	mov	r8, r7
 8006f26:	e784      	b.n	8006e32 <_dtoa_r+0x3ea>
 8006f28:	4b27      	ldr	r3, [pc, #156]	@ (8006fc8 <_dtoa_r+0x580>)
 8006f2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f34:	4454      	add	r4, sl
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d054      	beq.n	8006fe4 <_dtoa_r+0x59c>
 8006f3a:	4929      	ldr	r1, [pc, #164]	@ (8006fe0 <_dtoa_r+0x598>)
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	f7f9 fc85 	bl	800084c <__aeabi_ddiv>
 8006f42:	4633      	mov	r3, r6
 8006f44:	462a      	mov	r2, r5
 8006f46:	f7f9 f99f 	bl	8000288 <__aeabi_dsub>
 8006f4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f4e:	4656      	mov	r6, sl
 8006f50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f54:	f7f9 fe00 	bl	8000b58 <__aeabi_d2iz>
 8006f58:	4605      	mov	r5, r0
 8006f5a:	f7f9 fae3 	bl	8000524 <__aeabi_i2d>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f66:	f7f9 f98f 	bl	8000288 <__aeabi_dsub>
 8006f6a:	3530      	adds	r5, #48	@ 0x30
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f74:	f806 5b01 	strb.w	r5, [r6], #1
 8006f78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f7c:	f7f9 fdae 	bl	8000adc <__aeabi_dcmplt>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d172      	bne.n	800706a <_dtoa_r+0x622>
 8006f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f88:	4911      	ldr	r1, [pc, #68]	@ (8006fd0 <_dtoa_r+0x588>)
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	f7f9 f97c 	bl	8000288 <__aeabi_dsub>
 8006f90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f94:	f7f9 fda2 	bl	8000adc <__aeabi_dcmplt>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	f040 80b4 	bne.w	8007106 <_dtoa_r+0x6be>
 8006f9e:	42a6      	cmp	r6, r4
 8006fa0:	f43f af70 	beq.w	8006e84 <_dtoa_r+0x43c>
 8006fa4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd4 <_dtoa_r+0x58c>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	f7f9 fb24 	bl	80005f8 <__aeabi_dmul>
 8006fb0:	4b08      	ldr	r3, [pc, #32]	@ (8006fd4 <_dtoa_r+0x58c>)
 8006fb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fbc:	f7f9 fb1c 	bl	80005f8 <__aeabi_dmul>
 8006fc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fc4:	e7c4      	b.n	8006f50 <_dtoa_r+0x508>
 8006fc6:	bf00      	nop
 8006fc8:	080091c8 	.word	0x080091c8
 8006fcc:	080091a0 	.word	0x080091a0
 8006fd0:	3ff00000 	.word	0x3ff00000
 8006fd4:	40240000 	.word	0x40240000
 8006fd8:	401c0000 	.word	0x401c0000
 8006fdc:	40140000 	.word	0x40140000
 8006fe0:	3fe00000 	.word	0x3fe00000
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f7f9 fb06 	bl	80005f8 <__aeabi_dmul>
 8006fec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ff0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006ff2:	4656      	mov	r6, sl
 8006ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ff8:	f7f9 fdae 	bl	8000b58 <__aeabi_d2iz>
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	f7f9 fa91 	bl	8000524 <__aeabi_i2d>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800700a:	f7f9 f93d 	bl	8000288 <__aeabi_dsub>
 800700e:	3530      	adds	r5, #48	@ 0x30
 8007010:	f806 5b01 	strb.w	r5, [r6], #1
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	42a6      	cmp	r6, r4
 800701a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800701e:	f04f 0200 	mov.w	r2, #0
 8007022:	d124      	bne.n	800706e <_dtoa_r+0x626>
 8007024:	4baf      	ldr	r3, [pc, #700]	@ (80072e4 <_dtoa_r+0x89c>)
 8007026:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800702a:	f7f9 f92f 	bl	800028c <__adddf3>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007036:	f7f9 fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 800703a:	2800      	cmp	r0, #0
 800703c:	d163      	bne.n	8007106 <_dtoa_r+0x6be>
 800703e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007042:	49a8      	ldr	r1, [pc, #672]	@ (80072e4 <_dtoa_r+0x89c>)
 8007044:	2000      	movs	r0, #0
 8007046:	f7f9 f91f 	bl	8000288 <__aeabi_dsub>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007052:	f7f9 fd43 	bl	8000adc <__aeabi_dcmplt>
 8007056:	2800      	cmp	r0, #0
 8007058:	f43f af14 	beq.w	8006e84 <_dtoa_r+0x43c>
 800705c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800705e:	1e73      	subs	r3, r6, #1
 8007060:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007062:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007066:	2b30      	cmp	r3, #48	@ 0x30
 8007068:	d0f8      	beq.n	800705c <_dtoa_r+0x614>
 800706a:	4647      	mov	r7, r8
 800706c:	e03b      	b.n	80070e6 <_dtoa_r+0x69e>
 800706e:	4b9e      	ldr	r3, [pc, #632]	@ (80072e8 <_dtoa_r+0x8a0>)
 8007070:	f7f9 fac2 	bl	80005f8 <__aeabi_dmul>
 8007074:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007078:	e7bc      	b.n	8006ff4 <_dtoa_r+0x5ac>
 800707a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800707e:	4656      	mov	r6, sl
 8007080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007084:	4620      	mov	r0, r4
 8007086:	4629      	mov	r1, r5
 8007088:	f7f9 fbe0 	bl	800084c <__aeabi_ddiv>
 800708c:	f7f9 fd64 	bl	8000b58 <__aeabi_d2iz>
 8007090:	4680      	mov	r8, r0
 8007092:	f7f9 fa47 	bl	8000524 <__aeabi_i2d>
 8007096:	e9dd 2300 	ldrd	r2, r3, [sp]
 800709a:	f7f9 faad 	bl	80005f8 <__aeabi_dmul>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	4620      	mov	r0, r4
 80070a4:	4629      	mov	r1, r5
 80070a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80070aa:	f7f9 f8ed 	bl	8000288 <__aeabi_dsub>
 80070ae:	f806 4b01 	strb.w	r4, [r6], #1
 80070b2:	9d03      	ldr	r5, [sp, #12]
 80070b4:	eba6 040a 	sub.w	r4, r6, sl
 80070b8:	42a5      	cmp	r5, r4
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	d133      	bne.n	8007128 <_dtoa_r+0x6e0>
 80070c0:	f7f9 f8e4 	bl	800028c <__adddf3>
 80070c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070c8:	4604      	mov	r4, r0
 80070ca:	460d      	mov	r5, r1
 80070cc:	f7f9 fd24 	bl	8000b18 <__aeabi_dcmpgt>
 80070d0:	b9c0      	cbnz	r0, 8007104 <_dtoa_r+0x6bc>
 80070d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070d6:	4620      	mov	r0, r4
 80070d8:	4629      	mov	r1, r5
 80070da:	f7f9 fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80070de:	b110      	cbz	r0, 80070e6 <_dtoa_r+0x69e>
 80070e0:	f018 0f01 	tst.w	r8, #1
 80070e4:	d10e      	bne.n	8007104 <_dtoa_r+0x6bc>
 80070e6:	9902      	ldr	r1, [sp, #8]
 80070e8:	4648      	mov	r0, r9
 80070ea:	f000 fbbd 	bl	8007868 <_Bfree>
 80070ee:	2300      	movs	r3, #0
 80070f0:	7033      	strb	r3, [r6, #0]
 80070f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070f4:	3701      	adds	r7, #1
 80070f6:	601f      	str	r7, [r3, #0]
 80070f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 824b 	beq.w	8007596 <_dtoa_r+0xb4e>
 8007100:	601e      	str	r6, [r3, #0]
 8007102:	e248      	b.n	8007596 <_dtoa_r+0xb4e>
 8007104:	46b8      	mov	r8, r7
 8007106:	4633      	mov	r3, r6
 8007108:	461e      	mov	r6, r3
 800710a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800710e:	2a39      	cmp	r2, #57	@ 0x39
 8007110:	d106      	bne.n	8007120 <_dtoa_r+0x6d8>
 8007112:	459a      	cmp	sl, r3
 8007114:	d1f8      	bne.n	8007108 <_dtoa_r+0x6c0>
 8007116:	2230      	movs	r2, #48	@ 0x30
 8007118:	f108 0801 	add.w	r8, r8, #1
 800711c:	f88a 2000 	strb.w	r2, [sl]
 8007120:	781a      	ldrb	r2, [r3, #0]
 8007122:	3201      	adds	r2, #1
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	e7a0      	b.n	800706a <_dtoa_r+0x622>
 8007128:	4b6f      	ldr	r3, [pc, #444]	@ (80072e8 <_dtoa_r+0x8a0>)
 800712a:	2200      	movs	r2, #0
 800712c:	f7f9 fa64 	bl	80005f8 <__aeabi_dmul>
 8007130:	2200      	movs	r2, #0
 8007132:	2300      	movs	r3, #0
 8007134:	4604      	mov	r4, r0
 8007136:	460d      	mov	r5, r1
 8007138:	f7f9 fcc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800713c:	2800      	cmp	r0, #0
 800713e:	d09f      	beq.n	8007080 <_dtoa_r+0x638>
 8007140:	e7d1      	b.n	80070e6 <_dtoa_r+0x69e>
 8007142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007144:	2a00      	cmp	r2, #0
 8007146:	f000 80ea 	beq.w	800731e <_dtoa_r+0x8d6>
 800714a:	9a07      	ldr	r2, [sp, #28]
 800714c:	2a01      	cmp	r2, #1
 800714e:	f300 80cd 	bgt.w	80072ec <_dtoa_r+0x8a4>
 8007152:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007154:	2a00      	cmp	r2, #0
 8007156:	f000 80c1 	beq.w	80072dc <_dtoa_r+0x894>
 800715a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800715e:	9c08      	ldr	r4, [sp, #32]
 8007160:	9e00      	ldr	r6, [sp, #0]
 8007162:	9a00      	ldr	r2, [sp, #0]
 8007164:	441a      	add	r2, r3
 8007166:	9200      	str	r2, [sp, #0]
 8007168:	9a06      	ldr	r2, [sp, #24]
 800716a:	2101      	movs	r1, #1
 800716c:	441a      	add	r2, r3
 800716e:	4648      	mov	r0, r9
 8007170:	9206      	str	r2, [sp, #24]
 8007172:	f000 fc2d 	bl	80079d0 <__i2b>
 8007176:	4605      	mov	r5, r0
 8007178:	b166      	cbz	r6, 8007194 <_dtoa_r+0x74c>
 800717a:	9b06      	ldr	r3, [sp, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	dd09      	ble.n	8007194 <_dtoa_r+0x74c>
 8007180:	42b3      	cmp	r3, r6
 8007182:	9a00      	ldr	r2, [sp, #0]
 8007184:	bfa8      	it	ge
 8007186:	4633      	movge	r3, r6
 8007188:	1ad2      	subs	r2, r2, r3
 800718a:	9200      	str	r2, [sp, #0]
 800718c:	9a06      	ldr	r2, [sp, #24]
 800718e:	1af6      	subs	r6, r6, r3
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	9306      	str	r3, [sp, #24]
 8007194:	9b08      	ldr	r3, [sp, #32]
 8007196:	b30b      	cbz	r3, 80071dc <_dtoa_r+0x794>
 8007198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80c6 	beq.w	800732c <_dtoa_r+0x8e4>
 80071a0:	2c00      	cmp	r4, #0
 80071a2:	f000 80c0 	beq.w	8007326 <_dtoa_r+0x8de>
 80071a6:	4629      	mov	r1, r5
 80071a8:	4622      	mov	r2, r4
 80071aa:	4648      	mov	r0, r9
 80071ac:	f000 fcc8 	bl	8007b40 <__pow5mult>
 80071b0:	9a02      	ldr	r2, [sp, #8]
 80071b2:	4601      	mov	r1, r0
 80071b4:	4605      	mov	r5, r0
 80071b6:	4648      	mov	r0, r9
 80071b8:	f000 fc20 	bl	80079fc <__multiply>
 80071bc:	9902      	ldr	r1, [sp, #8]
 80071be:	4680      	mov	r8, r0
 80071c0:	4648      	mov	r0, r9
 80071c2:	f000 fb51 	bl	8007868 <_Bfree>
 80071c6:	9b08      	ldr	r3, [sp, #32]
 80071c8:	1b1b      	subs	r3, r3, r4
 80071ca:	9308      	str	r3, [sp, #32]
 80071cc:	f000 80b1 	beq.w	8007332 <_dtoa_r+0x8ea>
 80071d0:	9a08      	ldr	r2, [sp, #32]
 80071d2:	4641      	mov	r1, r8
 80071d4:	4648      	mov	r0, r9
 80071d6:	f000 fcb3 	bl	8007b40 <__pow5mult>
 80071da:	9002      	str	r0, [sp, #8]
 80071dc:	2101      	movs	r1, #1
 80071de:	4648      	mov	r0, r9
 80071e0:	f000 fbf6 	bl	80079d0 <__i2b>
 80071e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071e6:	4604      	mov	r4, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 81d8 	beq.w	800759e <_dtoa_r+0xb56>
 80071ee:	461a      	mov	r2, r3
 80071f0:	4601      	mov	r1, r0
 80071f2:	4648      	mov	r0, r9
 80071f4:	f000 fca4 	bl	8007b40 <__pow5mult>
 80071f8:	9b07      	ldr	r3, [sp, #28]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	4604      	mov	r4, r0
 80071fe:	f300 809f 	bgt.w	8007340 <_dtoa_r+0x8f8>
 8007202:	9b04      	ldr	r3, [sp, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	f040 8097 	bne.w	8007338 <_dtoa_r+0x8f0>
 800720a:	9b05      	ldr	r3, [sp, #20]
 800720c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007210:	2b00      	cmp	r3, #0
 8007212:	f040 8093 	bne.w	800733c <_dtoa_r+0x8f4>
 8007216:	9b05      	ldr	r3, [sp, #20]
 8007218:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800721c:	0d1b      	lsrs	r3, r3, #20
 800721e:	051b      	lsls	r3, r3, #20
 8007220:	b133      	cbz	r3, 8007230 <_dtoa_r+0x7e8>
 8007222:	9b00      	ldr	r3, [sp, #0]
 8007224:	3301      	adds	r3, #1
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	9b06      	ldr	r3, [sp, #24]
 800722a:	3301      	adds	r3, #1
 800722c:	9306      	str	r3, [sp, #24]
 800722e:	2301      	movs	r3, #1
 8007230:	9308      	str	r3, [sp, #32]
 8007232:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 81b8 	beq.w	80075aa <_dtoa_r+0xb62>
 800723a:	6923      	ldr	r3, [r4, #16]
 800723c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007240:	6918      	ldr	r0, [r3, #16]
 8007242:	f000 fb79 	bl	8007938 <__hi0bits>
 8007246:	f1c0 0020 	rsb	r0, r0, #32
 800724a:	9b06      	ldr	r3, [sp, #24]
 800724c:	4418      	add	r0, r3
 800724e:	f010 001f 	ands.w	r0, r0, #31
 8007252:	f000 8082 	beq.w	800735a <_dtoa_r+0x912>
 8007256:	f1c0 0320 	rsb	r3, r0, #32
 800725a:	2b04      	cmp	r3, #4
 800725c:	dd73      	ble.n	8007346 <_dtoa_r+0x8fe>
 800725e:	9b00      	ldr	r3, [sp, #0]
 8007260:	f1c0 001c 	rsb	r0, r0, #28
 8007264:	4403      	add	r3, r0
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	9b06      	ldr	r3, [sp, #24]
 800726a:	4403      	add	r3, r0
 800726c:	4406      	add	r6, r0
 800726e:	9306      	str	r3, [sp, #24]
 8007270:	9b00      	ldr	r3, [sp, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	dd05      	ble.n	8007282 <_dtoa_r+0x83a>
 8007276:	9902      	ldr	r1, [sp, #8]
 8007278:	461a      	mov	r2, r3
 800727a:	4648      	mov	r0, r9
 800727c:	f000 fcba 	bl	8007bf4 <__lshift>
 8007280:	9002      	str	r0, [sp, #8]
 8007282:	9b06      	ldr	r3, [sp, #24]
 8007284:	2b00      	cmp	r3, #0
 8007286:	dd05      	ble.n	8007294 <_dtoa_r+0x84c>
 8007288:	4621      	mov	r1, r4
 800728a:	461a      	mov	r2, r3
 800728c:	4648      	mov	r0, r9
 800728e:	f000 fcb1 	bl	8007bf4 <__lshift>
 8007292:	4604      	mov	r4, r0
 8007294:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007296:	2b00      	cmp	r3, #0
 8007298:	d061      	beq.n	800735e <_dtoa_r+0x916>
 800729a:	9802      	ldr	r0, [sp, #8]
 800729c:	4621      	mov	r1, r4
 800729e:	f000 fd15 	bl	8007ccc <__mcmp>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	da5b      	bge.n	800735e <_dtoa_r+0x916>
 80072a6:	2300      	movs	r3, #0
 80072a8:	9902      	ldr	r1, [sp, #8]
 80072aa:	220a      	movs	r2, #10
 80072ac:	4648      	mov	r0, r9
 80072ae:	f000 fafd 	bl	80078ac <__multadd>
 80072b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b4:	9002      	str	r0, [sp, #8]
 80072b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 8177 	beq.w	80075ae <_dtoa_r+0xb66>
 80072c0:	4629      	mov	r1, r5
 80072c2:	2300      	movs	r3, #0
 80072c4:	220a      	movs	r2, #10
 80072c6:	4648      	mov	r0, r9
 80072c8:	f000 faf0 	bl	80078ac <__multadd>
 80072cc:	f1bb 0f00 	cmp.w	fp, #0
 80072d0:	4605      	mov	r5, r0
 80072d2:	dc6f      	bgt.n	80073b4 <_dtoa_r+0x96c>
 80072d4:	9b07      	ldr	r3, [sp, #28]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	dc49      	bgt.n	800736e <_dtoa_r+0x926>
 80072da:	e06b      	b.n	80073b4 <_dtoa_r+0x96c>
 80072dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80072e2:	e73c      	b.n	800715e <_dtoa_r+0x716>
 80072e4:	3fe00000 	.word	0x3fe00000
 80072e8:	40240000 	.word	0x40240000
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	1e5c      	subs	r4, r3, #1
 80072f0:	9b08      	ldr	r3, [sp, #32]
 80072f2:	42a3      	cmp	r3, r4
 80072f4:	db09      	blt.n	800730a <_dtoa_r+0x8c2>
 80072f6:	1b1c      	subs	r4, r3, r4
 80072f8:	9b03      	ldr	r3, [sp, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f6bf af30 	bge.w	8007160 <_dtoa_r+0x718>
 8007300:	9b00      	ldr	r3, [sp, #0]
 8007302:	9a03      	ldr	r2, [sp, #12]
 8007304:	1a9e      	subs	r6, r3, r2
 8007306:	2300      	movs	r3, #0
 8007308:	e72b      	b.n	8007162 <_dtoa_r+0x71a>
 800730a:	9b08      	ldr	r3, [sp, #32]
 800730c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800730e:	9408      	str	r4, [sp, #32]
 8007310:	1ae3      	subs	r3, r4, r3
 8007312:	441a      	add	r2, r3
 8007314:	9e00      	ldr	r6, [sp, #0]
 8007316:	9b03      	ldr	r3, [sp, #12]
 8007318:	920d      	str	r2, [sp, #52]	@ 0x34
 800731a:	2400      	movs	r4, #0
 800731c:	e721      	b.n	8007162 <_dtoa_r+0x71a>
 800731e:	9c08      	ldr	r4, [sp, #32]
 8007320:	9e00      	ldr	r6, [sp, #0]
 8007322:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007324:	e728      	b.n	8007178 <_dtoa_r+0x730>
 8007326:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800732a:	e751      	b.n	80071d0 <_dtoa_r+0x788>
 800732c:	9a08      	ldr	r2, [sp, #32]
 800732e:	9902      	ldr	r1, [sp, #8]
 8007330:	e750      	b.n	80071d4 <_dtoa_r+0x78c>
 8007332:	f8cd 8008 	str.w	r8, [sp, #8]
 8007336:	e751      	b.n	80071dc <_dtoa_r+0x794>
 8007338:	2300      	movs	r3, #0
 800733a:	e779      	b.n	8007230 <_dtoa_r+0x7e8>
 800733c:	9b04      	ldr	r3, [sp, #16]
 800733e:	e777      	b.n	8007230 <_dtoa_r+0x7e8>
 8007340:	2300      	movs	r3, #0
 8007342:	9308      	str	r3, [sp, #32]
 8007344:	e779      	b.n	800723a <_dtoa_r+0x7f2>
 8007346:	d093      	beq.n	8007270 <_dtoa_r+0x828>
 8007348:	9a00      	ldr	r2, [sp, #0]
 800734a:	331c      	adds	r3, #28
 800734c:	441a      	add	r2, r3
 800734e:	9200      	str	r2, [sp, #0]
 8007350:	9a06      	ldr	r2, [sp, #24]
 8007352:	441a      	add	r2, r3
 8007354:	441e      	add	r6, r3
 8007356:	9206      	str	r2, [sp, #24]
 8007358:	e78a      	b.n	8007270 <_dtoa_r+0x828>
 800735a:	4603      	mov	r3, r0
 800735c:	e7f4      	b.n	8007348 <_dtoa_r+0x900>
 800735e:	9b03      	ldr	r3, [sp, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	46b8      	mov	r8, r7
 8007364:	dc20      	bgt.n	80073a8 <_dtoa_r+0x960>
 8007366:	469b      	mov	fp, r3
 8007368:	9b07      	ldr	r3, [sp, #28]
 800736a:	2b02      	cmp	r3, #2
 800736c:	dd1e      	ble.n	80073ac <_dtoa_r+0x964>
 800736e:	f1bb 0f00 	cmp.w	fp, #0
 8007372:	f47f adb1 	bne.w	8006ed8 <_dtoa_r+0x490>
 8007376:	4621      	mov	r1, r4
 8007378:	465b      	mov	r3, fp
 800737a:	2205      	movs	r2, #5
 800737c:	4648      	mov	r0, r9
 800737e:	f000 fa95 	bl	80078ac <__multadd>
 8007382:	4601      	mov	r1, r0
 8007384:	4604      	mov	r4, r0
 8007386:	9802      	ldr	r0, [sp, #8]
 8007388:	f000 fca0 	bl	8007ccc <__mcmp>
 800738c:	2800      	cmp	r0, #0
 800738e:	f77f ada3 	ble.w	8006ed8 <_dtoa_r+0x490>
 8007392:	4656      	mov	r6, sl
 8007394:	2331      	movs	r3, #49	@ 0x31
 8007396:	f806 3b01 	strb.w	r3, [r6], #1
 800739a:	f108 0801 	add.w	r8, r8, #1
 800739e:	e59f      	b.n	8006ee0 <_dtoa_r+0x498>
 80073a0:	9c03      	ldr	r4, [sp, #12]
 80073a2:	46b8      	mov	r8, r7
 80073a4:	4625      	mov	r5, r4
 80073a6:	e7f4      	b.n	8007392 <_dtoa_r+0x94a>
 80073a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80073ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 8101 	beq.w	80075b6 <_dtoa_r+0xb6e>
 80073b4:	2e00      	cmp	r6, #0
 80073b6:	dd05      	ble.n	80073c4 <_dtoa_r+0x97c>
 80073b8:	4629      	mov	r1, r5
 80073ba:	4632      	mov	r2, r6
 80073bc:	4648      	mov	r0, r9
 80073be:	f000 fc19 	bl	8007bf4 <__lshift>
 80073c2:	4605      	mov	r5, r0
 80073c4:	9b08      	ldr	r3, [sp, #32]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d05c      	beq.n	8007484 <_dtoa_r+0xa3c>
 80073ca:	6869      	ldr	r1, [r5, #4]
 80073cc:	4648      	mov	r0, r9
 80073ce:	f000 fa0b 	bl	80077e8 <_Balloc>
 80073d2:	4606      	mov	r6, r0
 80073d4:	b928      	cbnz	r0, 80073e2 <_dtoa_r+0x99a>
 80073d6:	4b82      	ldr	r3, [pc, #520]	@ (80075e0 <_dtoa_r+0xb98>)
 80073d8:	4602      	mov	r2, r0
 80073da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80073de:	f7ff bb4a 	b.w	8006a76 <_dtoa_r+0x2e>
 80073e2:	692a      	ldr	r2, [r5, #16]
 80073e4:	3202      	adds	r2, #2
 80073e6:	0092      	lsls	r2, r2, #2
 80073e8:	f105 010c 	add.w	r1, r5, #12
 80073ec:	300c      	adds	r0, #12
 80073ee:	f001 f8f1 	bl	80085d4 <memcpy>
 80073f2:	2201      	movs	r2, #1
 80073f4:	4631      	mov	r1, r6
 80073f6:	4648      	mov	r0, r9
 80073f8:	f000 fbfc 	bl	8007bf4 <__lshift>
 80073fc:	f10a 0301 	add.w	r3, sl, #1
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	eb0a 030b 	add.w	r3, sl, fp
 8007406:	9308      	str	r3, [sp, #32]
 8007408:	9b04      	ldr	r3, [sp, #16]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	462f      	mov	r7, r5
 8007410:	9306      	str	r3, [sp, #24]
 8007412:	4605      	mov	r5, r0
 8007414:	9b00      	ldr	r3, [sp, #0]
 8007416:	9802      	ldr	r0, [sp, #8]
 8007418:	4621      	mov	r1, r4
 800741a:	f103 3bff 	add.w	fp, r3, #4294967295
 800741e:	f7ff fa8a 	bl	8006936 <quorem>
 8007422:	4603      	mov	r3, r0
 8007424:	3330      	adds	r3, #48	@ 0x30
 8007426:	9003      	str	r0, [sp, #12]
 8007428:	4639      	mov	r1, r7
 800742a:	9802      	ldr	r0, [sp, #8]
 800742c:	9309      	str	r3, [sp, #36]	@ 0x24
 800742e:	f000 fc4d 	bl	8007ccc <__mcmp>
 8007432:	462a      	mov	r2, r5
 8007434:	9004      	str	r0, [sp, #16]
 8007436:	4621      	mov	r1, r4
 8007438:	4648      	mov	r0, r9
 800743a:	f000 fc63 	bl	8007d04 <__mdiff>
 800743e:	68c2      	ldr	r2, [r0, #12]
 8007440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007442:	4606      	mov	r6, r0
 8007444:	bb02      	cbnz	r2, 8007488 <_dtoa_r+0xa40>
 8007446:	4601      	mov	r1, r0
 8007448:	9802      	ldr	r0, [sp, #8]
 800744a:	f000 fc3f 	bl	8007ccc <__mcmp>
 800744e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007450:	4602      	mov	r2, r0
 8007452:	4631      	mov	r1, r6
 8007454:	4648      	mov	r0, r9
 8007456:	920c      	str	r2, [sp, #48]	@ 0x30
 8007458:	9309      	str	r3, [sp, #36]	@ 0x24
 800745a:	f000 fa05 	bl	8007868 <_Bfree>
 800745e:	9b07      	ldr	r3, [sp, #28]
 8007460:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007462:	9e00      	ldr	r6, [sp, #0]
 8007464:	ea42 0103 	orr.w	r1, r2, r3
 8007468:	9b06      	ldr	r3, [sp, #24]
 800746a:	4319      	orrs	r1, r3
 800746c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800746e:	d10d      	bne.n	800748c <_dtoa_r+0xa44>
 8007470:	2b39      	cmp	r3, #57	@ 0x39
 8007472:	d027      	beq.n	80074c4 <_dtoa_r+0xa7c>
 8007474:	9a04      	ldr	r2, [sp, #16]
 8007476:	2a00      	cmp	r2, #0
 8007478:	dd01      	ble.n	800747e <_dtoa_r+0xa36>
 800747a:	9b03      	ldr	r3, [sp, #12]
 800747c:	3331      	adds	r3, #49	@ 0x31
 800747e:	f88b 3000 	strb.w	r3, [fp]
 8007482:	e52e      	b.n	8006ee2 <_dtoa_r+0x49a>
 8007484:	4628      	mov	r0, r5
 8007486:	e7b9      	b.n	80073fc <_dtoa_r+0x9b4>
 8007488:	2201      	movs	r2, #1
 800748a:	e7e2      	b.n	8007452 <_dtoa_r+0xa0a>
 800748c:	9904      	ldr	r1, [sp, #16]
 800748e:	2900      	cmp	r1, #0
 8007490:	db04      	blt.n	800749c <_dtoa_r+0xa54>
 8007492:	9807      	ldr	r0, [sp, #28]
 8007494:	4301      	orrs	r1, r0
 8007496:	9806      	ldr	r0, [sp, #24]
 8007498:	4301      	orrs	r1, r0
 800749a:	d120      	bne.n	80074de <_dtoa_r+0xa96>
 800749c:	2a00      	cmp	r2, #0
 800749e:	ddee      	ble.n	800747e <_dtoa_r+0xa36>
 80074a0:	9902      	ldr	r1, [sp, #8]
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	2201      	movs	r2, #1
 80074a6:	4648      	mov	r0, r9
 80074a8:	f000 fba4 	bl	8007bf4 <__lshift>
 80074ac:	4621      	mov	r1, r4
 80074ae:	9002      	str	r0, [sp, #8]
 80074b0:	f000 fc0c 	bl	8007ccc <__mcmp>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	9b00      	ldr	r3, [sp, #0]
 80074b8:	dc02      	bgt.n	80074c0 <_dtoa_r+0xa78>
 80074ba:	d1e0      	bne.n	800747e <_dtoa_r+0xa36>
 80074bc:	07da      	lsls	r2, r3, #31
 80074be:	d5de      	bpl.n	800747e <_dtoa_r+0xa36>
 80074c0:	2b39      	cmp	r3, #57	@ 0x39
 80074c2:	d1da      	bne.n	800747a <_dtoa_r+0xa32>
 80074c4:	2339      	movs	r3, #57	@ 0x39
 80074c6:	f88b 3000 	strb.w	r3, [fp]
 80074ca:	4633      	mov	r3, r6
 80074cc:	461e      	mov	r6, r3
 80074ce:	3b01      	subs	r3, #1
 80074d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80074d4:	2a39      	cmp	r2, #57	@ 0x39
 80074d6:	d04e      	beq.n	8007576 <_dtoa_r+0xb2e>
 80074d8:	3201      	adds	r2, #1
 80074da:	701a      	strb	r2, [r3, #0]
 80074dc:	e501      	b.n	8006ee2 <_dtoa_r+0x49a>
 80074de:	2a00      	cmp	r2, #0
 80074e0:	dd03      	ble.n	80074ea <_dtoa_r+0xaa2>
 80074e2:	2b39      	cmp	r3, #57	@ 0x39
 80074e4:	d0ee      	beq.n	80074c4 <_dtoa_r+0xa7c>
 80074e6:	3301      	adds	r3, #1
 80074e8:	e7c9      	b.n	800747e <_dtoa_r+0xa36>
 80074ea:	9a00      	ldr	r2, [sp, #0]
 80074ec:	9908      	ldr	r1, [sp, #32]
 80074ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80074f2:	428a      	cmp	r2, r1
 80074f4:	d028      	beq.n	8007548 <_dtoa_r+0xb00>
 80074f6:	9902      	ldr	r1, [sp, #8]
 80074f8:	2300      	movs	r3, #0
 80074fa:	220a      	movs	r2, #10
 80074fc:	4648      	mov	r0, r9
 80074fe:	f000 f9d5 	bl	80078ac <__multadd>
 8007502:	42af      	cmp	r7, r5
 8007504:	9002      	str	r0, [sp, #8]
 8007506:	f04f 0300 	mov.w	r3, #0
 800750a:	f04f 020a 	mov.w	r2, #10
 800750e:	4639      	mov	r1, r7
 8007510:	4648      	mov	r0, r9
 8007512:	d107      	bne.n	8007524 <_dtoa_r+0xadc>
 8007514:	f000 f9ca 	bl	80078ac <__multadd>
 8007518:	4607      	mov	r7, r0
 800751a:	4605      	mov	r5, r0
 800751c:	9b00      	ldr	r3, [sp, #0]
 800751e:	3301      	adds	r3, #1
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	e777      	b.n	8007414 <_dtoa_r+0x9cc>
 8007524:	f000 f9c2 	bl	80078ac <__multadd>
 8007528:	4629      	mov	r1, r5
 800752a:	4607      	mov	r7, r0
 800752c:	2300      	movs	r3, #0
 800752e:	220a      	movs	r2, #10
 8007530:	4648      	mov	r0, r9
 8007532:	f000 f9bb 	bl	80078ac <__multadd>
 8007536:	4605      	mov	r5, r0
 8007538:	e7f0      	b.n	800751c <_dtoa_r+0xad4>
 800753a:	f1bb 0f00 	cmp.w	fp, #0
 800753e:	bfcc      	ite	gt
 8007540:	465e      	movgt	r6, fp
 8007542:	2601      	movle	r6, #1
 8007544:	4456      	add	r6, sl
 8007546:	2700      	movs	r7, #0
 8007548:	9902      	ldr	r1, [sp, #8]
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	2201      	movs	r2, #1
 800754e:	4648      	mov	r0, r9
 8007550:	f000 fb50 	bl	8007bf4 <__lshift>
 8007554:	4621      	mov	r1, r4
 8007556:	9002      	str	r0, [sp, #8]
 8007558:	f000 fbb8 	bl	8007ccc <__mcmp>
 800755c:	2800      	cmp	r0, #0
 800755e:	dcb4      	bgt.n	80074ca <_dtoa_r+0xa82>
 8007560:	d102      	bne.n	8007568 <_dtoa_r+0xb20>
 8007562:	9b00      	ldr	r3, [sp, #0]
 8007564:	07db      	lsls	r3, r3, #31
 8007566:	d4b0      	bmi.n	80074ca <_dtoa_r+0xa82>
 8007568:	4633      	mov	r3, r6
 800756a:	461e      	mov	r6, r3
 800756c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007570:	2a30      	cmp	r2, #48	@ 0x30
 8007572:	d0fa      	beq.n	800756a <_dtoa_r+0xb22>
 8007574:	e4b5      	b.n	8006ee2 <_dtoa_r+0x49a>
 8007576:	459a      	cmp	sl, r3
 8007578:	d1a8      	bne.n	80074cc <_dtoa_r+0xa84>
 800757a:	2331      	movs	r3, #49	@ 0x31
 800757c:	f108 0801 	add.w	r8, r8, #1
 8007580:	f88a 3000 	strb.w	r3, [sl]
 8007584:	e4ad      	b.n	8006ee2 <_dtoa_r+0x49a>
 8007586:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007588:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80075e4 <_dtoa_r+0xb9c>
 800758c:	b11b      	cbz	r3, 8007596 <_dtoa_r+0xb4e>
 800758e:	f10a 0308 	add.w	r3, sl, #8
 8007592:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007594:	6013      	str	r3, [r2, #0]
 8007596:	4650      	mov	r0, sl
 8007598:	b017      	add	sp, #92	@ 0x5c
 800759a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759e:	9b07      	ldr	r3, [sp, #28]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	f77f ae2e 	ble.w	8007202 <_dtoa_r+0x7ba>
 80075a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075a8:	9308      	str	r3, [sp, #32]
 80075aa:	2001      	movs	r0, #1
 80075ac:	e64d      	b.n	800724a <_dtoa_r+0x802>
 80075ae:	f1bb 0f00 	cmp.w	fp, #0
 80075b2:	f77f aed9 	ble.w	8007368 <_dtoa_r+0x920>
 80075b6:	4656      	mov	r6, sl
 80075b8:	9802      	ldr	r0, [sp, #8]
 80075ba:	4621      	mov	r1, r4
 80075bc:	f7ff f9bb 	bl	8006936 <quorem>
 80075c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80075c4:	f806 3b01 	strb.w	r3, [r6], #1
 80075c8:	eba6 020a 	sub.w	r2, r6, sl
 80075cc:	4593      	cmp	fp, r2
 80075ce:	ddb4      	ble.n	800753a <_dtoa_r+0xaf2>
 80075d0:	9902      	ldr	r1, [sp, #8]
 80075d2:	2300      	movs	r3, #0
 80075d4:	220a      	movs	r2, #10
 80075d6:	4648      	mov	r0, r9
 80075d8:	f000 f968 	bl	80078ac <__multadd>
 80075dc:	9002      	str	r0, [sp, #8]
 80075de:	e7eb      	b.n	80075b8 <_dtoa_r+0xb70>
 80075e0:	080090d0 	.word	0x080090d0
 80075e4:	08009054 	.word	0x08009054

080075e8 <_free_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4605      	mov	r5, r0
 80075ec:	2900      	cmp	r1, #0
 80075ee:	d041      	beq.n	8007674 <_free_r+0x8c>
 80075f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f4:	1f0c      	subs	r4, r1, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	bfb8      	it	lt
 80075fa:	18e4      	addlt	r4, r4, r3
 80075fc:	f000 f8e8 	bl	80077d0 <__malloc_lock>
 8007600:	4a1d      	ldr	r2, [pc, #116]	@ (8007678 <_free_r+0x90>)
 8007602:	6813      	ldr	r3, [r2, #0]
 8007604:	b933      	cbnz	r3, 8007614 <_free_r+0x2c>
 8007606:	6063      	str	r3, [r4, #4]
 8007608:	6014      	str	r4, [r2, #0]
 800760a:	4628      	mov	r0, r5
 800760c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007610:	f000 b8e4 	b.w	80077dc <__malloc_unlock>
 8007614:	42a3      	cmp	r3, r4
 8007616:	d908      	bls.n	800762a <_free_r+0x42>
 8007618:	6820      	ldr	r0, [r4, #0]
 800761a:	1821      	adds	r1, r4, r0
 800761c:	428b      	cmp	r3, r1
 800761e:	bf01      	itttt	eq
 8007620:	6819      	ldreq	r1, [r3, #0]
 8007622:	685b      	ldreq	r3, [r3, #4]
 8007624:	1809      	addeq	r1, r1, r0
 8007626:	6021      	streq	r1, [r4, #0]
 8007628:	e7ed      	b.n	8007606 <_free_r+0x1e>
 800762a:	461a      	mov	r2, r3
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	b10b      	cbz	r3, 8007634 <_free_r+0x4c>
 8007630:	42a3      	cmp	r3, r4
 8007632:	d9fa      	bls.n	800762a <_free_r+0x42>
 8007634:	6811      	ldr	r1, [r2, #0]
 8007636:	1850      	adds	r0, r2, r1
 8007638:	42a0      	cmp	r0, r4
 800763a:	d10b      	bne.n	8007654 <_free_r+0x6c>
 800763c:	6820      	ldr	r0, [r4, #0]
 800763e:	4401      	add	r1, r0
 8007640:	1850      	adds	r0, r2, r1
 8007642:	4283      	cmp	r3, r0
 8007644:	6011      	str	r1, [r2, #0]
 8007646:	d1e0      	bne.n	800760a <_free_r+0x22>
 8007648:	6818      	ldr	r0, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	6053      	str	r3, [r2, #4]
 800764e:	4408      	add	r0, r1
 8007650:	6010      	str	r0, [r2, #0]
 8007652:	e7da      	b.n	800760a <_free_r+0x22>
 8007654:	d902      	bls.n	800765c <_free_r+0x74>
 8007656:	230c      	movs	r3, #12
 8007658:	602b      	str	r3, [r5, #0]
 800765a:	e7d6      	b.n	800760a <_free_r+0x22>
 800765c:	6820      	ldr	r0, [r4, #0]
 800765e:	1821      	adds	r1, r4, r0
 8007660:	428b      	cmp	r3, r1
 8007662:	bf04      	itt	eq
 8007664:	6819      	ldreq	r1, [r3, #0]
 8007666:	685b      	ldreq	r3, [r3, #4]
 8007668:	6063      	str	r3, [r4, #4]
 800766a:	bf04      	itt	eq
 800766c:	1809      	addeq	r1, r1, r0
 800766e:	6021      	streq	r1, [r4, #0]
 8007670:	6054      	str	r4, [r2, #4]
 8007672:	e7ca      	b.n	800760a <_free_r+0x22>
 8007674:	bd38      	pop	{r3, r4, r5, pc}
 8007676:	bf00      	nop
 8007678:	200006dc 	.word	0x200006dc

0800767c <malloc>:
 800767c:	4b02      	ldr	r3, [pc, #8]	@ (8007688 <malloc+0xc>)
 800767e:	4601      	mov	r1, r0
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	f000 b825 	b.w	80076d0 <_malloc_r>
 8007686:	bf00      	nop
 8007688:	2000001c 	.word	0x2000001c

0800768c <sbrk_aligned>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	4e0f      	ldr	r6, [pc, #60]	@ (80076cc <sbrk_aligned+0x40>)
 8007690:	460c      	mov	r4, r1
 8007692:	6831      	ldr	r1, [r6, #0]
 8007694:	4605      	mov	r5, r0
 8007696:	b911      	cbnz	r1, 800769e <sbrk_aligned+0x12>
 8007698:	f000 ff8c 	bl	80085b4 <_sbrk_r>
 800769c:	6030      	str	r0, [r6, #0]
 800769e:	4621      	mov	r1, r4
 80076a0:	4628      	mov	r0, r5
 80076a2:	f000 ff87 	bl	80085b4 <_sbrk_r>
 80076a6:	1c43      	adds	r3, r0, #1
 80076a8:	d103      	bne.n	80076b2 <sbrk_aligned+0x26>
 80076aa:	f04f 34ff 	mov.w	r4, #4294967295
 80076ae:	4620      	mov	r0, r4
 80076b0:	bd70      	pop	{r4, r5, r6, pc}
 80076b2:	1cc4      	adds	r4, r0, #3
 80076b4:	f024 0403 	bic.w	r4, r4, #3
 80076b8:	42a0      	cmp	r0, r4
 80076ba:	d0f8      	beq.n	80076ae <sbrk_aligned+0x22>
 80076bc:	1a21      	subs	r1, r4, r0
 80076be:	4628      	mov	r0, r5
 80076c0:	f000 ff78 	bl	80085b4 <_sbrk_r>
 80076c4:	3001      	adds	r0, #1
 80076c6:	d1f2      	bne.n	80076ae <sbrk_aligned+0x22>
 80076c8:	e7ef      	b.n	80076aa <sbrk_aligned+0x1e>
 80076ca:	bf00      	nop
 80076cc:	200006d8 	.word	0x200006d8

080076d0 <_malloc_r>:
 80076d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d4:	1ccd      	adds	r5, r1, #3
 80076d6:	f025 0503 	bic.w	r5, r5, #3
 80076da:	3508      	adds	r5, #8
 80076dc:	2d0c      	cmp	r5, #12
 80076de:	bf38      	it	cc
 80076e0:	250c      	movcc	r5, #12
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	4606      	mov	r6, r0
 80076e6:	db01      	blt.n	80076ec <_malloc_r+0x1c>
 80076e8:	42a9      	cmp	r1, r5
 80076ea:	d904      	bls.n	80076f6 <_malloc_r+0x26>
 80076ec:	230c      	movs	r3, #12
 80076ee:	6033      	str	r3, [r6, #0]
 80076f0:	2000      	movs	r0, #0
 80076f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077cc <_malloc_r+0xfc>
 80076fa:	f000 f869 	bl	80077d0 <__malloc_lock>
 80076fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007702:	461c      	mov	r4, r3
 8007704:	bb44      	cbnz	r4, 8007758 <_malloc_r+0x88>
 8007706:	4629      	mov	r1, r5
 8007708:	4630      	mov	r0, r6
 800770a:	f7ff ffbf 	bl	800768c <sbrk_aligned>
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	4604      	mov	r4, r0
 8007712:	d158      	bne.n	80077c6 <_malloc_r+0xf6>
 8007714:	f8d8 4000 	ldr.w	r4, [r8]
 8007718:	4627      	mov	r7, r4
 800771a:	2f00      	cmp	r7, #0
 800771c:	d143      	bne.n	80077a6 <_malloc_r+0xd6>
 800771e:	2c00      	cmp	r4, #0
 8007720:	d04b      	beq.n	80077ba <_malloc_r+0xea>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	4639      	mov	r1, r7
 8007726:	4630      	mov	r0, r6
 8007728:	eb04 0903 	add.w	r9, r4, r3
 800772c:	f000 ff42 	bl	80085b4 <_sbrk_r>
 8007730:	4581      	cmp	r9, r0
 8007732:	d142      	bne.n	80077ba <_malloc_r+0xea>
 8007734:	6821      	ldr	r1, [r4, #0]
 8007736:	1a6d      	subs	r5, r5, r1
 8007738:	4629      	mov	r1, r5
 800773a:	4630      	mov	r0, r6
 800773c:	f7ff ffa6 	bl	800768c <sbrk_aligned>
 8007740:	3001      	adds	r0, #1
 8007742:	d03a      	beq.n	80077ba <_malloc_r+0xea>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	442b      	add	r3, r5
 8007748:	6023      	str	r3, [r4, #0]
 800774a:	f8d8 3000 	ldr.w	r3, [r8]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	bb62      	cbnz	r2, 80077ac <_malloc_r+0xdc>
 8007752:	f8c8 7000 	str.w	r7, [r8]
 8007756:	e00f      	b.n	8007778 <_malloc_r+0xa8>
 8007758:	6822      	ldr	r2, [r4, #0]
 800775a:	1b52      	subs	r2, r2, r5
 800775c:	d420      	bmi.n	80077a0 <_malloc_r+0xd0>
 800775e:	2a0b      	cmp	r2, #11
 8007760:	d917      	bls.n	8007792 <_malloc_r+0xc2>
 8007762:	1961      	adds	r1, r4, r5
 8007764:	42a3      	cmp	r3, r4
 8007766:	6025      	str	r5, [r4, #0]
 8007768:	bf18      	it	ne
 800776a:	6059      	strne	r1, [r3, #4]
 800776c:	6863      	ldr	r3, [r4, #4]
 800776e:	bf08      	it	eq
 8007770:	f8c8 1000 	streq.w	r1, [r8]
 8007774:	5162      	str	r2, [r4, r5]
 8007776:	604b      	str	r3, [r1, #4]
 8007778:	4630      	mov	r0, r6
 800777a:	f000 f82f 	bl	80077dc <__malloc_unlock>
 800777e:	f104 000b 	add.w	r0, r4, #11
 8007782:	1d23      	adds	r3, r4, #4
 8007784:	f020 0007 	bic.w	r0, r0, #7
 8007788:	1ac2      	subs	r2, r0, r3
 800778a:	bf1c      	itt	ne
 800778c:	1a1b      	subne	r3, r3, r0
 800778e:	50a3      	strne	r3, [r4, r2]
 8007790:	e7af      	b.n	80076f2 <_malloc_r+0x22>
 8007792:	6862      	ldr	r2, [r4, #4]
 8007794:	42a3      	cmp	r3, r4
 8007796:	bf0c      	ite	eq
 8007798:	f8c8 2000 	streq.w	r2, [r8]
 800779c:	605a      	strne	r2, [r3, #4]
 800779e:	e7eb      	b.n	8007778 <_malloc_r+0xa8>
 80077a0:	4623      	mov	r3, r4
 80077a2:	6864      	ldr	r4, [r4, #4]
 80077a4:	e7ae      	b.n	8007704 <_malloc_r+0x34>
 80077a6:	463c      	mov	r4, r7
 80077a8:	687f      	ldr	r7, [r7, #4]
 80077aa:	e7b6      	b.n	800771a <_malloc_r+0x4a>
 80077ac:	461a      	mov	r2, r3
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	d1fb      	bne.n	80077ac <_malloc_r+0xdc>
 80077b4:	2300      	movs	r3, #0
 80077b6:	6053      	str	r3, [r2, #4]
 80077b8:	e7de      	b.n	8007778 <_malloc_r+0xa8>
 80077ba:	230c      	movs	r3, #12
 80077bc:	6033      	str	r3, [r6, #0]
 80077be:	4630      	mov	r0, r6
 80077c0:	f000 f80c 	bl	80077dc <__malloc_unlock>
 80077c4:	e794      	b.n	80076f0 <_malloc_r+0x20>
 80077c6:	6005      	str	r5, [r0, #0]
 80077c8:	e7d6      	b.n	8007778 <_malloc_r+0xa8>
 80077ca:	bf00      	nop
 80077cc:	200006dc 	.word	0x200006dc

080077d0 <__malloc_lock>:
 80077d0:	4801      	ldr	r0, [pc, #4]	@ (80077d8 <__malloc_lock+0x8>)
 80077d2:	f7ff b8ae 	b.w	8006932 <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	200006d4 	.word	0x200006d4

080077dc <__malloc_unlock>:
 80077dc:	4801      	ldr	r0, [pc, #4]	@ (80077e4 <__malloc_unlock+0x8>)
 80077de:	f7ff b8a9 	b.w	8006934 <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	200006d4 	.word	0x200006d4

080077e8 <_Balloc>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	69c6      	ldr	r6, [r0, #28]
 80077ec:	4604      	mov	r4, r0
 80077ee:	460d      	mov	r5, r1
 80077f0:	b976      	cbnz	r6, 8007810 <_Balloc+0x28>
 80077f2:	2010      	movs	r0, #16
 80077f4:	f7ff ff42 	bl	800767c <malloc>
 80077f8:	4602      	mov	r2, r0
 80077fa:	61e0      	str	r0, [r4, #28]
 80077fc:	b920      	cbnz	r0, 8007808 <_Balloc+0x20>
 80077fe:	4b18      	ldr	r3, [pc, #96]	@ (8007860 <_Balloc+0x78>)
 8007800:	4818      	ldr	r0, [pc, #96]	@ (8007864 <_Balloc+0x7c>)
 8007802:	216b      	movs	r1, #107	@ 0x6b
 8007804:	f000 fef4 	bl	80085f0 <__assert_func>
 8007808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800780c:	6006      	str	r6, [r0, #0]
 800780e:	60c6      	str	r6, [r0, #12]
 8007810:	69e6      	ldr	r6, [r4, #28]
 8007812:	68f3      	ldr	r3, [r6, #12]
 8007814:	b183      	cbz	r3, 8007838 <_Balloc+0x50>
 8007816:	69e3      	ldr	r3, [r4, #28]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800781e:	b9b8      	cbnz	r0, 8007850 <_Balloc+0x68>
 8007820:	2101      	movs	r1, #1
 8007822:	fa01 f605 	lsl.w	r6, r1, r5
 8007826:	1d72      	adds	r2, r6, #5
 8007828:	0092      	lsls	r2, r2, #2
 800782a:	4620      	mov	r0, r4
 800782c:	f000 fefe 	bl	800862c <_calloc_r>
 8007830:	b160      	cbz	r0, 800784c <_Balloc+0x64>
 8007832:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007836:	e00e      	b.n	8007856 <_Balloc+0x6e>
 8007838:	2221      	movs	r2, #33	@ 0x21
 800783a:	2104      	movs	r1, #4
 800783c:	4620      	mov	r0, r4
 800783e:	f000 fef5 	bl	800862c <_calloc_r>
 8007842:	69e3      	ldr	r3, [r4, #28]
 8007844:	60f0      	str	r0, [r6, #12]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e4      	bne.n	8007816 <_Balloc+0x2e>
 800784c:	2000      	movs	r0, #0
 800784e:	bd70      	pop	{r4, r5, r6, pc}
 8007850:	6802      	ldr	r2, [r0, #0]
 8007852:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007856:	2300      	movs	r3, #0
 8007858:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800785c:	e7f7      	b.n	800784e <_Balloc+0x66>
 800785e:	bf00      	nop
 8007860:	08009061 	.word	0x08009061
 8007864:	080090e1 	.word	0x080090e1

08007868 <_Bfree>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	69c6      	ldr	r6, [r0, #28]
 800786c:	4605      	mov	r5, r0
 800786e:	460c      	mov	r4, r1
 8007870:	b976      	cbnz	r6, 8007890 <_Bfree+0x28>
 8007872:	2010      	movs	r0, #16
 8007874:	f7ff ff02 	bl	800767c <malloc>
 8007878:	4602      	mov	r2, r0
 800787a:	61e8      	str	r0, [r5, #28]
 800787c:	b920      	cbnz	r0, 8007888 <_Bfree+0x20>
 800787e:	4b09      	ldr	r3, [pc, #36]	@ (80078a4 <_Bfree+0x3c>)
 8007880:	4809      	ldr	r0, [pc, #36]	@ (80078a8 <_Bfree+0x40>)
 8007882:	218f      	movs	r1, #143	@ 0x8f
 8007884:	f000 feb4 	bl	80085f0 <__assert_func>
 8007888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800788c:	6006      	str	r6, [r0, #0]
 800788e:	60c6      	str	r6, [r0, #12]
 8007890:	b13c      	cbz	r4, 80078a2 <_Bfree+0x3a>
 8007892:	69eb      	ldr	r3, [r5, #28]
 8007894:	6862      	ldr	r2, [r4, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800789c:	6021      	str	r1, [r4, #0]
 800789e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	08009061 	.word	0x08009061
 80078a8:	080090e1 	.word	0x080090e1

080078ac <__multadd>:
 80078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	690d      	ldr	r5, [r1, #16]
 80078b2:	4607      	mov	r7, r0
 80078b4:	460c      	mov	r4, r1
 80078b6:	461e      	mov	r6, r3
 80078b8:	f101 0c14 	add.w	ip, r1, #20
 80078bc:	2000      	movs	r0, #0
 80078be:	f8dc 3000 	ldr.w	r3, [ip]
 80078c2:	b299      	uxth	r1, r3
 80078c4:	fb02 6101 	mla	r1, r2, r1, r6
 80078c8:	0c1e      	lsrs	r6, r3, #16
 80078ca:	0c0b      	lsrs	r3, r1, #16
 80078cc:	fb02 3306 	mla	r3, r2, r6, r3
 80078d0:	b289      	uxth	r1, r1
 80078d2:	3001      	adds	r0, #1
 80078d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078d8:	4285      	cmp	r5, r0
 80078da:	f84c 1b04 	str.w	r1, [ip], #4
 80078de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078e2:	dcec      	bgt.n	80078be <__multadd+0x12>
 80078e4:	b30e      	cbz	r6, 800792a <__multadd+0x7e>
 80078e6:	68a3      	ldr	r3, [r4, #8]
 80078e8:	42ab      	cmp	r3, r5
 80078ea:	dc19      	bgt.n	8007920 <__multadd+0x74>
 80078ec:	6861      	ldr	r1, [r4, #4]
 80078ee:	4638      	mov	r0, r7
 80078f0:	3101      	adds	r1, #1
 80078f2:	f7ff ff79 	bl	80077e8 <_Balloc>
 80078f6:	4680      	mov	r8, r0
 80078f8:	b928      	cbnz	r0, 8007906 <__multadd+0x5a>
 80078fa:	4602      	mov	r2, r0
 80078fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007930 <__multadd+0x84>)
 80078fe:	480d      	ldr	r0, [pc, #52]	@ (8007934 <__multadd+0x88>)
 8007900:	21ba      	movs	r1, #186	@ 0xba
 8007902:	f000 fe75 	bl	80085f0 <__assert_func>
 8007906:	6922      	ldr	r2, [r4, #16]
 8007908:	3202      	adds	r2, #2
 800790a:	f104 010c 	add.w	r1, r4, #12
 800790e:	0092      	lsls	r2, r2, #2
 8007910:	300c      	adds	r0, #12
 8007912:	f000 fe5f 	bl	80085d4 <memcpy>
 8007916:	4621      	mov	r1, r4
 8007918:	4638      	mov	r0, r7
 800791a:	f7ff ffa5 	bl	8007868 <_Bfree>
 800791e:	4644      	mov	r4, r8
 8007920:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007924:	3501      	adds	r5, #1
 8007926:	615e      	str	r6, [r3, #20]
 8007928:	6125      	str	r5, [r4, #16]
 800792a:	4620      	mov	r0, r4
 800792c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007930:	080090d0 	.word	0x080090d0
 8007934:	080090e1 	.word	0x080090e1

08007938 <__hi0bits>:
 8007938:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800793c:	4603      	mov	r3, r0
 800793e:	bf36      	itet	cc
 8007940:	0403      	lslcc	r3, r0, #16
 8007942:	2000      	movcs	r0, #0
 8007944:	2010      	movcc	r0, #16
 8007946:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800794a:	bf3c      	itt	cc
 800794c:	021b      	lslcc	r3, r3, #8
 800794e:	3008      	addcc	r0, #8
 8007950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007954:	bf3c      	itt	cc
 8007956:	011b      	lslcc	r3, r3, #4
 8007958:	3004      	addcc	r0, #4
 800795a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800795e:	bf3c      	itt	cc
 8007960:	009b      	lslcc	r3, r3, #2
 8007962:	3002      	addcc	r0, #2
 8007964:	2b00      	cmp	r3, #0
 8007966:	db05      	blt.n	8007974 <__hi0bits+0x3c>
 8007968:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800796c:	f100 0001 	add.w	r0, r0, #1
 8007970:	bf08      	it	eq
 8007972:	2020      	moveq	r0, #32
 8007974:	4770      	bx	lr

08007976 <__lo0bits>:
 8007976:	6803      	ldr	r3, [r0, #0]
 8007978:	4602      	mov	r2, r0
 800797a:	f013 0007 	ands.w	r0, r3, #7
 800797e:	d00b      	beq.n	8007998 <__lo0bits+0x22>
 8007980:	07d9      	lsls	r1, r3, #31
 8007982:	d421      	bmi.n	80079c8 <__lo0bits+0x52>
 8007984:	0798      	lsls	r0, r3, #30
 8007986:	bf49      	itett	mi
 8007988:	085b      	lsrmi	r3, r3, #1
 800798a:	089b      	lsrpl	r3, r3, #2
 800798c:	2001      	movmi	r0, #1
 800798e:	6013      	strmi	r3, [r2, #0]
 8007990:	bf5c      	itt	pl
 8007992:	6013      	strpl	r3, [r2, #0]
 8007994:	2002      	movpl	r0, #2
 8007996:	4770      	bx	lr
 8007998:	b299      	uxth	r1, r3
 800799a:	b909      	cbnz	r1, 80079a0 <__lo0bits+0x2a>
 800799c:	0c1b      	lsrs	r3, r3, #16
 800799e:	2010      	movs	r0, #16
 80079a0:	b2d9      	uxtb	r1, r3
 80079a2:	b909      	cbnz	r1, 80079a8 <__lo0bits+0x32>
 80079a4:	3008      	adds	r0, #8
 80079a6:	0a1b      	lsrs	r3, r3, #8
 80079a8:	0719      	lsls	r1, r3, #28
 80079aa:	bf04      	itt	eq
 80079ac:	091b      	lsreq	r3, r3, #4
 80079ae:	3004      	addeq	r0, #4
 80079b0:	0799      	lsls	r1, r3, #30
 80079b2:	bf04      	itt	eq
 80079b4:	089b      	lsreq	r3, r3, #2
 80079b6:	3002      	addeq	r0, #2
 80079b8:	07d9      	lsls	r1, r3, #31
 80079ba:	d403      	bmi.n	80079c4 <__lo0bits+0x4e>
 80079bc:	085b      	lsrs	r3, r3, #1
 80079be:	f100 0001 	add.w	r0, r0, #1
 80079c2:	d003      	beq.n	80079cc <__lo0bits+0x56>
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	4770      	bx	lr
 80079c8:	2000      	movs	r0, #0
 80079ca:	4770      	bx	lr
 80079cc:	2020      	movs	r0, #32
 80079ce:	4770      	bx	lr

080079d0 <__i2b>:
 80079d0:	b510      	push	{r4, lr}
 80079d2:	460c      	mov	r4, r1
 80079d4:	2101      	movs	r1, #1
 80079d6:	f7ff ff07 	bl	80077e8 <_Balloc>
 80079da:	4602      	mov	r2, r0
 80079dc:	b928      	cbnz	r0, 80079ea <__i2b+0x1a>
 80079de:	4b05      	ldr	r3, [pc, #20]	@ (80079f4 <__i2b+0x24>)
 80079e0:	4805      	ldr	r0, [pc, #20]	@ (80079f8 <__i2b+0x28>)
 80079e2:	f240 1145 	movw	r1, #325	@ 0x145
 80079e6:	f000 fe03 	bl	80085f0 <__assert_func>
 80079ea:	2301      	movs	r3, #1
 80079ec:	6144      	str	r4, [r0, #20]
 80079ee:	6103      	str	r3, [r0, #16]
 80079f0:	bd10      	pop	{r4, pc}
 80079f2:	bf00      	nop
 80079f4:	080090d0 	.word	0x080090d0
 80079f8:	080090e1 	.word	0x080090e1

080079fc <__multiply>:
 80079fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a00:	4617      	mov	r7, r2
 8007a02:	690a      	ldr	r2, [r1, #16]
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	bfa8      	it	ge
 8007a0a:	463b      	movge	r3, r7
 8007a0c:	4689      	mov	r9, r1
 8007a0e:	bfa4      	itt	ge
 8007a10:	460f      	movge	r7, r1
 8007a12:	4699      	movge	r9, r3
 8007a14:	693d      	ldr	r5, [r7, #16]
 8007a16:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	eb05 060a 	add.w	r6, r5, sl
 8007a22:	42b3      	cmp	r3, r6
 8007a24:	b085      	sub	sp, #20
 8007a26:	bfb8      	it	lt
 8007a28:	3101      	addlt	r1, #1
 8007a2a:	f7ff fedd 	bl	80077e8 <_Balloc>
 8007a2e:	b930      	cbnz	r0, 8007a3e <__multiply+0x42>
 8007a30:	4602      	mov	r2, r0
 8007a32:	4b41      	ldr	r3, [pc, #260]	@ (8007b38 <__multiply+0x13c>)
 8007a34:	4841      	ldr	r0, [pc, #260]	@ (8007b3c <__multiply+0x140>)
 8007a36:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a3a:	f000 fdd9 	bl	80085f0 <__assert_func>
 8007a3e:	f100 0414 	add.w	r4, r0, #20
 8007a42:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007a46:	4623      	mov	r3, r4
 8007a48:	2200      	movs	r2, #0
 8007a4a:	4573      	cmp	r3, lr
 8007a4c:	d320      	bcc.n	8007a90 <__multiply+0x94>
 8007a4e:	f107 0814 	add.w	r8, r7, #20
 8007a52:	f109 0114 	add.w	r1, r9, #20
 8007a56:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007a5a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007a5e:	9302      	str	r3, [sp, #8]
 8007a60:	1beb      	subs	r3, r5, r7
 8007a62:	3b15      	subs	r3, #21
 8007a64:	f023 0303 	bic.w	r3, r3, #3
 8007a68:	3304      	adds	r3, #4
 8007a6a:	3715      	adds	r7, #21
 8007a6c:	42bd      	cmp	r5, r7
 8007a6e:	bf38      	it	cc
 8007a70:	2304      	movcc	r3, #4
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	9b02      	ldr	r3, [sp, #8]
 8007a76:	9103      	str	r1, [sp, #12]
 8007a78:	428b      	cmp	r3, r1
 8007a7a:	d80c      	bhi.n	8007a96 <__multiply+0x9a>
 8007a7c:	2e00      	cmp	r6, #0
 8007a7e:	dd03      	ble.n	8007a88 <__multiply+0x8c>
 8007a80:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d055      	beq.n	8007b34 <__multiply+0x138>
 8007a88:	6106      	str	r6, [r0, #16]
 8007a8a:	b005      	add	sp, #20
 8007a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a90:	f843 2b04 	str.w	r2, [r3], #4
 8007a94:	e7d9      	b.n	8007a4a <__multiply+0x4e>
 8007a96:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a9a:	f1ba 0f00 	cmp.w	sl, #0
 8007a9e:	d01f      	beq.n	8007ae0 <__multiply+0xe4>
 8007aa0:	46c4      	mov	ip, r8
 8007aa2:	46a1      	mov	r9, r4
 8007aa4:	2700      	movs	r7, #0
 8007aa6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007aaa:	f8d9 3000 	ldr.w	r3, [r9]
 8007aae:	fa1f fb82 	uxth.w	fp, r2
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ab8:	443b      	add	r3, r7
 8007aba:	f8d9 7000 	ldr.w	r7, [r9]
 8007abe:	0c12      	lsrs	r2, r2, #16
 8007ac0:	0c3f      	lsrs	r7, r7, #16
 8007ac2:	fb0a 7202 	mla	r2, sl, r2, r7
 8007ac6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ad0:	4565      	cmp	r5, ip
 8007ad2:	f849 3b04 	str.w	r3, [r9], #4
 8007ad6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007ada:	d8e4      	bhi.n	8007aa6 <__multiply+0xaa>
 8007adc:	9b01      	ldr	r3, [sp, #4]
 8007ade:	50e7      	str	r7, [r4, r3]
 8007ae0:	9b03      	ldr	r3, [sp, #12]
 8007ae2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ae6:	3104      	adds	r1, #4
 8007ae8:	f1b9 0f00 	cmp.w	r9, #0
 8007aec:	d020      	beq.n	8007b30 <__multiply+0x134>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	4647      	mov	r7, r8
 8007af2:	46a4      	mov	ip, r4
 8007af4:	f04f 0a00 	mov.w	sl, #0
 8007af8:	f8b7 b000 	ldrh.w	fp, [r7]
 8007afc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007b00:	fb09 220b 	mla	r2, r9, fp, r2
 8007b04:	4452      	add	r2, sl
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b0c:	f84c 3b04 	str.w	r3, [ip], #4
 8007b10:	f857 3b04 	ldr.w	r3, [r7], #4
 8007b14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b18:	f8bc 3000 	ldrh.w	r3, [ip]
 8007b1c:	fb09 330a 	mla	r3, r9, sl, r3
 8007b20:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007b24:	42bd      	cmp	r5, r7
 8007b26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b2a:	d8e5      	bhi.n	8007af8 <__multiply+0xfc>
 8007b2c:	9a01      	ldr	r2, [sp, #4]
 8007b2e:	50a3      	str	r3, [r4, r2]
 8007b30:	3404      	adds	r4, #4
 8007b32:	e79f      	b.n	8007a74 <__multiply+0x78>
 8007b34:	3e01      	subs	r6, #1
 8007b36:	e7a1      	b.n	8007a7c <__multiply+0x80>
 8007b38:	080090d0 	.word	0x080090d0
 8007b3c:	080090e1 	.word	0x080090e1

08007b40 <__pow5mult>:
 8007b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b44:	4615      	mov	r5, r2
 8007b46:	f012 0203 	ands.w	r2, r2, #3
 8007b4a:	4607      	mov	r7, r0
 8007b4c:	460e      	mov	r6, r1
 8007b4e:	d007      	beq.n	8007b60 <__pow5mult+0x20>
 8007b50:	4c25      	ldr	r4, [pc, #148]	@ (8007be8 <__pow5mult+0xa8>)
 8007b52:	3a01      	subs	r2, #1
 8007b54:	2300      	movs	r3, #0
 8007b56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b5a:	f7ff fea7 	bl	80078ac <__multadd>
 8007b5e:	4606      	mov	r6, r0
 8007b60:	10ad      	asrs	r5, r5, #2
 8007b62:	d03d      	beq.n	8007be0 <__pow5mult+0xa0>
 8007b64:	69fc      	ldr	r4, [r7, #28]
 8007b66:	b97c      	cbnz	r4, 8007b88 <__pow5mult+0x48>
 8007b68:	2010      	movs	r0, #16
 8007b6a:	f7ff fd87 	bl	800767c <malloc>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	61f8      	str	r0, [r7, #28]
 8007b72:	b928      	cbnz	r0, 8007b80 <__pow5mult+0x40>
 8007b74:	4b1d      	ldr	r3, [pc, #116]	@ (8007bec <__pow5mult+0xac>)
 8007b76:	481e      	ldr	r0, [pc, #120]	@ (8007bf0 <__pow5mult+0xb0>)
 8007b78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b7c:	f000 fd38 	bl	80085f0 <__assert_func>
 8007b80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b84:	6004      	str	r4, [r0, #0]
 8007b86:	60c4      	str	r4, [r0, #12]
 8007b88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b90:	b94c      	cbnz	r4, 8007ba6 <__pow5mult+0x66>
 8007b92:	f240 2171 	movw	r1, #625	@ 0x271
 8007b96:	4638      	mov	r0, r7
 8007b98:	f7ff ff1a 	bl	80079d0 <__i2b>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	6003      	str	r3, [r0, #0]
 8007ba6:	f04f 0900 	mov.w	r9, #0
 8007baa:	07eb      	lsls	r3, r5, #31
 8007bac:	d50a      	bpl.n	8007bc4 <__pow5mult+0x84>
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4622      	mov	r2, r4
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	f7ff ff22 	bl	80079fc <__multiply>
 8007bb8:	4631      	mov	r1, r6
 8007bba:	4680      	mov	r8, r0
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	f7ff fe53 	bl	8007868 <_Bfree>
 8007bc2:	4646      	mov	r6, r8
 8007bc4:	106d      	asrs	r5, r5, #1
 8007bc6:	d00b      	beq.n	8007be0 <__pow5mult+0xa0>
 8007bc8:	6820      	ldr	r0, [r4, #0]
 8007bca:	b938      	cbnz	r0, 8007bdc <__pow5mult+0x9c>
 8007bcc:	4622      	mov	r2, r4
 8007bce:	4621      	mov	r1, r4
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	f7ff ff13 	bl	80079fc <__multiply>
 8007bd6:	6020      	str	r0, [r4, #0]
 8007bd8:	f8c0 9000 	str.w	r9, [r0]
 8007bdc:	4604      	mov	r4, r0
 8007bde:	e7e4      	b.n	8007baa <__pow5mult+0x6a>
 8007be0:	4630      	mov	r0, r6
 8007be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007be6:	bf00      	nop
 8007be8:	08009194 	.word	0x08009194
 8007bec:	08009061 	.word	0x08009061
 8007bf0:	080090e1 	.word	0x080090e1

08007bf4 <__lshift>:
 8007bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	6849      	ldr	r1, [r1, #4]
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c02:	68a3      	ldr	r3, [r4, #8]
 8007c04:	4607      	mov	r7, r0
 8007c06:	4691      	mov	r9, r2
 8007c08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c0c:	f108 0601 	add.w	r6, r8, #1
 8007c10:	42b3      	cmp	r3, r6
 8007c12:	db0b      	blt.n	8007c2c <__lshift+0x38>
 8007c14:	4638      	mov	r0, r7
 8007c16:	f7ff fde7 	bl	80077e8 <_Balloc>
 8007c1a:	4605      	mov	r5, r0
 8007c1c:	b948      	cbnz	r0, 8007c32 <__lshift+0x3e>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	4b28      	ldr	r3, [pc, #160]	@ (8007cc4 <__lshift+0xd0>)
 8007c22:	4829      	ldr	r0, [pc, #164]	@ (8007cc8 <__lshift+0xd4>)
 8007c24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c28:	f000 fce2 	bl	80085f0 <__assert_func>
 8007c2c:	3101      	adds	r1, #1
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	e7ee      	b.n	8007c10 <__lshift+0x1c>
 8007c32:	2300      	movs	r3, #0
 8007c34:	f100 0114 	add.w	r1, r0, #20
 8007c38:	f100 0210 	add.w	r2, r0, #16
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	4553      	cmp	r3, sl
 8007c40:	db33      	blt.n	8007caa <__lshift+0xb6>
 8007c42:	6920      	ldr	r0, [r4, #16]
 8007c44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c48:	f104 0314 	add.w	r3, r4, #20
 8007c4c:	f019 091f 	ands.w	r9, r9, #31
 8007c50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c58:	d02b      	beq.n	8007cb2 <__lshift+0xbe>
 8007c5a:	f1c9 0e20 	rsb	lr, r9, #32
 8007c5e:	468a      	mov	sl, r1
 8007c60:	2200      	movs	r2, #0
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	fa00 f009 	lsl.w	r0, r0, r9
 8007c68:	4310      	orrs	r0, r2
 8007c6a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c72:	459c      	cmp	ip, r3
 8007c74:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c78:	d8f3      	bhi.n	8007c62 <__lshift+0x6e>
 8007c7a:	ebac 0304 	sub.w	r3, ip, r4
 8007c7e:	3b15      	subs	r3, #21
 8007c80:	f023 0303 	bic.w	r3, r3, #3
 8007c84:	3304      	adds	r3, #4
 8007c86:	f104 0015 	add.w	r0, r4, #21
 8007c8a:	4560      	cmp	r0, ip
 8007c8c:	bf88      	it	hi
 8007c8e:	2304      	movhi	r3, #4
 8007c90:	50ca      	str	r2, [r1, r3]
 8007c92:	b10a      	cbz	r2, 8007c98 <__lshift+0xa4>
 8007c94:	f108 0602 	add.w	r6, r8, #2
 8007c98:	3e01      	subs	r6, #1
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	612e      	str	r6, [r5, #16]
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	f7ff fde2 	bl	8007868 <_Bfree>
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007caa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cae:	3301      	adds	r3, #1
 8007cb0:	e7c5      	b.n	8007c3e <__lshift+0x4a>
 8007cb2:	3904      	subs	r1, #4
 8007cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cbc:	459c      	cmp	ip, r3
 8007cbe:	d8f9      	bhi.n	8007cb4 <__lshift+0xc0>
 8007cc0:	e7ea      	b.n	8007c98 <__lshift+0xa4>
 8007cc2:	bf00      	nop
 8007cc4:	080090d0 	.word	0x080090d0
 8007cc8:	080090e1 	.word	0x080090e1

08007ccc <__mcmp>:
 8007ccc:	690a      	ldr	r2, [r1, #16]
 8007cce:	4603      	mov	r3, r0
 8007cd0:	6900      	ldr	r0, [r0, #16]
 8007cd2:	1a80      	subs	r0, r0, r2
 8007cd4:	b530      	push	{r4, r5, lr}
 8007cd6:	d10e      	bne.n	8007cf6 <__mcmp+0x2a>
 8007cd8:	3314      	adds	r3, #20
 8007cda:	3114      	adds	r1, #20
 8007cdc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ce0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ce4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ce8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cec:	4295      	cmp	r5, r2
 8007cee:	d003      	beq.n	8007cf8 <__mcmp+0x2c>
 8007cf0:	d205      	bcs.n	8007cfe <__mcmp+0x32>
 8007cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf6:	bd30      	pop	{r4, r5, pc}
 8007cf8:	42a3      	cmp	r3, r4
 8007cfa:	d3f3      	bcc.n	8007ce4 <__mcmp+0x18>
 8007cfc:	e7fb      	b.n	8007cf6 <__mcmp+0x2a>
 8007cfe:	2001      	movs	r0, #1
 8007d00:	e7f9      	b.n	8007cf6 <__mcmp+0x2a>
	...

08007d04 <__mdiff>:
 8007d04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d08:	4689      	mov	r9, r1
 8007d0a:	4606      	mov	r6, r0
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	4648      	mov	r0, r9
 8007d10:	4614      	mov	r4, r2
 8007d12:	f7ff ffdb 	bl	8007ccc <__mcmp>
 8007d16:	1e05      	subs	r5, r0, #0
 8007d18:	d112      	bne.n	8007d40 <__mdiff+0x3c>
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	f7ff fd63 	bl	80077e8 <_Balloc>
 8007d22:	4602      	mov	r2, r0
 8007d24:	b928      	cbnz	r0, 8007d32 <__mdiff+0x2e>
 8007d26:	4b3f      	ldr	r3, [pc, #252]	@ (8007e24 <__mdiff+0x120>)
 8007d28:	f240 2137 	movw	r1, #567	@ 0x237
 8007d2c:	483e      	ldr	r0, [pc, #248]	@ (8007e28 <__mdiff+0x124>)
 8007d2e:	f000 fc5f 	bl	80085f0 <__assert_func>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d38:	4610      	mov	r0, r2
 8007d3a:	b003      	add	sp, #12
 8007d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d40:	bfbc      	itt	lt
 8007d42:	464b      	movlt	r3, r9
 8007d44:	46a1      	movlt	r9, r4
 8007d46:	4630      	mov	r0, r6
 8007d48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d4c:	bfba      	itte	lt
 8007d4e:	461c      	movlt	r4, r3
 8007d50:	2501      	movlt	r5, #1
 8007d52:	2500      	movge	r5, #0
 8007d54:	f7ff fd48 	bl	80077e8 <_Balloc>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	b918      	cbnz	r0, 8007d64 <__mdiff+0x60>
 8007d5c:	4b31      	ldr	r3, [pc, #196]	@ (8007e24 <__mdiff+0x120>)
 8007d5e:	f240 2145 	movw	r1, #581	@ 0x245
 8007d62:	e7e3      	b.n	8007d2c <__mdiff+0x28>
 8007d64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d68:	6926      	ldr	r6, [r4, #16]
 8007d6a:	60c5      	str	r5, [r0, #12]
 8007d6c:	f109 0310 	add.w	r3, r9, #16
 8007d70:	f109 0514 	add.w	r5, r9, #20
 8007d74:	f104 0e14 	add.w	lr, r4, #20
 8007d78:	f100 0b14 	add.w	fp, r0, #20
 8007d7c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d80:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	46d9      	mov	r9, fp
 8007d88:	f04f 0c00 	mov.w	ip, #0
 8007d8c:	9b01      	ldr	r3, [sp, #4]
 8007d8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d92:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	fa1f f38a 	uxth.w	r3, sl
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	b283      	uxth	r3, r0
 8007da0:	1acb      	subs	r3, r1, r3
 8007da2:	0c00      	lsrs	r0, r0, #16
 8007da4:	4463      	add	r3, ip
 8007da6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007daa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007db4:	4576      	cmp	r6, lr
 8007db6:	f849 3b04 	str.w	r3, [r9], #4
 8007dba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dbe:	d8e5      	bhi.n	8007d8c <__mdiff+0x88>
 8007dc0:	1b33      	subs	r3, r6, r4
 8007dc2:	3b15      	subs	r3, #21
 8007dc4:	f023 0303 	bic.w	r3, r3, #3
 8007dc8:	3415      	adds	r4, #21
 8007dca:	3304      	adds	r3, #4
 8007dcc:	42a6      	cmp	r6, r4
 8007dce:	bf38      	it	cc
 8007dd0:	2304      	movcc	r3, #4
 8007dd2:	441d      	add	r5, r3
 8007dd4:	445b      	add	r3, fp
 8007dd6:	461e      	mov	r6, r3
 8007dd8:	462c      	mov	r4, r5
 8007dda:	4544      	cmp	r4, r8
 8007ddc:	d30e      	bcc.n	8007dfc <__mdiff+0xf8>
 8007dde:	f108 0103 	add.w	r1, r8, #3
 8007de2:	1b49      	subs	r1, r1, r5
 8007de4:	f021 0103 	bic.w	r1, r1, #3
 8007de8:	3d03      	subs	r5, #3
 8007dea:	45a8      	cmp	r8, r5
 8007dec:	bf38      	it	cc
 8007dee:	2100      	movcc	r1, #0
 8007df0:	440b      	add	r3, r1
 8007df2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007df6:	b191      	cbz	r1, 8007e1e <__mdiff+0x11a>
 8007df8:	6117      	str	r7, [r2, #16]
 8007dfa:	e79d      	b.n	8007d38 <__mdiff+0x34>
 8007dfc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e00:	46e6      	mov	lr, ip
 8007e02:	0c08      	lsrs	r0, r1, #16
 8007e04:	fa1c fc81 	uxtah	ip, ip, r1
 8007e08:	4471      	add	r1, lr
 8007e0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e0e:	b289      	uxth	r1, r1
 8007e10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e14:	f846 1b04 	str.w	r1, [r6], #4
 8007e18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e1c:	e7dd      	b.n	8007dda <__mdiff+0xd6>
 8007e1e:	3f01      	subs	r7, #1
 8007e20:	e7e7      	b.n	8007df2 <__mdiff+0xee>
 8007e22:	bf00      	nop
 8007e24:	080090d0 	.word	0x080090d0
 8007e28:	080090e1 	.word	0x080090e1

08007e2c <__d2b>:
 8007e2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e30:	460f      	mov	r7, r1
 8007e32:	2101      	movs	r1, #1
 8007e34:	ec59 8b10 	vmov	r8, r9, d0
 8007e38:	4616      	mov	r6, r2
 8007e3a:	f7ff fcd5 	bl	80077e8 <_Balloc>
 8007e3e:	4604      	mov	r4, r0
 8007e40:	b930      	cbnz	r0, 8007e50 <__d2b+0x24>
 8007e42:	4602      	mov	r2, r0
 8007e44:	4b23      	ldr	r3, [pc, #140]	@ (8007ed4 <__d2b+0xa8>)
 8007e46:	4824      	ldr	r0, [pc, #144]	@ (8007ed8 <__d2b+0xac>)
 8007e48:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e4c:	f000 fbd0 	bl	80085f0 <__assert_func>
 8007e50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e58:	b10d      	cbz	r5, 8007e5e <__d2b+0x32>
 8007e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	f1b8 0300 	subs.w	r3, r8, #0
 8007e64:	d023      	beq.n	8007eae <__d2b+0x82>
 8007e66:	4668      	mov	r0, sp
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	f7ff fd84 	bl	8007976 <__lo0bits>
 8007e6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e72:	b1d0      	cbz	r0, 8007eaa <__d2b+0x7e>
 8007e74:	f1c0 0320 	rsb	r3, r0, #32
 8007e78:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7c:	430b      	orrs	r3, r1
 8007e7e:	40c2      	lsrs	r2, r0
 8007e80:	6163      	str	r3, [r4, #20]
 8007e82:	9201      	str	r2, [sp, #4]
 8007e84:	9b01      	ldr	r3, [sp, #4]
 8007e86:	61a3      	str	r3, [r4, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	bf0c      	ite	eq
 8007e8c:	2201      	moveq	r2, #1
 8007e8e:	2202      	movne	r2, #2
 8007e90:	6122      	str	r2, [r4, #16]
 8007e92:	b1a5      	cbz	r5, 8007ebe <__d2b+0x92>
 8007e94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e98:	4405      	add	r5, r0
 8007e9a:	603d      	str	r5, [r7, #0]
 8007e9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ea0:	6030      	str	r0, [r6, #0]
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	b003      	add	sp, #12
 8007ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eaa:	6161      	str	r1, [r4, #20]
 8007eac:	e7ea      	b.n	8007e84 <__d2b+0x58>
 8007eae:	a801      	add	r0, sp, #4
 8007eb0:	f7ff fd61 	bl	8007976 <__lo0bits>
 8007eb4:	9b01      	ldr	r3, [sp, #4]
 8007eb6:	6163      	str	r3, [r4, #20]
 8007eb8:	3020      	adds	r0, #32
 8007eba:	2201      	movs	r2, #1
 8007ebc:	e7e8      	b.n	8007e90 <__d2b+0x64>
 8007ebe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ec2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ec6:	6038      	str	r0, [r7, #0]
 8007ec8:	6918      	ldr	r0, [r3, #16]
 8007eca:	f7ff fd35 	bl	8007938 <__hi0bits>
 8007ece:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ed2:	e7e5      	b.n	8007ea0 <__d2b+0x74>
 8007ed4:	080090d0 	.word	0x080090d0
 8007ed8:	080090e1 	.word	0x080090e1

08007edc <__ssputs_r>:
 8007edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee0:	688e      	ldr	r6, [r1, #8]
 8007ee2:	461f      	mov	r7, r3
 8007ee4:	42be      	cmp	r6, r7
 8007ee6:	680b      	ldr	r3, [r1, #0]
 8007ee8:	4682      	mov	sl, r0
 8007eea:	460c      	mov	r4, r1
 8007eec:	4690      	mov	r8, r2
 8007eee:	d82d      	bhi.n	8007f4c <__ssputs_r+0x70>
 8007ef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ef4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ef8:	d026      	beq.n	8007f48 <__ssputs_r+0x6c>
 8007efa:	6965      	ldr	r5, [r4, #20]
 8007efc:	6909      	ldr	r1, [r1, #16]
 8007efe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f02:	eba3 0901 	sub.w	r9, r3, r1
 8007f06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f0a:	1c7b      	adds	r3, r7, #1
 8007f0c:	444b      	add	r3, r9
 8007f0e:	106d      	asrs	r5, r5, #1
 8007f10:	429d      	cmp	r5, r3
 8007f12:	bf38      	it	cc
 8007f14:	461d      	movcc	r5, r3
 8007f16:	0553      	lsls	r3, r2, #21
 8007f18:	d527      	bpl.n	8007f6a <__ssputs_r+0x8e>
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	f7ff fbd8 	bl	80076d0 <_malloc_r>
 8007f20:	4606      	mov	r6, r0
 8007f22:	b360      	cbz	r0, 8007f7e <__ssputs_r+0xa2>
 8007f24:	6921      	ldr	r1, [r4, #16]
 8007f26:	464a      	mov	r2, r9
 8007f28:	f000 fb54 	bl	80085d4 <memcpy>
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f36:	81a3      	strh	r3, [r4, #12]
 8007f38:	6126      	str	r6, [r4, #16]
 8007f3a:	6165      	str	r5, [r4, #20]
 8007f3c:	444e      	add	r6, r9
 8007f3e:	eba5 0509 	sub.w	r5, r5, r9
 8007f42:	6026      	str	r6, [r4, #0]
 8007f44:	60a5      	str	r5, [r4, #8]
 8007f46:	463e      	mov	r6, r7
 8007f48:	42be      	cmp	r6, r7
 8007f4a:	d900      	bls.n	8007f4e <__ssputs_r+0x72>
 8007f4c:	463e      	mov	r6, r7
 8007f4e:	6820      	ldr	r0, [r4, #0]
 8007f50:	4632      	mov	r2, r6
 8007f52:	4641      	mov	r1, r8
 8007f54:	f000 faf2 	bl	800853c <memmove>
 8007f58:	68a3      	ldr	r3, [r4, #8]
 8007f5a:	1b9b      	subs	r3, r3, r6
 8007f5c:	60a3      	str	r3, [r4, #8]
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	4433      	add	r3, r6
 8007f62:	6023      	str	r3, [r4, #0]
 8007f64:	2000      	movs	r0, #0
 8007f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	f000 fb84 	bl	8008678 <_realloc_r>
 8007f70:	4606      	mov	r6, r0
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d1e0      	bne.n	8007f38 <__ssputs_r+0x5c>
 8007f76:	6921      	ldr	r1, [r4, #16]
 8007f78:	4650      	mov	r0, sl
 8007f7a:	f7ff fb35 	bl	80075e8 <_free_r>
 8007f7e:	230c      	movs	r3, #12
 8007f80:	f8ca 3000 	str.w	r3, [sl]
 8007f84:	89a3      	ldrh	r3, [r4, #12]
 8007f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f8a:	81a3      	strh	r3, [r4, #12]
 8007f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f90:	e7e9      	b.n	8007f66 <__ssputs_r+0x8a>
	...

08007f94 <_svfiprintf_r>:
 8007f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f98:	4698      	mov	r8, r3
 8007f9a:	898b      	ldrh	r3, [r1, #12]
 8007f9c:	061b      	lsls	r3, r3, #24
 8007f9e:	b09d      	sub	sp, #116	@ 0x74
 8007fa0:	4607      	mov	r7, r0
 8007fa2:	460d      	mov	r5, r1
 8007fa4:	4614      	mov	r4, r2
 8007fa6:	d510      	bpl.n	8007fca <_svfiprintf_r+0x36>
 8007fa8:	690b      	ldr	r3, [r1, #16]
 8007faa:	b973      	cbnz	r3, 8007fca <_svfiprintf_r+0x36>
 8007fac:	2140      	movs	r1, #64	@ 0x40
 8007fae:	f7ff fb8f 	bl	80076d0 <_malloc_r>
 8007fb2:	6028      	str	r0, [r5, #0]
 8007fb4:	6128      	str	r0, [r5, #16]
 8007fb6:	b930      	cbnz	r0, 8007fc6 <_svfiprintf_r+0x32>
 8007fb8:	230c      	movs	r3, #12
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc0:	b01d      	add	sp, #116	@ 0x74
 8007fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc6:	2340      	movs	r3, #64	@ 0x40
 8007fc8:	616b      	str	r3, [r5, #20]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fce:	2320      	movs	r3, #32
 8007fd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fd8:	2330      	movs	r3, #48	@ 0x30
 8007fda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008178 <_svfiprintf_r+0x1e4>
 8007fde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fe2:	f04f 0901 	mov.w	r9, #1
 8007fe6:	4623      	mov	r3, r4
 8007fe8:	469a      	mov	sl, r3
 8007fea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fee:	b10a      	cbz	r2, 8007ff4 <_svfiprintf_r+0x60>
 8007ff0:	2a25      	cmp	r2, #37	@ 0x25
 8007ff2:	d1f9      	bne.n	8007fe8 <_svfiprintf_r+0x54>
 8007ff4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ff8:	d00b      	beq.n	8008012 <_svfiprintf_r+0x7e>
 8007ffa:	465b      	mov	r3, fp
 8007ffc:	4622      	mov	r2, r4
 8007ffe:	4629      	mov	r1, r5
 8008000:	4638      	mov	r0, r7
 8008002:	f7ff ff6b 	bl	8007edc <__ssputs_r>
 8008006:	3001      	adds	r0, #1
 8008008:	f000 80a7 	beq.w	800815a <_svfiprintf_r+0x1c6>
 800800c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800800e:	445a      	add	r2, fp
 8008010:	9209      	str	r2, [sp, #36]	@ 0x24
 8008012:	f89a 3000 	ldrb.w	r3, [sl]
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 809f 	beq.w	800815a <_svfiprintf_r+0x1c6>
 800801c:	2300      	movs	r3, #0
 800801e:	f04f 32ff 	mov.w	r2, #4294967295
 8008022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008026:	f10a 0a01 	add.w	sl, sl, #1
 800802a:	9304      	str	r3, [sp, #16]
 800802c:	9307      	str	r3, [sp, #28]
 800802e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008032:	931a      	str	r3, [sp, #104]	@ 0x68
 8008034:	4654      	mov	r4, sl
 8008036:	2205      	movs	r2, #5
 8008038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800803c:	484e      	ldr	r0, [pc, #312]	@ (8008178 <_svfiprintf_r+0x1e4>)
 800803e:	f7f8 f8c7 	bl	80001d0 <memchr>
 8008042:	9a04      	ldr	r2, [sp, #16]
 8008044:	b9d8      	cbnz	r0, 800807e <_svfiprintf_r+0xea>
 8008046:	06d0      	lsls	r0, r2, #27
 8008048:	bf44      	itt	mi
 800804a:	2320      	movmi	r3, #32
 800804c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008050:	0711      	lsls	r1, r2, #28
 8008052:	bf44      	itt	mi
 8008054:	232b      	movmi	r3, #43	@ 0x2b
 8008056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800805a:	f89a 3000 	ldrb.w	r3, [sl]
 800805e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008060:	d015      	beq.n	800808e <_svfiprintf_r+0xfa>
 8008062:	9a07      	ldr	r2, [sp, #28]
 8008064:	4654      	mov	r4, sl
 8008066:	2000      	movs	r0, #0
 8008068:	f04f 0c0a 	mov.w	ip, #10
 800806c:	4621      	mov	r1, r4
 800806e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008072:	3b30      	subs	r3, #48	@ 0x30
 8008074:	2b09      	cmp	r3, #9
 8008076:	d94b      	bls.n	8008110 <_svfiprintf_r+0x17c>
 8008078:	b1b0      	cbz	r0, 80080a8 <_svfiprintf_r+0x114>
 800807a:	9207      	str	r2, [sp, #28]
 800807c:	e014      	b.n	80080a8 <_svfiprintf_r+0x114>
 800807e:	eba0 0308 	sub.w	r3, r0, r8
 8008082:	fa09 f303 	lsl.w	r3, r9, r3
 8008086:	4313      	orrs	r3, r2
 8008088:	9304      	str	r3, [sp, #16]
 800808a:	46a2      	mov	sl, r4
 800808c:	e7d2      	b.n	8008034 <_svfiprintf_r+0xa0>
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	1d19      	adds	r1, r3, #4
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	9103      	str	r1, [sp, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	bfbb      	ittet	lt
 800809a:	425b      	neglt	r3, r3
 800809c:	f042 0202 	orrlt.w	r2, r2, #2
 80080a0:	9307      	strge	r3, [sp, #28]
 80080a2:	9307      	strlt	r3, [sp, #28]
 80080a4:	bfb8      	it	lt
 80080a6:	9204      	strlt	r2, [sp, #16]
 80080a8:	7823      	ldrb	r3, [r4, #0]
 80080aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80080ac:	d10a      	bne.n	80080c4 <_svfiprintf_r+0x130>
 80080ae:	7863      	ldrb	r3, [r4, #1]
 80080b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080b2:	d132      	bne.n	800811a <_svfiprintf_r+0x186>
 80080b4:	9b03      	ldr	r3, [sp, #12]
 80080b6:	1d1a      	adds	r2, r3, #4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	9203      	str	r2, [sp, #12]
 80080bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080c0:	3402      	adds	r4, #2
 80080c2:	9305      	str	r3, [sp, #20]
 80080c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008188 <_svfiprintf_r+0x1f4>
 80080c8:	7821      	ldrb	r1, [r4, #0]
 80080ca:	2203      	movs	r2, #3
 80080cc:	4650      	mov	r0, sl
 80080ce:	f7f8 f87f 	bl	80001d0 <memchr>
 80080d2:	b138      	cbz	r0, 80080e4 <_svfiprintf_r+0x150>
 80080d4:	9b04      	ldr	r3, [sp, #16]
 80080d6:	eba0 000a 	sub.w	r0, r0, sl
 80080da:	2240      	movs	r2, #64	@ 0x40
 80080dc:	4082      	lsls	r2, r0
 80080de:	4313      	orrs	r3, r2
 80080e0:	3401      	adds	r4, #1
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e8:	4824      	ldr	r0, [pc, #144]	@ (800817c <_svfiprintf_r+0x1e8>)
 80080ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080ee:	2206      	movs	r2, #6
 80080f0:	f7f8 f86e 	bl	80001d0 <memchr>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d036      	beq.n	8008166 <_svfiprintf_r+0x1d2>
 80080f8:	4b21      	ldr	r3, [pc, #132]	@ (8008180 <_svfiprintf_r+0x1ec>)
 80080fa:	bb1b      	cbnz	r3, 8008144 <_svfiprintf_r+0x1b0>
 80080fc:	9b03      	ldr	r3, [sp, #12]
 80080fe:	3307      	adds	r3, #7
 8008100:	f023 0307 	bic.w	r3, r3, #7
 8008104:	3308      	adds	r3, #8
 8008106:	9303      	str	r3, [sp, #12]
 8008108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800810a:	4433      	add	r3, r6
 800810c:	9309      	str	r3, [sp, #36]	@ 0x24
 800810e:	e76a      	b.n	8007fe6 <_svfiprintf_r+0x52>
 8008110:	fb0c 3202 	mla	r2, ip, r2, r3
 8008114:	460c      	mov	r4, r1
 8008116:	2001      	movs	r0, #1
 8008118:	e7a8      	b.n	800806c <_svfiprintf_r+0xd8>
 800811a:	2300      	movs	r3, #0
 800811c:	3401      	adds	r4, #1
 800811e:	9305      	str	r3, [sp, #20]
 8008120:	4619      	mov	r1, r3
 8008122:	f04f 0c0a 	mov.w	ip, #10
 8008126:	4620      	mov	r0, r4
 8008128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800812c:	3a30      	subs	r2, #48	@ 0x30
 800812e:	2a09      	cmp	r2, #9
 8008130:	d903      	bls.n	800813a <_svfiprintf_r+0x1a6>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0c6      	beq.n	80080c4 <_svfiprintf_r+0x130>
 8008136:	9105      	str	r1, [sp, #20]
 8008138:	e7c4      	b.n	80080c4 <_svfiprintf_r+0x130>
 800813a:	fb0c 2101 	mla	r1, ip, r1, r2
 800813e:	4604      	mov	r4, r0
 8008140:	2301      	movs	r3, #1
 8008142:	e7f0      	b.n	8008126 <_svfiprintf_r+0x192>
 8008144:	ab03      	add	r3, sp, #12
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	462a      	mov	r2, r5
 800814a:	4b0e      	ldr	r3, [pc, #56]	@ (8008184 <_svfiprintf_r+0x1f0>)
 800814c:	a904      	add	r1, sp, #16
 800814e:	4638      	mov	r0, r7
 8008150:	f7fd fcae 	bl	8005ab0 <_printf_float>
 8008154:	1c42      	adds	r2, r0, #1
 8008156:	4606      	mov	r6, r0
 8008158:	d1d6      	bne.n	8008108 <_svfiprintf_r+0x174>
 800815a:	89ab      	ldrh	r3, [r5, #12]
 800815c:	065b      	lsls	r3, r3, #25
 800815e:	f53f af2d 	bmi.w	8007fbc <_svfiprintf_r+0x28>
 8008162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008164:	e72c      	b.n	8007fc0 <_svfiprintf_r+0x2c>
 8008166:	ab03      	add	r3, sp, #12
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	462a      	mov	r2, r5
 800816c:	4b05      	ldr	r3, [pc, #20]	@ (8008184 <_svfiprintf_r+0x1f0>)
 800816e:	a904      	add	r1, sp, #16
 8008170:	4638      	mov	r0, r7
 8008172:	f7fd ff35 	bl	8005fe0 <_printf_i>
 8008176:	e7ed      	b.n	8008154 <_svfiprintf_r+0x1c0>
 8008178:	0800913a 	.word	0x0800913a
 800817c:	08009144 	.word	0x08009144
 8008180:	08005ab1 	.word	0x08005ab1
 8008184:	08007edd 	.word	0x08007edd
 8008188:	08009140 	.word	0x08009140

0800818c <__sfputc_r>:
 800818c:	6893      	ldr	r3, [r2, #8]
 800818e:	3b01      	subs	r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	b410      	push	{r4}
 8008194:	6093      	str	r3, [r2, #8]
 8008196:	da08      	bge.n	80081aa <__sfputc_r+0x1e>
 8008198:	6994      	ldr	r4, [r2, #24]
 800819a:	42a3      	cmp	r3, r4
 800819c:	db01      	blt.n	80081a2 <__sfputc_r+0x16>
 800819e:	290a      	cmp	r1, #10
 80081a0:	d103      	bne.n	80081aa <__sfputc_r+0x1e>
 80081a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081a6:	f7fe bab3 	b.w	8006710 <__swbuf_r>
 80081aa:	6813      	ldr	r3, [r2, #0]
 80081ac:	1c58      	adds	r0, r3, #1
 80081ae:	6010      	str	r0, [r2, #0]
 80081b0:	7019      	strb	r1, [r3, #0]
 80081b2:	4608      	mov	r0, r1
 80081b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <__sfputs_r>:
 80081ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081bc:	4606      	mov	r6, r0
 80081be:	460f      	mov	r7, r1
 80081c0:	4614      	mov	r4, r2
 80081c2:	18d5      	adds	r5, r2, r3
 80081c4:	42ac      	cmp	r4, r5
 80081c6:	d101      	bne.n	80081cc <__sfputs_r+0x12>
 80081c8:	2000      	movs	r0, #0
 80081ca:	e007      	b.n	80081dc <__sfputs_r+0x22>
 80081cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d0:	463a      	mov	r2, r7
 80081d2:	4630      	mov	r0, r6
 80081d4:	f7ff ffda 	bl	800818c <__sfputc_r>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d1f3      	bne.n	80081c4 <__sfputs_r+0xa>
 80081dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081e0 <_vfiprintf_r>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	460d      	mov	r5, r1
 80081e6:	b09d      	sub	sp, #116	@ 0x74
 80081e8:	4614      	mov	r4, r2
 80081ea:	4698      	mov	r8, r3
 80081ec:	4606      	mov	r6, r0
 80081ee:	b118      	cbz	r0, 80081f8 <_vfiprintf_r+0x18>
 80081f0:	6a03      	ldr	r3, [r0, #32]
 80081f2:	b90b      	cbnz	r3, 80081f8 <_vfiprintf_r+0x18>
 80081f4:	f7fe f95e 	bl	80064b4 <__sinit>
 80081f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081fa:	07d9      	lsls	r1, r3, #31
 80081fc:	d405      	bmi.n	800820a <_vfiprintf_r+0x2a>
 80081fe:	89ab      	ldrh	r3, [r5, #12]
 8008200:	059a      	lsls	r2, r3, #22
 8008202:	d402      	bmi.n	800820a <_vfiprintf_r+0x2a>
 8008204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008206:	f7fe fb94 	bl	8006932 <__retarget_lock_acquire_recursive>
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	071b      	lsls	r3, r3, #28
 800820e:	d501      	bpl.n	8008214 <_vfiprintf_r+0x34>
 8008210:	692b      	ldr	r3, [r5, #16]
 8008212:	b99b      	cbnz	r3, 800823c <_vfiprintf_r+0x5c>
 8008214:	4629      	mov	r1, r5
 8008216:	4630      	mov	r0, r6
 8008218:	f7fe fab8 	bl	800678c <__swsetup_r>
 800821c:	b170      	cbz	r0, 800823c <_vfiprintf_r+0x5c>
 800821e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008220:	07dc      	lsls	r4, r3, #31
 8008222:	d504      	bpl.n	800822e <_vfiprintf_r+0x4e>
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	b01d      	add	sp, #116	@ 0x74
 800822a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822e:	89ab      	ldrh	r3, [r5, #12]
 8008230:	0598      	lsls	r0, r3, #22
 8008232:	d4f7      	bmi.n	8008224 <_vfiprintf_r+0x44>
 8008234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008236:	f7fe fb7d 	bl	8006934 <__retarget_lock_release_recursive>
 800823a:	e7f3      	b.n	8008224 <_vfiprintf_r+0x44>
 800823c:	2300      	movs	r3, #0
 800823e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008240:	2320      	movs	r3, #32
 8008242:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008246:	f8cd 800c 	str.w	r8, [sp, #12]
 800824a:	2330      	movs	r3, #48	@ 0x30
 800824c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80083fc <_vfiprintf_r+0x21c>
 8008250:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008254:	f04f 0901 	mov.w	r9, #1
 8008258:	4623      	mov	r3, r4
 800825a:	469a      	mov	sl, r3
 800825c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008260:	b10a      	cbz	r2, 8008266 <_vfiprintf_r+0x86>
 8008262:	2a25      	cmp	r2, #37	@ 0x25
 8008264:	d1f9      	bne.n	800825a <_vfiprintf_r+0x7a>
 8008266:	ebba 0b04 	subs.w	fp, sl, r4
 800826a:	d00b      	beq.n	8008284 <_vfiprintf_r+0xa4>
 800826c:	465b      	mov	r3, fp
 800826e:	4622      	mov	r2, r4
 8008270:	4629      	mov	r1, r5
 8008272:	4630      	mov	r0, r6
 8008274:	f7ff ffa1 	bl	80081ba <__sfputs_r>
 8008278:	3001      	adds	r0, #1
 800827a:	f000 80a7 	beq.w	80083cc <_vfiprintf_r+0x1ec>
 800827e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008280:	445a      	add	r2, fp
 8008282:	9209      	str	r2, [sp, #36]	@ 0x24
 8008284:	f89a 3000 	ldrb.w	r3, [sl]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 809f 	beq.w	80083cc <_vfiprintf_r+0x1ec>
 800828e:	2300      	movs	r3, #0
 8008290:	f04f 32ff 	mov.w	r2, #4294967295
 8008294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008298:	f10a 0a01 	add.w	sl, sl, #1
 800829c:	9304      	str	r3, [sp, #16]
 800829e:	9307      	str	r3, [sp, #28]
 80082a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80082a6:	4654      	mov	r4, sl
 80082a8:	2205      	movs	r2, #5
 80082aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ae:	4853      	ldr	r0, [pc, #332]	@ (80083fc <_vfiprintf_r+0x21c>)
 80082b0:	f7f7 ff8e 	bl	80001d0 <memchr>
 80082b4:	9a04      	ldr	r2, [sp, #16]
 80082b6:	b9d8      	cbnz	r0, 80082f0 <_vfiprintf_r+0x110>
 80082b8:	06d1      	lsls	r1, r2, #27
 80082ba:	bf44      	itt	mi
 80082bc:	2320      	movmi	r3, #32
 80082be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082c2:	0713      	lsls	r3, r2, #28
 80082c4:	bf44      	itt	mi
 80082c6:	232b      	movmi	r3, #43	@ 0x2b
 80082c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082cc:	f89a 3000 	ldrb.w	r3, [sl]
 80082d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082d2:	d015      	beq.n	8008300 <_vfiprintf_r+0x120>
 80082d4:	9a07      	ldr	r2, [sp, #28]
 80082d6:	4654      	mov	r4, sl
 80082d8:	2000      	movs	r0, #0
 80082da:	f04f 0c0a 	mov.w	ip, #10
 80082de:	4621      	mov	r1, r4
 80082e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082e4:	3b30      	subs	r3, #48	@ 0x30
 80082e6:	2b09      	cmp	r3, #9
 80082e8:	d94b      	bls.n	8008382 <_vfiprintf_r+0x1a2>
 80082ea:	b1b0      	cbz	r0, 800831a <_vfiprintf_r+0x13a>
 80082ec:	9207      	str	r2, [sp, #28]
 80082ee:	e014      	b.n	800831a <_vfiprintf_r+0x13a>
 80082f0:	eba0 0308 	sub.w	r3, r0, r8
 80082f4:	fa09 f303 	lsl.w	r3, r9, r3
 80082f8:	4313      	orrs	r3, r2
 80082fa:	9304      	str	r3, [sp, #16]
 80082fc:	46a2      	mov	sl, r4
 80082fe:	e7d2      	b.n	80082a6 <_vfiprintf_r+0xc6>
 8008300:	9b03      	ldr	r3, [sp, #12]
 8008302:	1d19      	adds	r1, r3, #4
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	9103      	str	r1, [sp, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	bfbb      	ittet	lt
 800830c:	425b      	neglt	r3, r3
 800830e:	f042 0202 	orrlt.w	r2, r2, #2
 8008312:	9307      	strge	r3, [sp, #28]
 8008314:	9307      	strlt	r3, [sp, #28]
 8008316:	bfb8      	it	lt
 8008318:	9204      	strlt	r2, [sp, #16]
 800831a:	7823      	ldrb	r3, [r4, #0]
 800831c:	2b2e      	cmp	r3, #46	@ 0x2e
 800831e:	d10a      	bne.n	8008336 <_vfiprintf_r+0x156>
 8008320:	7863      	ldrb	r3, [r4, #1]
 8008322:	2b2a      	cmp	r3, #42	@ 0x2a
 8008324:	d132      	bne.n	800838c <_vfiprintf_r+0x1ac>
 8008326:	9b03      	ldr	r3, [sp, #12]
 8008328:	1d1a      	adds	r2, r3, #4
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	9203      	str	r2, [sp, #12]
 800832e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008332:	3402      	adds	r4, #2
 8008334:	9305      	str	r3, [sp, #20]
 8008336:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800840c <_vfiprintf_r+0x22c>
 800833a:	7821      	ldrb	r1, [r4, #0]
 800833c:	2203      	movs	r2, #3
 800833e:	4650      	mov	r0, sl
 8008340:	f7f7 ff46 	bl	80001d0 <memchr>
 8008344:	b138      	cbz	r0, 8008356 <_vfiprintf_r+0x176>
 8008346:	9b04      	ldr	r3, [sp, #16]
 8008348:	eba0 000a 	sub.w	r0, r0, sl
 800834c:	2240      	movs	r2, #64	@ 0x40
 800834e:	4082      	lsls	r2, r0
 8008350:	4313      	orrs	r3, r2
 8008352:	3401      	adds	r4, #1
 8008354:	9304      	str	r3, [sp, #16]
 8008356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800835a:	4829      	ldr	r0, [pc, #164]	@ (8008400 <_vfiprintf_r+0x220>)
 800835c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008360:	2206      	movs	r2, #6
 8008362:	f7f7 ff35 	bl	80001d0 <memchr>
 8008366:	2800      	cmp	r0, #0
 8008368:	d03f      	beq.n	80083ea <_vfiprintf_r+0x20a>
 800836a:	4b26      	ldr	r3, [pc, #152]	@ (8008404 <_vfiprintf_r+0x224>)
 800836c:	bb1b      	cbnz	r3, 80083b6 <_vfiprintf_r+0x1d6>
 800836e:	9b03      	ldr	r3, [sp, #12]
 8008370:	3307      	adds	r3, #7
 8008372:	f023 0307 	bic.w	r3, r3, #7
 8008376:	3308      	adds	r3, #8
 8008378:	9303      	str	r3, [sp, #12]
 800837a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800837c:	443b      	add	r3, r7
 800837e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008380:	e76a      	b.n	8008258 <_vfiprintf_r+0x78>
 8008382:	fb0c 3202 	mla	r2, ip, r2, r3
 8008386:	460c      	mov	r4, r1
 8008388:	2001      	movs	r0, #1
 800838a:	e7a8      	b.n	80082de <_vfiprintf_r+0xfe>
 800838c:	2300      	movs	r3, #0
 800838e:	3401      	adds	r4, #1
 8008390:	9305      	str	r3, [sp, #20]
 8008392:	4619      	mov	r1, r3
 8008394:	f04f 0c0a 	mov.w	ip, #10
 8008398:	4620      	mov	r0, r4
 800839a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800839e:	3a30      	subs	r2, #48	@ 0x30
 80083a0:	2a09      	cmp	r2, #9
 80083a2:	d903      	bls.n	80083ac <_vfiprintf_r+0x1cc>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d0c6      	beq.n	8008336 <_vfiprintf_r+0x156>
 80083a8:	9105      	str	r1, [sp, #20]
 80083aa:	e7c4      	b.n	8008336 <_vfiprintf_r+0x156>
 80083ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80083b0:	4604      	mov	r4, r0
 80083b2:	2301      	movs	r3, #1
 80083b4:	e7f0      	b.n	8008398 <_vfiprintf_r+0x1b8>
 80083b6:	ab03      	add	r3, sp, #12
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	462a      	mov	r2, r5
 80083bc:	4b12      	ldr	r3, [pc, #72]	@ (8008408 <_vfiprintf_r+0x228>)
 80083be:	a904      	add	r1, sp, #16
 80083c0:	4630      	mov	r0, r6
 80083c2:	f7fd fb75 	bl	8005ab0 <_printf_float>
 80083c6:	4607      	mov	r7, r0
 80083c8:	1c78      	adds	r0, r7, #1
 80083ca:	d1d6      	bne.n	800837a <_vfiprintf_r+0x19a>
 80083cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083ce:	07d9      	lsls	r1, r3, #31
 80083d0:	d405      	bmi.n	80083de <_vfiprintf_r+0x1fe>
 80083d2:	89ab      	ldrh	r3, [r5, #12]
 80083d4:	059a      	lsls	r2, r3, #22
 80083d6:	d402      	bmi.n	80083de <_vfiprintf_r+0x1fe>
 80083d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083da:	f7fe faab 	bl	8006934 <__retarget_lock_release_recursive>
 80083de:	89ab      	ldrh	r3, [r5, #12]
 80083e0:	065b      	lsls	r3, r3, #25
 80083e2:	f53f af1f 	bmi.w	8008224 <_vfiprintf_r+0x44>
 80083e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083e8:	e71e      	b.n	8008228 <_vfiprintf_r+0x48>
 80083ea:	ab03      	add	r3, sp, #12
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	462a      	mov	r2, r5
 80083f0:	4b05      	ldr	r3, [pc, #20]	@ (8008408 <_vfiprintf_r+0x228>)
 80083f2:	a904      	add	r1, sp, #16
 80083f4:	4630      	mov	r0, r6
 80083f6:	f7fd fdf3 	bl	8005fe0 <_printf_i>
 80083fa:	e7e4      	b.n	80083c6 <_vfiprintf_r+0x1e6>
 80083fc:	0800913a 	.word	0x0800913a
 8008400:	08009144 	.word	0x08009144
 8008404:	08005ab1 	.word	0x08005ab1
 8008408:	080081bb 	.word	0x080081bb
 800840c:	08009140 	.word	0x08009140

08008410 <__swhatbuf_r>:
 8008410:	b570      	push	{r4, r5, r6, lr}
 8008412:	460c      	mov	r4, r1
 8008414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008418:	2900      	cmp	r1, #0
 800841a:	b096      	sub	sp, #88	@ 0x58
 800841c:	4615      	mov	r5, r2
 800841e:	461e      	mov	r6, r3
 8008420:	da0d      	bge.n	800843e <__swhatbuf_r+0x2e>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008428:	f04f 0100 	mov.w	r1, #0
 800842c:	bf14      	ite	ne
 800842e:	2340      	movne	r3, #64	@ 0x40
 8008430:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008434:	2000      	movs	r0, #0
 8008436:	6031      	str	r1, [r6, #0]
 8008438:	602b      	str	r3, [r5, #0]
 800843a:	b016      	add	sp, #88	@ 0x58
 800843c:	bd70      	pop	{r4, r5, r6, pc}
 800843e:	466a      	mov	r2, sp
 8008440:	f000 f896 	bl	8008570 <_fstat_r>
 8008444:	2800      	cmp	r0, #0
 8008446:	dbec      	blt.n	8008422 <__swhatbuf_r+0x12>
 8008448:	9901      	ldr	r1, [sp, #4]
 800844a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800844e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008452:	4259      	negs	r1, r3
 8008454:	4159      	adcs	r1, r3
 8008456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800845a:	e7eb      	b.n	8008434 <__swhatbuf_r+0x24>

0800845c <__smakebuf_r>:
 800845c:	898b      	ldrh	r3, [r1, #12]
 800845e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008460:	079d      	lsls	r5, r3, #30
 8008462:	4606      	mov	r6, r0
 8008464:	460c      	mov	r4, r1
 8008466:	d507      	bpl.n	8008478 <__smakebuf_r+0x1c>
 8008468:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	6123      	str	r3, [r4, #16]
 8008470:	2301      	movs	r3, #1
 8008472:	6163      	str	r3, [r4, #20]
 8008474:	b003      	add	sp, #12
 8008476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008478:	ab01      	add	r3, sp, #4
 800847a:	466a      	mov	r2, sp
 800847c:	f7ff ffc8 	bl	8008410 <__swhatbuf_r>
 8008480:	9f00      	ldr	r7, [sp, #0]
 8008482:	4605      	mov	r5, r0
 8008484:	4639      	mov	r1, r7
 8008486:	4630      	mov	r0, r6
 8008488:	f7ff f922 	bl	80076d0 <_malloc_r>
 800848c:	b948      	cbnz	r0, 80084a2 <__smakebuf_r+0x46>
 800848e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008492:	059a      	lsls	r2, r3, #22
 8008494:	d4ee      	bmi.n	8008474 <__smakebuf_r+0x18>
 8008496:	f023 0303 	bic.w	r3, r3, #3
 800849a:	f043 0302 	orr.w	r3, r3, #2
 800849e:	81a3      	strh	r3, [r4, #12]
 80084a0:	e7e2      	b.n	8008468 <__smakebuf_r+0xc>
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	6020      	str	r0, [r4, #0]
 80084a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084aa:	81a3      	strh	r3, [r4, #12]
 80084ac:	9b01      	ldr	r3, [sp, #4]
 80084ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084b2:	b15b      	cbz	r3, 80084cc <__smakebuf_r+0x70>
 80084b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084b8:	4630      	mov	r0, r6
 80084ba:	f000 f86b 	bl	8008594 <_isatty_r>
 80084be:	b128      	cbz	r0, 80084cc <__smakebuf_r+0x70>
 80084c0:	89a3      	ldrh	r3, [r4, #12]
 80084c2:	f023 0303 	bic.w	r3, r3, #3
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	89a3      	ldrh	r3, [r4, #12]
 80084ce:	431d      	orrs	r5, r3
 80084d0:	81a5      	strh	r5, [r4, #12]
 80084d2:	e7cf      	b.n	8008474 <__smakebuf_r+0x18>

080084d4 <_putc_r>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	460d      	mov	r5, r1
 80084d8:	4614      	mov	r4, r2
 80084da:	4606      	mov	r6, r0
 80084dc:	b118      	cbz	r0, 80084e6 <_putc_r+0x12>
 80084de:	6a03      	ldr	r3, [r0, #32]
 80084e0:	b90b      	cbnz	r3, 80084e6 <_putc_r+0x12>
 80084e2:	f7fd ffe7 	bl	80064b4 <__sinit>
 80084e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084e8:	07d8      	lsls	r0, r3, #31
 80084ea:	d405      	bmi.n	80084f8 <_putc_r+0x24>
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	0599      	lsls	r1, r3, #22
 80084f0:	d402      	bmi.n	80084f8 <_putc_r+0x24>
 80084f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084f4:	f7fe fa1d 	bl	8006932 <__retarget_lock_acquire_recursive>
 80084f8:	68a3      	ldr	r3, [r4, #8]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	60a3      	str	r3, [r4, #8]
 8008500:	da05      	bge.n	800850e <_putc_r+0x3a>
 8008502:	69a2      	ldr	r2, [r4, #24]
 8008504:	4293      	cmp	r3, r2
 8008506:	db12      	blt.n	800852e <_putc_r+0x5a>
 8008508:	b2eb      	uxtb	r3, r5
 800850a:	2b0a      	cmp	r3, #10
 800850c:	d00f      	beq.n	800852e <_putc_r+0x5a>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	1c5a      	adds	r2, r3, #1
 8008512:	6022      	str	r2, [r4, #0]
 8008514:	701d      	strb	r5, [r3, #0]
 8008516:	b2ed      	uxtb	r5, r5
 8008518:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800851a:	07da      	lsls	r2, r3, #31
 800851c:	d405      	bmi.n	800852a <_putc_r+0x56>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	059b      	lsls	r3, r3, #22
 8008522:	d402      	bmi.n	800852a <_putc_r+0x56>
 8008524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008526:	f7fe fa05 	bl	8006934 <__retarget_lock_release_recursive>
 800852a:	4628      	mov	r0, r5
 800852c:	bd70      	pop	{r4, r5, r6, pc}
 800852e:	4629      	mov	r1, r5
 8008530:	4622      	mov	r2, r4
 8008532:	4630      	mov	r0, r6
 8008534:	f7fe f8ec 	bl	8006710 <__swbuf_r>
 8008538:	4605      	mov	r5, r0
 800853a:	e7ed      	b.n	8008518 <_putc_r+0x44>

0800853c <memmove>:
 800853c:	4288      	cmp	r0, r1
 800853e:	b510      	push	{r4, lr}
 8008540:	eb01 0402 	add.w	r4, r1, r2
 8008544:	d902      	bls.n	800854c <memmove+0x10>
 8008546:	4284      	cmp	r4, r0
 8008548:	4623      	mov	r3, r4
 800854a:	d807      	bhi.n	800855c <memmove+0x20>
 800854c:	1e43      	subs	r3, r0, #1
 800854e:	42a1      	cmp	r1, r4
 8008550:	d008      	beq.n	8008564 <memmove+0x28>
 8008552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800855a:	e7f8      	b.n	800854e <memmove+0x12>
 800855c:	4402      	add	r2, r0
 800855e:	4601      	mov	r1, r0
 8008560:	428a      	cmp	r2, r1
 8008562:	d100      	bne.n	8008566 <memmove+0x2a>
 8008564:	bd10      	pop	{r4, pc}
 8008566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800856a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800856e:	e7f7      	b.n	8008560 <memmove+0x24>

08008570 <_fstat_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4d07      	ldr	r5, [pc, #28]	@ (8008590 <_fstat_r+0x20>)
 8008574:	2300      	movs	r3, #0
 8008576:	4604      	mov	r4, r0
 8008578:	4608      	mov	r0, r1
 800857a:	4611      	mov	r1, r2
 800857c:	602b      	str	r3, [r5, #0]
 800857e:	f7f9 fdbd 	bl	80020fc <_fstat>
 8008582:	1c43      	adds	r3, r0, #1
 8008584:	d102      	bne.n	800858c <_fstat_r+0x1c>
 8008586:	682b      	ldr	r3, [r5, #0]
 8008588:	b103      	cbz	r3, 800858c <_fstat_r+0x1c>
 800858a:	6023      	str	r3, [r4, #0]
 800858c:	bd38      	pop	{r3, r4, r5, pc}
 800858e:	bf00      	nop
 8008590:	200006d0 	.word	0x200006d0

08008594 <_isatty_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4d06      	ldr	r5, [pc, #24]	@ (80085b0 <_isatty_r+0x1c>)
 8008598:	2300      	movs	r3, #0
 800859a:	4604      	mov	r4, r0
 800859c:	4608      	mov	r0, r1
 800859e:	602b      	str	r3, [r5, #0]
 80085a0:	f7f9 fdbc 	bl	800211c <_isatty>
 80085a4:	1c43      	adds	r3, r0, #1
 80085a6:	d102      	bne.n	80085ae <_isatty_r+0x1a>
 80085a8:	682b      	ldr	r3, [r5, #0]
 80085aa:	b103      	cbz	r3, 80085ae <_isatty_r+0x1a>
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	200006d0 	.word	0x200006d0

080085b4 <_sbrk_r>:
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	4d06      	ldr	r5, [pc, #24]	@ (80085d0 <_sbrk_r+0x1c>)
 80085b8:	2300      	movs	r3, #0
 80085ba:	4604      	mov	r4, r0
 80085bc:	4608      	mov	r0, r1
 80085be:	602b      	str	r3, [r5, #0]
 80085c0:	f7f9 fdc4 	bl	800214c <_sbrk>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	d102      	bne.n	80085ce <_sbrk_r+0x1a>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	b103      	cbz	r3, 80085ce <_sbrk_r+0x1a>
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	bd38      	pop	{r3, r4, r5, pc}
 80085d0:	200006d0 	.word	0x200006d0

080085d4 <memcpy>:
 80085d4:	440a      	add	r2, r1
 80085d6:	4291      	cmp	r1, r2
 80085d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085dc:	d100      	bne.n	80085e0 <memcpy+0xc>
 80085de:	4770      	bx	lr
 80085e0:	b510      	push	{r4, lr}
 80085e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ea:	4291      	cmp	r1, r2
 80085ec:	d1f9      	bne.n	80085e2 <memcpy+0xe>
 80085ee:	bd10      	pop	{r4, pc}

080085f0 <__assert_func>:
 80085f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085f2:	4614      	mov	r4, r2
 80085f4:	461a      	mov	r2, r3
 80085f6:	4b09      	ldr	r3, [pc, #36]	@ (800861c <__assert_func+0x2c>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4605      	mov	r5, r0
 80085fc:	68d8      	ldr	r0, [r3, #12]
 80085fe:	b14c      	cbz	r4, 8008614 <__assert_func+0x24>
 8008600:	4b07      	ldr	r3, [pc, #28]	@ (8008620 <__assert_func+0x30>)
 8008602:	9100      	str	r1, [sp, #0]
 8008604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008608:	4906      	ldr	r1, [pc, #24]	@ (8008624 <__assert_func+0x34>)
 800860a:	462b      	mov	r3, r5
 800860c:	f000 f870 	bl	80086f0 <fiprintf>
 8008610:	f000 f880 	bl	8008714 <abort>
 8008614:	4b04      	ldr	r3, [pc, #16]	@ (8008628 <__assert_func+0x38>)
 8008616:	461c      	mov	r4, r3
 8008618:	e7f3      	b.n	8008602 <__assert_func+0x12>
 800861a:	bf00      	nop
 800861c:	2000001c 	.word	0x2000001c
 8008620:	08009155 	.word	0x08009155
 8008624:	08009162 	.word	0x08009162
 8008628:	08009190 	.word	0x08009190

0800862c <_calloc_r>:
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	fba1 5402 	umull	r5, r4, r1, r2
 8008632:	b934      	cbnz	r4, 8008642 <_calloc_r+0x16>
 8008634:	4629      	mov	r1, r5
 8008636:	f7ff f84b 	bl	80076d0 <_malloc_r>
 800863a:	4606      	mov	r6, r0
 800863c:	b928      	cbnz	r0, 800864a <_calloc_r+0x1e>
 800863e:	4630      	mov	r0, r6
 8008640:	bd70      	pop	{r4, r5, r6, pc}
 8008642:	220c      	movs	r2, #12
 8008644:	6002      	str	r2, [r0, #0]
 8008646:	2600      	movs	r6, #0
 8008648:	e7f9      	b.n	800863e <_calloc_r+0x12>
 800864a:	462a      	mov	r2, r5
 800864c:	4621      	mov	r1, r4
 800864e:	f7fe f8f3 	bl	8006838 <memset>
 8008652:	e7f4      	b.n	800863e <_calloc_r+0x12>

08008654 <__ascii_mbtowc>:
 8008654:	b082      	sub	sp, #8
 8008656:	b901      	cbnz	r1, 800865a <__ascii_mbtowc+0x6>
 8008658:	a901      	add	r1, sp, #4
 800865a:	b142      	cbz	r2, 800866e <__ascii_mbtowc+0x1a>
 800865c:	b14b      	cbz	r3, 8008672 <__ascii_mbtowc+0x1e>
 800865e:	7813      	ldrb	r3, [r2, #0]
 8008660:	600b      	str	r3, [r1, #0]
 8008662:	7812      	ldrb	r2, [r2, #0]
 8008664:	1e10      	subs	r0, r2, #0
 8008666:	bf18      	it	ne
 8008668:	2001      	movne	r0, #1
 800866a:	b002      	add	sp, #8
 800866c:	4770      	bx	lr
 800866e:	4610      	mov	r0, r2
 8008670:	e7fb      	b.n	800866a <__ascii_mbtowc+0x16>
 8008672:	f06f 0001 	mvn.w	r0, #1
 8008676:	e7f8      	b.n	800866a <__ascii_mbtowc+0x16>

08008678 <_realloc_r>:
 8008678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800867c:	4607      	mov	r7, r0
 800867e:	4614      	mov	r4, r2
 8008680:	460d      	mov	r5, r1
 8008682:	b921      	cbnz	r1, 800868e <_realloc_r+0x16>
 8008684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008688:	4611      	mov	r1, r2
 800868a:	f7ff b821 	b.w	80076d0 <_malloc_r>
 800868e:	b92a      	cbnz	r2, 800869c <_realloc_r+0x24>
 8008690:	f7fe ffaa 	bl	80075e8 <_free_r>
 8008694:	4625      	mov	r5, r4
 8008696:	4628      	mov	r0, r5
 8008698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800869c:	f000 f841 	bl	8008722 <_malloc_usable_size_r>
 80086a0:	4284      	cmp	r4, r0
 80086a2:	4606      	mov	r6, r0
 80086a4:	d802      	bhi.n	80086ac <_realloc_r+0x34>
 80086a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086aa:	d8f4      	bhi.n	8008696 <_realloc_r+0x1e>
 80086ac:	4621      	mov	r1, r4
 80086ae:	4638      	mov	r0, r7
 80086b0:	f7ff f80e 	bl	80076d0 <_malloc_r>
 80086b4:	4680      	mov	r8, r0
 80086b6:	b908      	cbnz	r0, 80086bc <_realloc_r+0x44>
 80086b8:	4645      	mov	r5, r8
 80086ba:	e7ec      	b.n	8008696 <_realloc_r+0x1e>
 80086bc:	42b4      	cmp	r4, r6
 80086be:	4622      	mov	r2, r4
 80086c0:	4629      	mov	r1, r5
 80086c2:	bf28      	it	cs
 80086c4:	4632      	movcs	r2, r6
 80086c6:	f7ff ff85 	bl	80085d4 <memcpy>
 80086ca:	4629      	mov	r1, r5
 80086cc:	4638      	mov	r0, r7
 80086ce:	f7fe ff8b 	bl	80075e8 <_free_r>
 80086d2:	e7f1      	b.n	80086b8 <_realloc_r+0x40>

080086d4 <__ascii_wctomb>:
 80086d4:	4603      	mov	r3, r0
 80086d6:	4608      	mov	r0, r1
 80086d8:	b141      	cbz	r1, 80086ec <__ascii_wctomb+0x18>
 80086da:	2aff      	cmp	r2, #255	@ 0xff
 80086dc:	d904      	bls.n	80086e8 <__ascii_wctomb+0x14>
 80086de:	228a      	movs	r2, #138	@ 0x8a
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	f04f 30ff 	mov.w	r0, #4294967295
 80086e6:	4770      	bx	lr
 80086e8:	700a      	strb	r2, [r1, #0]
 80086ea:	2001      	movs	r0, #1
 80086ec:	4770      	bx	lr
	...

080086f0 <fiprintf>:
 80086f0:	b40e      	push	{r1, r2, r3}
 80086f2:	b503      	push	{r0, r1, lr}
 80086f4:	4601      	mov	r1, r0
 80086f6:	ab03      	add	r3, sp, #12
 80086f8:	4805      	ldr	r0, [pc, #20]	@ (8008710 <fiprintf+0x20>)
 80086fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80086fe:	6800      	ldr	r0, [r0, #0]
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	f7ff fd6d 	bl	80081e0 <_vfiprintf_r>
 8008706:	b002      	add	sp, #8
 8008708:	f85d eb04 	ldr.w	lr, [sp], #4
 800870c:	b003      	add	sp, #12
 800870e:	4770      	bx	lr
 8008710:	2000001c 	.word	0x2000001c

08008714 <abort>:
 8008714:	b508      	push	{r3, lr}
 8008716:	2006      	movs	r0, #6
 8008718:	f000 f834 	bl	8008784 <raise>
 800871c:	2001      	movs	r0, #1
 800871e:	f7f9 fcb9 	bl	8002094 <_exit>

08008722 <_malloc_usable_size_r>:
 8008722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008726:	1f18      	subs	r0, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	bfbc      	itt	lt
 800872c:	580b      	ldrlt	r3, [r1, r0]
 800872e:	18c0      	addlt	r0, r0, r3
 8008730:	4770      	bx	lr

08008732 <_raise_r>:
 8008732:	291f      	cmp	r1, #31
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4605      	mov	r5, r0
 8008738:	460c      	mov	r4, r1
 800873a:	d904      	bls.n	8008746 <_raise_r+0x14>
 800873c:	2316      	movs	r3, #22
 800873e:	6003      	str	r3, [r0, #0]
 8008740:	f04f 30ff 	mov.w	r0, #4294967295
 8008744:	bd38      	pop	{r3, r4, r5, pc}
 8008746:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008748:	b112      	cbz	r2, 8008750 <_raise_r+0x1e>
 800874a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800874e:	b94b      	cbnz	r3, 8008764 <_raise_r+0x32>
 8008750:	4628      	mov	r0, r5
 8008752:	f000 f831 	bl	80087b8 <_getpid_r>
 8008756:	4622      	mov	r2, r4
 8008758:	4601      	mov	r1, r0
 800875a:	4628      	mov	r0, r5
 800875c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008760:	f000 b818 	b.w	8008794 <_kill_r>
 8008764:	2b01      	cmp	r3, #1
 8008766:	d00a      	beq.n	800877e <_raise_r+0x4c>
 8008768:	1c59      	adds	r1, r3, #1
 800876a:	d103      	bne.n	8008774 <_raise_r+0x42>
 800876c:	2316      	movs	r3, #22
 800876e:	6003      	str	r3, [r0, #0]
 8008770:	2001      	movs	r0, #1
 8008772:	e7e7      	b.n	8008744 <_raise_r+0x12>
 8008774:	2100      	movs	r1, #0
 8008776:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800877a:	4620      	mov	r0, r4
 800877c:	4798      	blx	r3
 800877e:	2000      	movs	r0, #0
 8008780:	e7e0      	b.n	8008744 <_raise_r+0x12>
	...

08008784 <raise>:
 8008784:	4b02      	ldr	r3, [pc, #8]	@ (8008790 <raise+0xc>)
 8008786:	4601      	mov	r1, r0
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	f7ff bfd2 	b.w	8008732 <_raise_r>
 800878e:	bf00      	nop
 8008790:	2000001c 	.word	0x2000001c

08008794 <_kill_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4d07      	ldr	r5, [pc, #28]	@ (80087b4 <_kill_r+0x20>)
 8008798:	2300      	movs	r3, #0
 800879a:	4604      	mov	r4, r0
 800879c:	4608      	mov	r0, r1
 800879e:	4611      	mov	r1, r2
 80087a0:	602b      	str	r3, [r5, #0]
 80087a2:	f7f9 fc67 	bl	8002074 <_kill>
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	d102      	bne.n	80087b0 <_kill_r+0x1c>
 80087aa:	682b      	ldr	r3, [r5, #0]
 80087ac:	b103      	cbz	r3, 80087b0 <_kill_r+0x1c>
 80087ae:	6023      	str	r3, [r4, #0]
 80087b0:	bd38      	pop	{r3, r4, r5, pc}
 80087b2:	bf00      	nop
 80087b4:	200006d0 	.word	0x200006d0

080087b8 <_getpid_r>:
 80087b8:	f7f9 bc54 	b.w	8002064 <_getpid>

080087bc <_init>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	bf00      	nop
 80087c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c2:	bc08      	pop	{r3}
 80087c4:	469e      	mov	lr, r3
 80087c6:	4770      	bx	lr

080087c8 <_fini>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	bf00      	nop
 80087cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ce:	bc08      	pop	{r3}
 80087d0:	469e      	mov	lr, r3
 80087d2:	4770      	bx	lr
