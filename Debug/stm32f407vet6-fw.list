
stm32f407vet6-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004698  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004828  08004828  00005828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048ec  080048ec  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080048ec  080048ec  000058ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048f4  080048f4  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f4  080048f4  000058f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048f8  080048f8  000058f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080048fc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          0000027c  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e8  200002e8  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bda6  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f7  00000000  00000000  00011e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  00014140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c1  00000000  00000000  00014b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022365  00000000  00000000  00015349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e15b  00000000  00000000  000376ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6b52  00000000  00000000  00045809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c35b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fc0  00000000  00000000  0010c3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0010f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004810 	.word	0x08004810

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004810 	.word	0x08004810

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <CS_Low>:
static W25Q128_Handle_t w25q_handle_instance;  // 실제 변수
static W25Q128_Handle_t *w25q_handle = &w25q_handle_instance;  // 포인터


/* CS 핀 제어 */
static void CS_Low(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(w25q_handle->cs_port, w25q_handle->cs_pin, GPIO_PIN_RESET);
 80005a0:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <CS_Low+0x1c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	6858      	ldr	r0, [r3, #4]
 80005a6:	4b04      	ldr	r3, [pc, #16]	@ (80005b8 <CS_Low+0x1c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	891b      	ldrh	r3, [r3, #8]
 80005ac:	2200      	movs	r2, #0
 80005ae:	4619      	mov	r1, r3
 80005b0:	f001 fb3e 	bl	8001c30 <HAL_GPIO_WritePin>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000000 	.word	0x20000000

080005bc <CS_High>:

static void CS_High(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(w25q_handle->cs_port, w25q_handle->cs_pin, GPIO_PIN_SET);
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <CS_High+0x1c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6858      	ldr	r0, [r3, #4]
 80005c6:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <CS_High+0x1c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	891b      	ldrh	r3, [r3, #8]
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f001 fb2e 	bl	8001c30 <HAL_GPIO_WritePin>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000000 	.word	0x20000000

080005dc <IsReady>:

/* 상태 확인 */
static bool IsReady(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
    uint8_t cmd = W25Q128_CMD_READ_STATUS;
 80005e2:	2305      	movs	r3, #5
 80005e4:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    CS_Low();
 80005e6:	f7ff ffd9 	bl	800059c <CS_Low>
    HAL_SPI_Transmit(w25q_handle->hspi, &cmd, 1, 100);
 80005ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <IsReady+0x4c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	1df9      	adds	r1, r7, #7
 80005f2:	2364      	movs	r3, #100	@ 0x64
 80005f4:	2201      	movs	r2, #1
 80005f6:	f002 f816 	bl	8002626 <HAL_SPI_Transmit>
    HAL_SPI_Receive(w25q_handle->hspi, &status, 1, 100);
 80005fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <IsReady+0x4c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	1db9      	adds	r1, r7, #6
 8000602:	2364      	movs	r3, #100	@ 0x64
 8000604:	2201      	movs	r2, #1
 8000606:	f002 f952 	bl	80028ae <HAL_SPI_Receive>
    CS_High();
 800060a:	f7ff ffd7 	bl	80005bc <CS_High>

    return !(status & W25Q128_STATUS_BUSY);
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	2b00      	cmp	r3, #0
 8000616:	bf0c      	ite	eq
 8000618:	2301      	moveq	r3, #1
 800061a:	2300      	movne	r3, #0
 800061c:	b2db      	uxtb	r3, r3
}
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000000 	.word	0x20000000

0800062c <WriteEnable>:

/* 쓰기 활성화 */
static void WriteEnable(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
    uint8_t cmd = W25Q128_CMD_WRITE_ENABLE;
 8000632:	2306      	movs	r3, #6
 8000634:	71fb      	strb	r3, [r7, #7]

    CS_Low();
 8000636:	f7ff ffb1 	bl	800059c <CS_Low>
    HAL_SPI_Transmit(w25q_handle->hspi, &cmd, 1, 100);
 800063a:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <WriteEnable+0x2c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	1df9      	adds	r1, r7, #7
 8000642:	2364      	movs	r3, #100	@ 0x64
 8000644:	2201      	movs	r2, #1
 8000646:	f001 ffee 	bl	8002626 <HAL_SPI_Transmit>
    CS_High();
 800064a:	f7ff ffb7 	bl	80005bc <CS_High>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000

0800065c <WaitReady>:

/* 준비될 때까지 대기 */
static void WaitReady(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    while (!IsReady()) {
 8000660:	e002      	b.n	8000668 <WaitReady+0xc>
        HAL_Delay(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f000 fd28 	bl	80010b8 <HAL_Delay>
    while (!IsReady()) {
 8000668:	f7ff ffb8 	bl	80005dc <IsReady>
 800066c:	4603      	mov	r3, r0
 800066e:	f083 0301 	eor.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1f4      	bne.n	8000662 <WaitReady+0x6>
    }
}
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <W25Q128_Init>:

/**
 * @brief W25Q128 초기화
 */
void W25Q128_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	w25q_handle->hspi = &hspi2;
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <W25Q128_Init+0x2c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <W25Q128_Init+0x30>)
 800068a:	601a      	str	r2, [r3, #0]
	w25q_handle->cs_pin = SPI_CS_Pin;
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <W25Q128_Init+0x2c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2208      	movs	r2, #8
 8000692:	811a      	strh	r2, [r3, #8]
	w25q_handle->cs_port = SPI_CS_GPIO_Port;
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <W25Q128_Init+0x2c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a06      	ldr	r2, [pc, #24]	@ (80006b4 <W25Q128_Init+0x34>)
 800069a:	605a      	str	r2, [r3, #4]
    CS_High();  // CS 핀을 HIGH로 설정
 800069c:	f7ff ff8e 	bl	80005bc <CS_High>
    HAL_Delay(10);
 80006a0:	200a      	movs	r0, #10
 80006a2:	f000 fd09 	bl	80010b8 <HAL_Delay>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000094 	.word	0x20000094
 80006b4:	40021000 	.word	0x40021000

080006b8 <W25Q128_ReadData>:

/**
 * @brief 데이터 읽기
 */
void W25Q128_ReadData(uint32_t addr, uint8_t *data, uint32_t size) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
    uint8_t cmd[4];

    // 명령어 + 주소 준비
    cmd[0] = W25Q128_CMD_READ_DATA;
 80006c4:	2303      	movs	r3, #3
 80006c6:	753b      	strb	r3, [r7, #20]
    cmd[1] = (addr >> 16) & 0xFF;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	0c1b      	lsrs	r3, r3, #16
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	757b      	strb	r3, [r7, #21]
    cmd[2] = (addr >> 8) & 0xFF;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	0a1b      	lsrs	r3, r3, #8
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	75bb      	strb	r3, [r7, #22]
    cmd[3] = addr & 0xFF;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	75fb      	strb	r3, [r7, #23]

    CS_Low();
 80006de:	f7ff ff5d 	bl	800059c <CS_Low>
    HAL_SPI_Transmit(w25q_handle->hspi, cmd, 4, 100);
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <W25Q128_ReadData+0x5c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	f107 0114 	add.w	r1, r7, #20
 80006ec:	2364      	movs	r3, #100	@ 0x64
 80006ee:	2204      	movs	r2, #4
 80006f0:	f001 ff99 	bl	8002626 <HAL_SPI_Transmit>
    HAL_SPI_Receive(w25q_handle->hspi, data, size, 1000);
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <W25Q128_ReadData+0x5c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000702:	68b9      	ldr	r1, [r7, #8]
 8000704:	f002 f8d3 	bl	80028ae <HAL_SPI_Receive>
    CS_High();
 8000708:	f7ff ff58 	bl	80005bc <CS_High>
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000000 	.word	0x20000000

08000718 <W25Q128_WriteData>:

/**
 * @brief 데이터 쓰기 (한 페이지만)
 */
void W25Q128_WriteData(uint32_t addr, uint8_t *data, uint32_t size) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
    uint8_t cmd[4];

    // 최대 256바이트까지만
    if (size > 256) size = 256;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800072a:	d902      	bls.n	8000732 <W25Q128_WriteData+0x1a>
 800072c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000730:	607b      	str	r3, [r7, #4]

    WriteEnable();
 8000732:	f7ff ff7b 	bl	800062c <WriteEnable>

    // 명령어 + 주소 준비
    cmd[0] = W25Q128_CMD_PAGE_PROGRAM;
 8000736:	2302      	movs	r3, #2
 8000738:	753b      	strb	r3, [r7, #20]
    cmd[1] = (addr >> 16) & 0xFF;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	0c1b      	lsrs	r3, r3, #16
 800073e:	b2db      	uxtb	r3, r3
 8000740:	757b      	strb	r3, [r7, #21]
    cmd[2] = (addr >> 8) & 0xFF;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	b2db      	uxtb	r3, r3
 8000748:	75bb      	strb	r3, [r7, #22]
    cmd[3] = addr & 0xFF;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	75fb      	strb	r3, [r7, #23]

    CS_Low();
 8000750:	f7ff ff24 	bl	800059c <CS_Low>
    HAL_SPI_Transmit(w25q_handle->hspi, cmd, 4, 100);
 8000754:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <W25Q128_WriteData+0x74>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f107 0114 	add.w	r1, r7, #20
 800075e:	2364      	movs	r3, #100	@ 0x64
 8000760:	2204      	movs	r2, #4
 8000762:	f001 ff60 	bl	8002626 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(w25q_handle->hspi, data, size, 1000);
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <W25Q128_WriteData+0x74>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	b29a      	uxth	r2, r3
 8000770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	f001 ff56 	bl	8002626 <HAL_SPI_Transmit>
    CS_High();
 800077a:	f7ff ff1f 	bl	80005bc <CS_High>

    WaitReady();  // 완료 대기
 800077e:	f7ff ff6d 	bl	800065c <WaitReady>
}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000000 	.word	0x20000000

08000790 <W25Q128_EraseSector>:

/**
 * @brief 섹터 지우기 (4KB)
 */
void W25Q128_EraseSector(uint32_t addr) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];

    WriteEnable();
 8000798:	f7ff ff48 	bl	800062c <WriteEnable>

    // 명령어 + 주소 준비
    cmd[0] = W25Q128_CMD_SECTOR_ERASE;
 800079c:	2320      	movs	r3, #32
 800079e:	733b      	strb	r3, [r7, #12]
    cmd[1] = (addr >> 16) & 0xFF;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	0c1b      	lsrs	r3, r3, #16
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	737b      	strb	r3, [r7, #13]
    cmd[2] = (addr >> 8) & 0xFF;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	0a1b      	lsrs	r3, r3, #8
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	73bb      	strb	r3, [r7, #14]
    cmd[3] = addr & 0xFF;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	73fb      	strb	r3, [r7, #15]

    CS_Low();
 80007b6:	f7ff fef1 	bl	800059c <CS_Low>
    HAL_SPI_Transmit(w25q_handle->hspi, cmd, 4, 100);
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <W25Q128_EraseSector+0x4c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	f107 010c 	add.w	r1, r7, #12
 80007c4:	2364      	movs	r3, #100	@ 0x64
 80007c6:	2204      	movs	r2, #4
 80007c8:	f001 ff2d 	bl	8002626 <HAL_SPI_Transmit>
    CS_High();
 80007cc:	f7ff fef6 	bl	80005bc <CS_High>

    WaitReady();  // 완료 대기
 80007d0:	f7ff ff44 	bl	800065c <WaitReady>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000000 	.word	0x20000000

080007e0 <Test_W25Q128>:

/**
 * @brief 사용 예제
 */
void Test_W25Q128(void)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b089      	sub	sp, #36	@ 0x24
 80007e4:	af00      	add	r7, sp, #0
    // 테스트 데이터
    uint8_t write_data[16] = "Hello W25Q128!";
 80007e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000860 <Test_W25Q128+0x80>)
 80007e8:	f107 0410 	add.w	r4, r7, #16
 80007ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ee:	c407      	stmia	r4!, {r0, r1, r2}
 80007f0:	8023      	strh	r3, [r4, #0]
 80007f2:	3402      	adds	r4, #2
 80007f4:	0c1b      	lsrs	r3, r3, #16
 80007f6:	7023      	strb	r3, [r4, #0]
 80007f8:	2300      	movs	r3, #0
 80007fa:	77fb      	strb	r3, [r7, #31]
    uint8_t read_data[16] = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]

    // 1. 섹터 지우기
    W25Q128_EraseSector(0x000000);
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff ffc1 	bl	8000790 <W25Q128_EraseSector>

    // 2. 데이터 쓰기
    W25Q128_WriteData(0x000000, write_data, 16);
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	2210      	movs	r2, #16
 8000814:	4619      	mov	r1, r3
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff ff7e 	bl	8000718 <W25Q128_WriteData>

    // 3. 데이터 읽기
    W25Q128_ReadData(0x000000, read_data, 16);
 800081c:	463b      	mov	r3, r7
 800081e:	2210      	movs	r2, #16
 8000820:	4619      	mov	r1, r3
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff ff48 	bl	80006b8 <W25Q128_ReadData>

    // 4. 결과 확인
    // read_data와 write_data가 같은지 확인
#if 1
    printf("write data -> %s", write_data);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	480d      	ldr	r0, [pc, #52]	@ (8000864 <Test_W25Q128+0x84>)
 8000830:	f003 f9d0 	bl	8003bd4 <iprintf>
    fflush(stdout);
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <Test_W25Q128+0x88>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	4618      	mov	r0, r3
 800083c:	f003 f8f4 	bl	8003a28 <fflush>
	printf("  read data  -> %s", read_data);
 8000840:	463b      	mov	r3, r7
 8000842:	4619      	mov	r1, r3
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <Test_W25Q128+0x8c>)
 8000846:	f003 f9c5 	bl	8003bd4 <iprintf>
	fflush(stdout);
 800084a:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <Test_W25Q128+0x88>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	4618      	mov	r0, r3
 8000852:	f003 f8e9 	bl	8003a28 <fflush>
#else
    printf("write data -> %s\\", write_data);
    printf("read data  -> %s\\", read_data);
#endif
}
 8000856:	bf00      	nop
 8000858:	3724      	adds	r7, #36	@ 0x24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	bf00      	nop
 8000860:	08004850 	.word	0x08004850
 8000864:	08004828 	.word	0x08004828
 8000868:	2000001c 	.word	0x2000001c
 800086c:	0800483c 	.word	0x0800483c

08000870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_DMA_Init+0x3c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a0b      	ldr	r2, [pc, #44]	@ (80008ac <MX_DMA_Init+0x3c>)
 8000880:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_DMA_Init+0x3c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	200c      	movs	r0, #12
 8000898:	f000 fd0d 	bl	80012b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800089c:	200c      	movs	r0, #12
 800089e:	f000 fd26 	bl	80012ee <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	@ 0x30
 80008b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	4b34      	ldr	r3, [pc, #208]	@ (800099c <MX_GPIO_Init+0xec>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a33      	ldr	r2, [pc, #204]	@ (800099c <MX_GPIO_Init+0xec>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b31      	ldr	r3, [pc, #196]	@ (800099c <MX_GPIO_Init+0xec>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <MX_GPIO_Init+0xec>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a2c      	ldr	r2, [pc, #176]	@ (800099c <MX_GPIO_Init+0xec>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <MX_GPIO_Init+0xec>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b26      	ldr	r3, [pc, #152]	@ (800099c <MX_GPIO_Init+0xec>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a25      	ldr	r2, [pc, #148]	@ (800099c <MX_GPIO_Init+0xec>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b23      	ldr	r3, [pc, #140]	@ (800099c <MX_GPIO_Init+0xec>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <MX_GPIO_Init+0xec>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a1e      	ldr	r2, [pc, #120]	@ (800099c <MX_GPIO_Init+0xec>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <MX_GPIO_Init+0xec>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MX_GPIO_Init+0xec>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a17      	ldr	r2, [pc, #92]	@ (800099c <MX_GPIO_Init+0xec>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_GPIO_Init+0xec>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_GPIO_Init+0xec>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a10      	ldr	r2, [pc, #64]	@ (800099c <MX_GPIO_Init+0xec>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_GPIO_Init+0xec>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2108      	movs	r1, #8
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <MX_GPIO_Init+0xf0>)
 8000974:	f001 f95c 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000978:	2308      	movs	r3, #8
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <MX_GPIO_Init+0xf0>)
 8000990:	f000 ffb2 	bl	80018f8 <HAL_GPIO_Init>

}
 8000994:	bf00      	nop
 8000996:	3730      	adds	r7, #48	@ 0x30
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40021000 	.word	0x40021000

080009a4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
	UNUSED(file);
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 100);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	2364      	movs	r3, #100	@ 0x64
 80009b6:	68b9      	ldr	r1, [r7, #8]
 80009b8:	4803      	ldr	r0, [pc, #12]	@ (80009c8 <_write+0x24>)
 80009ba:	f002 fbcd 	bl	8003158 <HAL_UART_Transmit>
	return len;
 80009be:	687b      	ldr	r3, [r7, #4]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200000f0 	.word	0x200000f0

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d0:	f000 fb00 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d4:	f000 f814 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d8:	f7ff ff6a 	bl	80008b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009dc:	f7ff ff48 	bl	8000870 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80009e0:	f000 fa20 	bl	8000e24 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80009e4:	f000 f87c 	bl	8000ae0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  printf("Application Start\r\n");
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <main+0x30>)
 80009ea:	f003 f95b 	bl	8003ca4 <puts>
  W25Q128_Init();
 80009ee:	f7ff fe47 	bl	8000680 <W25Q128_Init>
  Test_W25Q128();
 80009f2:	f7ff fef5 	bl	80007e0 <Test_W25Q128>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f6:	bf00      	nop
 80009f8:	e7fd      	b.n	80009f6 <main+0x2a>
 80009fa:	bf00      	nop
 80009fc:	08004860 	.word	0x08004860

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	@ 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	2230      	movs	r2, #48	@ 0x30
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f003 fa28 	bl	8003e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b28      	ldr	r3, [pc, #160]	@ (8000acc <SystemClock_Config+0xcc>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	4a27      	ldr	r2, [pc, #156]	@ (8000acc <SystemClock_Config+0xcc>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a34:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <SystemClock_Config+0xcc>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <SystemClock_Config+0xd0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a21      	ldr	r2, [pc, #132]	@ (8000ad0 <SystemClock_Config+0xd0>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <SystemClock_Config+0xd0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	2302      	movs	r3, #2
 8000a68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a70:	2319      	movs	r3, #25
 8000a72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a74:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f8ec 	bl	8001c64 <HAL_RCC_OscConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a92:	f000 f81f 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	230f      	movs	r3, #15
 8000a98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2105      	movs	r1, #5
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fb4d 	bl	8002154 <HAL_RCC_ClockConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ac0:	f000 f808 	bl	8000ad4 <Error_Handler>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3750      	adds	r7, #80	@ 0x50
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40007000 	.word	0x40007000

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <Error_Handler+0x8>

08000ae0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b50 <MX_SPI2_Init+0x70>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000aec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000af0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000af2:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afe:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b2c:	220a      	movs	r2, #10
 8000b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b30:	4806      	ldr	r0, [pc, #24]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b32:	f001 fcef 	bl	8002514 <HAL_SPI_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b3c:	f7ff ffca 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  printf("%s() Init Success\r\n", __func__);
 8000b40:	4904      	ldr	r1, [pc, #16]	@ (8000b54 <MX_SPI2_Init+0x74>)
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_SPI2_Init+0x78>)
 8000b44:	f003 f846 	bl	8003bd4 <iprintf>
  /* USER CODE END SPI2_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000094 	.word	0x20000094
 8000b50:	40003800 	.word	0x40003800
 8000b54:	08004888 	.word	0x08004888
 8000b58:	08004874 	.word	0x08004874

08000b5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a28      	ldr	r2, [pc, #160]	@ (8000c1c <HAL_SPI_MspInit+0xc0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d14a      	bne.n	8000c14 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	4a26      	ldr	r2, [pc, #152]	@ (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8e:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b20      	ldr	r3, [pc, #128]	@ (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a18      	ldr	r2, [pc, #96]	@ (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = SPI_MISO_Pin|SPI_MOSI_Pin;
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be2:	2305      	movs	r3, #5
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	480d      	ldr	r0, [pc, #52]	@ (8000c24 <HAL_SPI_MspInit+0xc8>)
 8000bee:	f000 fe83 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_SCK_Pin;
 8000bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c04:	2305      	movs	r3, #5
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <HAL_SPI_MspInit+0xcc>)
 8000c10:	f000 fe72 	bl	80018f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	@ 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40003800 	.word	0x40003800
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020400 	.word	0x40020400

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd2:	f000 f9d1 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <DMA1_Stream1_IRQHandler+0x10>)
 8000ce2:	f000 fbcd 	bl	8001480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000138 	.word	0x20000138

08000cf0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e00a      	b.n	8000d18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d02:	f3af 8000 	nop.w
 8000d06:	4601      	mov	r1, r0
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	60ba      	str	r2, [r7, #8]
 8000d0e:	b2ca      	uxtb	r2, r1
 8000d10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf0      	blt.n	8000d02 <_read+0x12>
  }

  return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d52:	605a      	str	r2, [r3, #4]
  return 0;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_isatty>:

int _isatty(int file)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	@ (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f003 f89c 	bl	8003f00 <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20020000 	.word	0x20020000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	200000ec 	.word	0x200000ec
 8000dfc:	200002e8 	.word	0x200002e8

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	@ (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	@ (8000e74 <MX_USART3_UART_Init+0x50>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e5c:	f002 f92c 	bl	80030b8 <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e66:	f7ff fe35 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000f0 	.word	0x200000f0
 8000e74:	40004800 	.word	0x40004800

08000e78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a35      	ldr	r2, [pc, #212]	@ (8000f6c <HAL_UART_MspInit+0xf4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d164      	bne.n	8000f64 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b34      	ldr	r3, [pc, #208]	@ (8000f70 <HAL_UART_MspInit+0xf8>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	4a33      	ldr	r2, [pc, #204]	@ (8000f70 <HAL_UART_MspInit+0xf8>)
 8000ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eaa:	4b31      	ldr	r3, [pc, #196]	@ (8000f70 <HAL_UART_MspInit+0xf8>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b2d      	ldr	r3, [pc, #180]	@ (8000f70 <HAL_UART_MspInit+0xf8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a2c      	ldr	r2, [pc, #176]	@ (8000f70 <HAL_UART_MspInit+0xf8>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f70 <HAL_UART_MspInit+0xf8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = U3_TX_Pin|U3_RX_Pin;
 8000ed2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ee4:	2307      	movs	r3, #7
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4821      	ldr	r0, [pc, #132]	@ (8000f74 <HAL_UART_MspInit+0xfc>)
 8000ef0:	f000 fd02 	bl	80018f8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000ef4:	4b20      	ldr	r3, [pc, #128]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000ef6:	4a21      	ldr	r2, [pc, #132]	@ (8000f7c <HAL_UART_MspInit+0x104>)
 8000ef8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000efc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f00:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f02:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f14:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f16:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f28:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f32:	2204      	movs	r2, #4
 8000f34:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f48:	480b      	ldr	r0, [pc, #44]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f4a:	f000 f9eb 	bl	8001324 <HAL_DMA_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8000f54:	f7ff fdbe 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a07      	ldr	r2, [pc, #28]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f5e:	4a06      	ldr	r2, [pc, #24]	@ (8000f78 <HAL_UART_MspInit+0x100>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	@ 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40004800 	.word	0x40004800
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	20000138 	.word	0x20000138
 8000f7c:	40026028 	.word	0x40026028

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f84:	f7ff ff3c 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	@ (8000fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	@ (8000fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fae:	f002 ffad 	bl	8003f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff fd0b 	bl	80009cc <main>
  bx  lr    
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000fc4:	080048fc 	.word	0x080048fc
  ldr r2, =_sbss
 8000fc8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000fcc:	200002e8 	.word	0x200002e8

08000fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <HAL_Init+0x40>)
 8000fde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <HAL_Init+0x40>)
 8000fea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a07      	ldr	r2, [pc, #28]	@ (8001014 <HAL_Init+0x40>)
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 f94f 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	200f      	movs	r0, #15
 8001004:	f000 f808 	bl	8001018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001008:	f7ff fe10 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023c00 	.word	0x40023c00

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <HAL_InitTick+0x54>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HAL_InitTick+0x58>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f967 	bl	800130a <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d80a      	bhi.n	8001062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f000 f92f 	bl	80012b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4a06      	ldr	r2, [pc, #24]	@ (8001074 <HAL_InitTick+0x5c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000004 	.word	0x20000004
 8001070:	2000000c 	.word	0x2000000c
 8001074:	20000008 	.word	0x20000008

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	@ (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	2000000c 	.word	0x2000000c
 800109c:	20000198 	.word	0x20000198

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000198 	.word	0x20000198

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffde 	bl	80010a0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000000c 	.word	0x2000000c

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0b      	blt.n	800118e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	4907      	ldr	r1, [pc, #28]	@ (800119c <__NVIC_EnableIRQ+0x38>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	@ (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	@ (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	@ 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	@ 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f7ff ff8e 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	@ (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff29 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff3e 	bl	8001148 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff8e 	bl	80011f4 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5d 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff31 	bl	8001164 <__NVIC_EnableIRQ>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffa2 	bl	800125c <SysTick_Config>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff feb6 	bl	80010a0 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e099      	b.n	8001474 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2202      	movs	r2, #2
 8001344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001360:	e00f      	b.n	8001382 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001362:	f7ff fe9d 	bl	80010a0 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b05      	cmp	r3, #5
 800136e:	d908      	bls.n	8001382 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2220      	movs	r2, #32
 8001374:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2203      	movs	r2, #3
 800137a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e078      	b.n	8001474 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1e8      	bne.n	8001362 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	4b38      	ldr	r3, [pc, #224]	@ (800147c <HAL_DMA_Init+0x158>)
 800139c:	4013      	ands	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d107      	bne.n	80013ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e4:	4313      	orrs	r3, r2
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f023 0307 	bic.w	r3, r3, #7
 8001402:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	4313      	orrs	r3, r2
 800140c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001412:	2b04      	cmp	r3, #4
 8001414:	d117      	bne.n	8001446 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00e      	beq.n	8001446 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f9e9 	bl	8001800 <DMA_CheckFifoParam>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2240      	movs	r2, #64	@ 0x40
 8001438:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001442:	2301      	movs	r3, #1
 8001444:	e016      	b.n	8001474 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f9a0 	bl	8001794 <DMA_CalcBaseAndBitshift>
 8001454:	4603      	mov	r3, r0
 8001456:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145c:	223f      	movs	r2, #63	@ 0x3f
 800145e:	409a      	lsls	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	f010803f 	.word	0xf010803f

08001480 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800148c:	4b8e      	ldr	r3, [pc, #568]	@ (80016c8 <HAL_DMA_IRQHandler+0x248>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a8e      	ldr	r2, [pc, #568]	@ (80016cc <HAL_DMA_IRQHandler+0x24c>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0a9b      	lsrs	r3, r3, #10
 8001498:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014aa:	2208      	movs	r2, #8
 80014ac:	409a      	lsls	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d01a      	beq.n	80014ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0204 	bic.w	r2, r2, #4
 80014d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d8:	2208      	movs	r2, #8
 80014da:	409a      	lsls	r2, r3
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e4:	f043 0201 	orr.w	r2, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f0:	2201      	movs	r2, #1
 80014f2:	409a      	lsls	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d012      	beq.n	8001522 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00b      	beq.n	8001522 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150e:	2201      	movs	r2, #1
 8001510:	409a      	lsls	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151a:	f043 0202 	orr.w	r2, r3, #2
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001526:	2204      	movs	r2, #4
 8001528:	409a      	lsls	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d012      	beq.n	8001558 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00b      	beq.n	8001558 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001544:	2204      	movs	r2, #4
 8001546:	409a      	lsls	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001550:	f043 0204 	orr.w	r2, r3, #4
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155c:	2210      	movs	r2, #16
 800155e:	409a      	lsls	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4013      	ands	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d043      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d03c      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800157a:	2210      	movs	r2, #16
 800157c:	409a      	lsls	r2, r3
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d018      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d108      	bne.n	80015b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d024      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	4798      	blx	r3
 80015ae:	e01f      	b.n	80015f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d01b      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	4798      	blx	r3
 80015c0:	e016      	b.n	80015f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d107      	bne.n	80015e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0208 	bic.w	r2, r2, #8
 80015de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f4:	2220      	movs	r2, #32
 80015f6:	409a      	lsls	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 808f 	beq.w	8001720 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 8087 	beq.w	8001720 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001616:	2220      	movs	r2, #32
 8001618:	409a      	lsls	r2, r3
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b05      	cmp	r3, #5
 8001628:	d136      	bne.n	8001698 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0216 	bic.w	r2, r2, #22
 8001638:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	695a      	ldr	r2, [r3, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001648:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	2b00      	cmp	r3, #0
 8001650:	d103      	bne.n	800165a <HAL_DMA_IRQHandler+0x1da>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0208 	bic.w	r2, r2, #8
 8001668:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166e:	223f      	movs	r2, #63	@ 0x3f
 8001670:	409a      	lsls	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800168a:	2b00      	cmp	r3, #0
 800168c:	d07e      	beq.n	800178c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	4798      	blx	r3
        }
        return;
 8001696:	e079      	b.n	800178c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01d      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10d      	bne.n	80016d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d031      	beq.n	8001720 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
 80016c4:	e02c      	b.n	8001720 <HAL_DMA_IRQHandler+0x2a0>
 80016c6:	bf00      	nop
 80016c8:	20000004 	.word	0x20000004
 80016cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d023      	beq.n	8001720 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	4798      	blx	r3
 80016e0:	e01e      	b.n	8001720 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10f      	bne.n	8001710 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0210 	bic.w	r2, r2, #16
 80016fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001724:	2b00      	cmp	r3, #0
 8001726:	d032      	beq.n	800178e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d022      	beq.n	800177a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2205      	movs	r2, #5
 8001738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0201 	bic.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	3301      	adds	r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	429a      	cmp	r2, r3
 8001756:	d307      	bcc.n	8001768 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f2      	bne.n	800174c <HAL_DMA_IRQHandler+0x2cc>
 8001766:	e000      	b.n	800176a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001768:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	4798      	blx	r3
 800178a:	e000      	b.n	800178e <HAL_DMA_IRQHandler+0x30e>
        return;
 800178c:	bf00      	nop
    }
  }
}
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3b10      	subs	r3, #16
 80017a4:	4a14      	ldr	r2, [pc, #80]	@ (80017f8 <DMA_CalcBaseAndBitshift+0x64>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017ae:	4a13      	ldr	r2, [pc, #76]	@ (80017fc <DMA_CalcBaseAndBitshift+0x68>)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d909      	bls.n	80017d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	1d1a      	adds	r2, r3, #4
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80017d4:	e007      	b.n	80017e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	aaaaaaab 	.word	0xaaaaaaab
 80017fc:	080048b0 	.word	0x080048b0

08001800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d11f      	bne.n	800185a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d856      	bhi.n	80018ce <DMA_CheckFifoParam+0xce>
 8001820:	a201      	add	r2, pc, #4	@ (adr r2, 8001828 <DMA_CheckFifoParam+0x28>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	08001839 	.word	0x08001839
 800182c:	0800184b 	.word	0x0800184b
 8001830:	08001839 	.word	0x08001839
 8001834:	080018cf 	.word	0x080018cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d046      	beq.n	80018d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001848:	e043      	b.n	80018d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001852:	d140      	bne.n	80018d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001858:	e03d      	b.n	80018d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001862:	d121      	bne.n	80018a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d837      	bhi.n	80018da <DMA_CheckFifoParam+0xda>
 800186a:	a201      	add	r2, pc, #4	@ (adr r2, 8001870 <DMA_CheckFifoParam+0x70>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	08001881 	.word	0x08001881
 8001874:	08001887 	.word	0x08001887
 8001878:	08001881 	.word	0x08001881
 800187c:	08001899 	.word	0x08001899
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
      break;
 8001884:	e030      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d025      	beq.n	80018de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001896:	e022      	b.n	80018de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80018a0:	d11f      	bne.n	80018e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018a6:	e01c      	b.n	80018e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d903      	bls.n	80018b6 <DMA_CheckFifoParam+0xb6>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d003      	beq.n	80018bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018b4:	e018      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
      break;
 80018ba:	e015      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00e      	beq.n	80018e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
      break;
 80018cc:	e00b      	b.n	80018e6 <DMA_CheckFifoParam+0xe6>
      break;
 80018ce:	bf00      	nop
 80018d0:	e00a      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018d2:	bf00      	nop
 80018d4:	e008      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018d6:	bf00      	nop
 80018d8:	e006      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018da:	bf00      	nop
 80018dc:	e004      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018de:	bf00      	nop
 80018e0:	e002      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80018e2:	bf00      	nop
 80018e4:	e000      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018e6:	bf00      	nop
    }
  } 
  
  return status; 
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	@ 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	e16b      	b.n	8001bec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	429a      	cmp	r2, r3
 800192e:	f040 815a 	bne.w	8001be6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d005      	beq.n	800194a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001946:	2b02      	cmp	r3, #2
 8001948:	d130      	bne.n	80019ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 0201 	and.w	r2, r3, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d017      	beq.n	80019e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d123      	bne.n	8001a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	08da      	lsrs	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3208      	adds	r2, #8
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	08da      	lsrs	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3208      	adds	r2, #8
 8001a36:	69b9      	ldr	r1, [r7, #24]
 8001a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0203 	and.w	r2, r3, #3
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80b4 	beq.w	8001be6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b60      	ldr	r3, [pc, #384]	@ (8001c04 <HAL_GPIO_Init+0x30c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	4a5f      	ldr	r2, [pc, #380]	@ (8001c04 <HAL_GPIO_Init+0x30c>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c04 <HAL_GPIO_Init+0x30c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a9a:	4a5b      	ldr	r2, [pc, #364]	@ (8001c08 <HAL_GPIO_Init+0x310>)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a52      	ldr	r2, [pc, #328]	@ (8001c0c <HAL_GPIO_Init+0x314>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02b      	beq.n	8001b1e <HAL_GPIO_Init+0x226>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a51      	ldr	r2, [pc, #324]	@ (8001c10 <HAL_GPIO_Init+0x318>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d025      	beq.n	8001b1a <HAL_GPIO_Init+0x222>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a50      	ldr	r2, [pc, #320]	@ (8001c14 <HAL_GPIO_Init+0x31c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01f      	beq.n	8001b16 <HAL_GPIO_Init+0x21e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4f      	ldr	r2, [pc, #316]	@ (8001c18 <HAL_GPIO_Init+0x320>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x21a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4e      	ldr	r2, [pc, #312]	@ (8001c1c <HAL_GPIO_Init+0x324>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x216>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4d      	ldr	r2, [pc, #308]	@ (8001c20 <HAL_GPIO_Init+0x328>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x212>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4c      	ldr	r2, [pc, #304]	@ (8001c24 <HAL_GPIO_Init+0x32c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x20e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4b      	ldr	r2, [pc, #300]	@ (8001c28 <HAL_GPIO_Init+0x330>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x20a>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e00e      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b02:	2308      	movs	r3, #8
 8001b04:	e00c      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b06:	2306      	movs	r3, #6
 8001b08:	e00a      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	e008      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b12:	2303      	movs	r3, #3
 8001b14:	e004      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e002      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f002 0203 	and.w	r2, r2, #3
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	4093      	lsls	r3, r2
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b30:	4935      	ldr	r1, [pc, #212]	@ (8001c08 <HAL_GPIO_Init+0x310>)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3302      	adds	r3, #2
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c2c <HAL_GPIO_Init+0x334>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b62:	4a32      	ldr	r2, [pc, #200]	@ (8001c2c <HAL_GPIO_Init+0x334>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b68:	4b30      	ldr	r3, [pc, #192]	@ (8001c2c <HAL_GPIO_Init+0x334>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b8c:	4a27      	ldr	r2, [pc, #156]	@ (8001c2c <HAL_GPIO_Init+0x334>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b92:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <HAL_GPIO_Init+0x334>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <HAL_GPIO_Init+0x334>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <HAL_GPIO_Init+0x334>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be0:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <HAL_GPIO_Init+0x334>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2b0f      	cmp	r3, #15
 8001bf0:	f67f ae90 	bls.w	8001914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3724      	adds	r7, #36	@ 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40013800 	.word	0x40013800
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40021400 	.word	0x40021400
 8001c24:	40021800 	.word	0x40021800
 8001c28:	40021c00 	.word	0x40021c00
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e267      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d075      	beq.n	8001d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c82:	4b88      	ldr	r3, [pc, #544]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d00c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8e:	4b85      	ldr	r3, [pc, #532]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d112      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c9a:	4b82      	ldr	r3, [pc, #520]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d05b      	beq.n	8001d6c <HAL_RCC_OscConfig+0x108>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d157      	bne.n	8001d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e242      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc8:	d106      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x74>
 8001cca:	4b76      	ldr	r3, [pc, #472]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a75      	ldr	r2, [pc, #468]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e01d      	b.n	8001d14 <HAL_RCC_OscConfig+0xb0>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x98>
 8001ce2:	4b70      	ldr	r3, [pc, #448]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a6f      	ldr	r2, [pc, #444]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b6d      	ldr	r3, [pc, #436]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a6c      	ldr	r2, [pc, #432]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0xb0>
 8001cfc:	4b69      	ldr	r3, [pc, #420]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a68      	ldr	r2, [pc, #416]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b66      	ldr	r3, [pc, #408]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a65      	ldr	r2, [pc, #404]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f9c0 	bl	80010a0 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff f9bc 	bl	80010a0 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	@ 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e207      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b5b      	ldr	r3, [pc, #364]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0xc0>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff f9ac 	bl	80010a0 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff f9a8 	bl	80010a0 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	@ 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1f3      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5e:	4b51      	ldr	r3, [pc, #324]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0xe8>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d063      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d86:	4b47      	ldr	r3, [pc, #284]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d11c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d92:	4b44      	ldr	r3, [pc, #272]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d116      	bne.n	8001dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9e:	4b41      	ldr	r3, [pc, #260]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_RCC_OscConfig+0x152>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e1c7      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4937      	ldr	r1, [pc, #220]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	e03a      	b.n	8001e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd4:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <HAL_RCC_OscConfig+0x244>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff f961 	bl	80010a0 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff f95d 	bl	80010a0 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e1a8      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b28      	ldr	r3, [pc, #160]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4925      	ldr	r1, [pc, #148]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e015      	b.n	8001e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <HAL_RCC_OscConfig+0x244>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f940 	bl	80010a0 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff f93c 	bl	80010a0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e187      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d036      	beq.n	8001ebc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d016      	beq.n	8001e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <HAL_RCC_OscConfig+0x248>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7ff f920 	bl	80010a0 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff f91c 	bl	80010a0 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e167      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x200>
 8001e82:	e01b      	b.n	8001ebc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <HAL_RCC_OscConfig+0x248>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff f909 	bl	80010a0 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	e00e      	b.n	8001eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e92:	f7ff f905 	bl	80010a0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d907      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e150      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	42470000 	.word	0x42470000
 8001eac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb0:	4b88      	ldr	r3, [pc, #544]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1ea      	bne.n	8001e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 8097 	beq.w	8001ff8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ece:	4b81      	ldr	r3, [pc, #516]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10f      	bne.n	8001efa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	4b7d      	ldr	r3, [pc, #500]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	4a7c      	ldr	r2, [pc, #496]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eea:	4b7a      	ldr	r3, [pc, #488]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efa:	4b77      	ldr	r3, [pc, #476]	@ (80020d8 <HAL_RCC_OscConfig+0x474>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d118      	bne.n	8001f38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f06:	4b74      	ldr	r3, [pc, #464]	@ (80020d8 <HAL_RCC_OscConfig+0x474>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a73      	ldr	r2, [pc, #460]	@ (80020d8 <HAL_RCC_OscConfig+0x474>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f12:	f7ff f8c5 	bl	80010a0 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1a:	f7ff f8c1 	bl	80010a0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e10c      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	@ (80020d8 <HAL_RCC_OscConfig+0x474>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x2ea>
 8001f40:	4b64      	ldr	r3, [pc, #400]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f44:	4a63      	ldr	r2, [pc, #396]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f4c:	e01c      	b.n	8001f88 <HAL_RCC_OscConfig+0x324>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b05      	cmp	r3, #5
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x30c>
 8001f56:	4b5f      	ldr	r3, [pc, #380]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5a:	4a5e      	ldr	r2, [pc, #376]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f62:	4b5c      	ldr	r3, [pc, #368]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f66:	4a5b      	ldr	r2, [pc, #364]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCC_OscConfig+0x324>
 8001f70:	4b58      	ldr	r3, [pc, #352]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f74:	4a57      	ldr	r2, [pc, #348]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f7c:	4b55      	ldr	r3, [pc, #340]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f80:	4a54      	ldr	r2, [pc, #336]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f82:	f023 0304 	bic.w	r3, r3, #4
 8001f86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d015      	beq.n	8001fbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff f886 	bl	80010a0 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f98:	f7ff f882 	bl	80010a0 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e0cb      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fae:	4b49      	ldr	r3, [pc, #292]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0ee      	beq.n	8001f98 <HAL_RCC_OscConfig+0x334>
 8001fba:	e014      	b.n	8001fe6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbc:	f7ff f870 	bl	80010a0 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc4:	f7ff f86c 	bl	80010a0 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e0b5      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fda:	4b3e      	ldr	r3, [pc, #248]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1ee      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fec:	4b39      	ldr	r3, [pc, #228]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	4a38      	ldr	r2, [pc, #224]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80a1 	beq.w	8002144 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002002:	4b34      	ldr	r3, [pc, #208]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b08      	cmp	r3, #8
 800200c:	d05c      	beq.n	80020c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d141      	bne.n	800209a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002016:	4b31      	ldr	r3, [pc, #196]	@ (80020dc <HAL_RCC_OscConfig+0x478>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff f840 	bl	80010a0 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002024:	f7ff f83c 	bl	80010a0 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e087      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002036:	4b27      	ldr	r3, [pc, #156]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69da      	ldr	r2, [r3, #28]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	019b      	lsls	r3, r3, #6
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	085b      	lsrs	r3, r3, #1
 800205a:	3b01      	subs	r3, #1
 800205c:	041b      	lsls	r3, r3, #16
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002064:	061b      	lsls	r3, r3, #24
 8002066:	491b      	ldr	r1, [pc, #108]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206c:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <HAL_RCC_OscConfig+0x478>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7ff f815 	bl	80010a0 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207a:	f7ff f811 	bl	80010a0 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e05c      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208c:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x416>
 8002098:	e054      	b.n	8002144 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <HAL_RCC_OscConfig+0x478>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7fe fffe 	bl	80010a0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7fe fffa 	bl	80010a0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e045      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <HAL_RCC_OscConfig+0x470>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x444>
 80020c6:	e03d      	b.n	8002144 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e038      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40007000 	.word	0x40007000
 80020dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_RCC_OscConfig+0x4ec>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d028      	beq.n	8002140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d121      	bne.n	8002140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d11a      	bne.n	8002140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002110:	4013      	ands	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002118:	4293      	cmp	r3, r2
 800211a:	d111      	bne.n	8002140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	085b      	lsrs	r3, r3, #1
 8002128:	3b01      	subs	r3, #1
 800212a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d107      	bne.n	8002140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800

08002154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0cc      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002168:	4b68      	ldr	r3, [pc, #416]	@ (800230c <HAL_RCC_ClockConfig+0x1b8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d90c      	bls.n	8002190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b65      	ldr	r3, [pc, #404]	@ (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b63      	ldr	r3, [pc, #396]	@ (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0b8      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a8:	4b59      	ldr	r3, [pc, #356]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4a58      	ldr	r2, [pc, #352]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c0:	4b53      	ldr	r3, [pc, #332]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4a52      	ldr	r2, [pc, #328]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021cc:	4b50      	ldr	r3, [pc, #320]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	494d      	ldr	r1, [pc, #308]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d044      	beq.n	8002274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	4b47      	ldr	r3, [pc, #284]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d119      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e07f      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d003      	beq.n	8002212 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800220e:	2b03      	cmp	r3, #3
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002212:	4b3f      	ldr	r3, [pc, #252]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e06f      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002222:	4b3b      	ldr	r3, [pc, #236]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e067      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002232:	4b37      	ldr	r3, [pc, #220]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f023 0203 	bic.w	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4934      	ldr	r1, [pc, #208]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	4313      	orrs	r3, r2
 8002242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002244:	f7fe ff2c 	bl	80010a0 <HAL_GetTick>
 8002248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	e00a      	b.n	8002262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224c:	f7fe ff28 	bl	80010a0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e04f      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	4b2b      	ldr	r3, [pc, #172]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 020c 	and.w	r2, r3, #12
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	429a      	cmp	r2, r3
 8002272:	d1eb      	bne.n	800224c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002274:	4b25      	ldr	r3, [pc, #148]	@ (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d20c      	bcs.n	800229c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b22      	ldr	r3, [pc, #136]	@ (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b20      	ldr	r3, [pc, #128]	@ (800230c <HAL_RCC_ClockConfig+0x1b8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e032      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a8:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4916      	ldr	r1, [pc, #88]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022c6:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	490e      	ldr	r1, [pc, #56]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022da:	f000 f821 	bl	8002320 <HAL_RCC_GetSysClockFreq>
 80022de:	4602      	mov	r2, r0
 80022e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	490a      	ldr	r1, [pc, #40]	@ (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	5ccb      	ldrb	r3, [r1, r3]
 80022ee:	fa22 f303 	lsr.w	r3, r2, r3
 80022f2:	4a09      	ldr	r2, [pc, #36]	@ (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_RCC_ClockConfig+0x1c8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fe8c 	bl	8001018 <HAL_InitTick>

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023c00 	.word	0x40023c00
 8002310:	40023800 	.word	0x40023800
 8002314:	08004898 	.word	0x08004898
 8002318:	20000004 	.word	0x20000004
 800231c:	20000008 	.word	0x20000008

08002320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002324:	b090      	sub	sp, #64	@ 0x40
 8002326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002338:	4b59      	ldr	r3, [pc, #356]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b08      	cmp	r3, #8
 8002342:	d00d      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x40>
 8002344:	2b08      	cmp	r3, #8
 8002346:	f200 80a1 	bhi.w	800248c <HAL_RCC_GetSysClockFreq+0x16c>
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x34>
 800234e:	2b04      	cmp	r3, #4
 8002350:	d003      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x3a>
 8002352:	e09b      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002354:	4b53      	ldr	r3, [pc, #332]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002356:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002358:	e09b      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800235a:	4b53      	ldr	r3, [pc, #332]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800235c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800235e:	e098      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002360:	4b4f      	ldr	r3, [pc, #316]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002368:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800236a:	4b4d      	ldr	r3, [pc, #308]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d028      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002376:	4b4a      	ldr	r3, [pc, #296]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	099b      	lsrs	r3, r3, #6
 800237c:	2200      	movs	r2, #0
 800237e:	623b      	str	r3, [r7, #32]
 8002380:	627a      	str	r2, [r7, #36]	@ 0x24
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002388:	2100      	movs	r1, #0
 800238a:	4b47      	ldr	r3, [pc, #284]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800238c:	fb03 f201 	mul.w	r2, r3, r1
 8002390:	2300      	movs	r3, #0
 8002392:	fb00 f303 	mul.w	r3, r0, r3
 8002396:	4413      	add	r3, r2
 8002398:	4a43      	ldr	r2, [pc, #268]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800239a:	fba0 1202 	umull	r1, r2, r0, r2
 800239e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023a0:	460a      	mov	r2, r1
 80023a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80023a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023a6:	4413      	add	r3, r2
 80023a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ac:	2200      	movs	r2, #0
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	61fa      	str	r2, [r7, #28]
 80023b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023ba:	f7fd ff59 	bl	8000270 <__aeabi_uldivmod>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4613      	mov	r3, r2
 80023c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023c6:	e053      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c8:	4b35      	ldr	r3, [pc, #212]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	2200      	movs	r2, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	617a      	str	r2, [r7, #20]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023da:	f04f 0b00 	mov.w	fp, #0
 80023de:	4652      	mov	r2, sl
 80023e0:	465b      	mov	r3, fp
 80023e2:	f04f 0000 	mov.w	r0, #0
 80023e6:	f04f 0100 	mov.w	r1, #0
 80023ea:	0159      	lsls	r1, r3, #5
 80023ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023f0:	0150      	lsls	r0, r2, #5
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	ebb2 080a 	subs.w	r8, r2, sl
 80023fa:	eb63 090b 	sbc.w	r9, r3, fp
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800240a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800240e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002412:	ebb2 0408 	subs.w	r4, r2, r8
 8002416:	eb63 0509 	sbc.w	r5, r3, r9
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	00eb      	lsls	r3, r5, #3
 8002424:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002428:	00e2      	lsls	r2, r4, #3
 800242a:	4614      	mov	r4, r2
 800242c:	461d      	mov	r5, r3
 800242e:	eb14 030a 	adds.w	r3, r4, sl
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	eb45 030b 	adc.w	r3, r5, fp
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002446:	4629      	mov	r1, r5
 8002448:	028b      	lsls	r3, r1, #10
 800244a:	4621      	mov	r1, r4
 800244c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002450:	4621      	mov	r1, r4
 8002452:	028a      	lsls	r2, r1, #10
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800245a:	2200      	movs	r2, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	60fa      	str	r2, [r7, #12]
 8002460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002464:	f7fd ff04 	bl	8000270 <__aeabi_uldivmod>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4613      	mov	r3, r2
 800246e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002470:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	3301      	adds	r3, #1
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002480:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800248a:	e002      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800248e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002494:	4618      	mov	r0, r3
 8002496:	3740      	adds	r7, #64	@ 0x40
 8002498:	46bd      	mov	sp, r7
 800249a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	00f42400 	.word	0x00f42400
 80024a8:	017d7840 	.word	0x017d7840

080024ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b0:	4b03      	ldr	r3, [pc, #12]	@ (80024c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024c8:	f7ff fff0 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	0a9b      	lsrs	r3, r3, #10
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	4903      	ldr	r1, [pc, #12]	@ (80024e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800
 80024e8:	080048a8 	.word	0x080048a8

080024ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024f0:	f7ff ffdc 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b05      	ldr	r3, [pc, #20]	@ (800250c <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	0b5b      	lsrs	r3, r3, #13
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4903      	ldr	r1, [pc, #12]	@ (8002510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	080048a8 	.word	0x080048a8

08002514 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e07b      	b.n	800261e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002536:	d009      	beq.n	800254c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
 800253e:	e005      	b.n	800254c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe faf8 	bl	8000b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002582:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025d0:	ea42 0103 	orr.w	r1, r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	f003 0104 	and.w	r1, r3, #4
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	f003 0210 	and.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800260c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b088      	sub	sp, #32
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	4613      	mov	r3, r2
 8002634:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002636:	f7fe fd33 	bl	80010a0 <HAL_GetTick>
 800263a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d001      	beq.n	8002650 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800264c:	2302      	movs	r3, #2
 800264e:	e12a      	b.n	80028a6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_SPI_Transmit+0x36>
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e122      	b.n	80028a6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_SPI_Transmit+0x48>
 800266a:	2302      	movs	r3, #2
 800266c:	e11b      	b.n	80028a6 <HAL_SPI_Transmit+0x280>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2203      	movs	r2, #3
 800267a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	88fa      	ldrh	r2, [r7, #6]
 800268e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	88fa      	ldrh	r2, [r7, #6]
 8002694:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026bc:	d10f      	bne.n	80026de <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e8:	2b40      	cmp	r3, #64	@ 0x40
 80026ea:	d007      	beq.n	80026fc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002704:	d152      	bne.n	80027ac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_SPI_Transmit+0xee>
 800270e:	8b7b      	ldrh	r3, [r7, #26]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d145      	bne.n	80027a0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	881a      	ldrh	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002724:	1c9a      	adds	r2, r3, #2
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002738:	e032      	b.n	80027a0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b02      	cmp	r3, #2
 8002746:	d112      	bne.n	800276e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002758:	1c9a      	adds	r2, r3, #2
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800276c:	e018      	b.n	80027a0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800276e:	f7fe fc97 	bl	80010a0 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d803      	bhi.n	8002786 <HAL_SPI_Transmit+0x160>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d102      	bne.n	800278c <HAL_SPI_Transmit+0x166>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e082      	b.n	80028a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1c7      	bne.n	800273a <HAL_SPI_Transmit+0x114>
 80027aa:	e053      	b.n	8002854 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_SPI_Transmit+0x194>
 80027b4:	8b7b      	ldrh	r3, [r7, #26]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d147      	bne.n	800284a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	330c      	adds	r3, #12
 80027c4:	7812      	ldrb	r2, [r2, #0]
 80027c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027e0:	e033      	b.n	800284a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d113      	bne.n	8002818 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	330c      	adds	r3, #12
 80027fa:	7812      	ldrb	r2, [r2, #0]
 80027fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002816:	e018      	b.n	800284a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002818:	f7fe fc42 	bl	80010a0 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d803      	bhi.n	8002830 <HAL_SPI_Transmit+0x20a>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282e:	d102      	bne.n	8002836 <HAL_SPI_Transmit+0x210>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e02d      	b.n	80028a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1c6      	bne.n	80027e2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	6839      	ldr	r1, [r7, #0]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 fbd9 	bl	8003010 <SPI_EndRxTxTransaction>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80028a4:	2300      	movs	r3, #0
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b088      	sub	sp, #32
 80028b2:	af02      	add	r7, sp, #8
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d001      	beq.n	80028ce <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	e104      	b.n	8002ad8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <HAL_SPI_Receive+0x2c>
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e0fc      	b.n	8002ad8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028e6:	d112      	bne.n	800290e <HAL_SPI_Receive+0x60>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10e      	bne.n	800290e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2204      	movs	r2, #4
 80028f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f8eb 	bl	8002ae0 <HAL_SPI_TransmitReceive>
 800290a:	4603      	mov	r3, r0
 800290c:	e0e4      	b.n	8002ad8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800290e:	f7fe fbc7 	bl	80010a0 <HAL_GetTick>
 8002912:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_SPI_Receive+0x74>
 800291e:	2302      	movs	r3, #2
 8002920:	e0da      	b.n	8002ad8 <HAL_SPI_Receive+0x22a>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2204      	movs	r2, #4
 800292e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	88fa      	ldrh	r2, [r7, #6]
 8002942:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	88fa      	ldrh	r2, [r7, #6]
 8002948:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002970:	d10f      	bne.n	8002992 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002980:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800299c:	2b40      	cmp	r3, #64	@ 0x40
 800299e:	d007      	beq.n	80029b0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d170      	bne.n	8002a9a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80029b8:	e035      	b.n	8002a26 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d115      	bne.n	80029f4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f103 020c 	add.w	r2, r3, #12
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029f2:	e018      	b.n	8002a26 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029f4:	f7fe fb54 	bl	80010a0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d803      	bhi.n	8002a0c <HAL_SPI_Receive+0x15e>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0a:	d102      	bne.n	8002a12 <HAL_SPI_Receive+0x164>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e058      	b.n	8002ad8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1c4      	bne.n	80029ba <HAL_SPI_Receive+0x10c>
 8002a30:	e038      	b.n	8002aa4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d113      	bne.n	8002a68 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a52:	1c9a      	adds	r2, r3, #2
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a66:	e018      	b.n	8002a9a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a68:	f7fe fb1a 	bl	80010a0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d803      	bhi.n	8002a80 <HAL_SPI_Receive+0x1d2>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7e:	d102      	bne.n	8002a86 <HAL_SPI_Receive+0x1d8>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e01e      	b.n	8002ad8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1c6      	bne.n	8002a32 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	6839      	ldr	r1, [r7, #0]
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fa4b 	bl	8002f44 <SPI_EndRxTransaction>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	@ 0x28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002aee:	2301      	movs	r3, #1
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002af2:	f7fe fad5 	bl	80010a0 <HAL_GetTick>
 8002af6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002afe:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b0a:	7ffb      	ldrb	r3, [r7, #31]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d00c      	beq.n	8002b2a <HAL_SPI_TransmitReceive+0x4a>
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b16:	d106      	bne.n	8002b26 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <HAL_SPI_TransmitReceive+0x46>
 8002b20:	7ffb      	ldrb	r3, [r7, #31]
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d001      	beq.n	8002b2a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
 8002b28:	e17f      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_SPI_TransmitReceive+0x5c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_SPI_TransmitReceive+0x5c>
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e174      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_SPI_TransmitReceive+0x6e>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e16d      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d003      	beq.n	8002b6a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2205      	movs	r2, #5
 8002b66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	887a      	ldrh	r2, [r7, #2]
 8002b7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002baa:	2b40      	cmp	r3, #64	@ 0x40
 8002bac:	d007      	beq.n	8002bbe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bc6:	d17e      	bne.n	8002cc6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_SPI_TransmitReceive+0xf6>
 8002bd0:	8afb      	ldrh	r3, [r7, #22]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d16c      	bne.n	8002cb0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	881a      	ldrh	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	1c9a      	adds	r2, r3, #2
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bfa:	e059      	b.n	8002cb0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d11b      	bne.n	8002c42 <HAL_SPI_TransmitReceive+0x162>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d016      	beq.n	8002c42 <HAL_SPI_TransmitReceive+0x162>
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d113      	bne.n	8002c42 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	881a      	ldrh	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	1c9a      	adds	r2, r3, #2
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d119      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x1a4>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d014      	beq.n	8002c84 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c64:	b292      	uxth	r2, r2
 8002c66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6c:	1c9a      	adds	r2, r3, #2
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c80:	2301      	movs	r3, #1
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c84:	f7fe fa0c 	bl	80010a0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d80d      	bhi.n	8002cb0 <HAL_SPI_TransmitReceive+0x1d0>
 8002c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d009      	beq.n	8002cb0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0bc      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1a0      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x11c>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d19b      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x11c>
 8002cc4:	e082      	b.n	8002dcc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_SPI_TransmitReceive+0x1f4>
 8002cce:	8afb      	ldrh	r3, [r7, #22]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d171      	bne.n	8002db8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cfa:	e05d      	b.n	8002db8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d11c      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x264>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d017      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0x264>
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d114      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	7812      	ldrb	r2, [r2, #0]
 8002d26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d119      	bne.n	8002d86 <HAL_SPI_TransmitReceive+0x2a6>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d014      	beq.n	8002d86 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d82:	2301      	movs	r3, #1
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d86:	f7fe f98b 	bl	80010a0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d803      	bhi.n	8002d9e <HAL_SPI_TransmitReceive+0x2be>
 8002d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d102      	bne.n	8002da4 <HAL_SPI_TransmitReceive+0x2c4>
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e038      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d19c      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x21c>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d197      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dcc:	6a3a      	ldr	r2, [r7, #32]
 8002dce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f91d 	bl	8003010 <SPI_EndRxTxTransaction>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e01d      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3728      	adds	r7, #40	@ 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e44:	f7fe f92c 	bl	80010a0 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	4413      	add	r3, r2
 8002e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e54:	f7fe f924 	bl	80010a0 <HAL_GetTick>
 8002e58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e5a:	4b39      	ldr	r3, [pc, #228]	@ (8002f40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	015b      	lsls	r3, r3, #5
 8002e60:	0d1b      	lsrs	r3, r3, #20
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	fb02 f303 	mul.w	r3, r2, r3
 8002e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e6a:	e055      	b.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d051      	beq.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e74:	f7fe f914 	bl	80010a0 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d902      	bls.n	8002e8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d13d      	bne.n	8002f06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ea2:	d111      	bne.n	8002ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eac:	d004      	beq.n	8002eb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb6:	d107      	bne.n	8002ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ed0:	d10f      	bne.n	8002ef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e018      	b.n	8002f38 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	e002      	b.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4013      	ands	r3, r2
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d19a      	bne.n	8002e6c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000004 	.word	0x20000004

08002f44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f58:	d111      	bne.n	8002f7e <SPI_EndRxTransaction+0x3a>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f62:	d004      	beq.n	8002f6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f6c:	d107      	bne.n	8002f7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f86:	d12a      	bne.n	8002fde <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f90:	d012      	beq.n	8002fb8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2180      	movs	r1, #128	@ 0x80
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7ff ff49 	bl	8002e34 <SPI_WaitFlagStateUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d02d      	beq.n	8003004 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fac:	f043 0220 	orr.w	r2, r3, #32
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e026      	b.n	8003006 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff ff36 	bl	8002e34 <SPI_WaitFlagStateUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01a      	beq.n	8003004 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd2:	f043 0220 	orr.w	r2, r3, #32
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e013      	b.n	8003006 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f7ff ff23 	bl	8002e34 <SPI_WaitFlagStateUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff8:	f043 0220 	orr.w	r2, r3, #32
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e000      	b.n	8003006 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2201      	movs	r2, #1
 8003024:	2102      	movs	r1, #2
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f7ff ff04 	bl	8002e34 <SPI_WaitFlagStateUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e032      	b.n	80030a8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003042:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <SPI_EndRxTxTransaction+0xa0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1b      	ldr	r2, [pc, #108]	@ (80030b4 <SPI_EndRxTxTransaction+0xa4>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	0d5b      	lsrs	r3, r3, #21
 800304e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003060:	d112      	bne.n	8003088 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2200      	movs	r2, #0
 800306a:	2180      	movs	r1, #128	@ 0x80
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fee1 	bl	8002e34 <SPI_WaitFlagStateUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d016      	beq.n	80030a6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e00f      	b.n	80030a8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	3b01      	subs	r3, #1
 8003092:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309e:	2b80      	cmp	r3, #128	@ 0x80
 80030a0:	d0f2      	beq.n	8003088 <SPI_EndRxTxTransaction+0x78>
 80030a2:	e000      	b.n	80030a6 <SPI_EndRxTxTransaction+0x96>
        break;
 80030a4:	bf00      	nop
  }

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000004 	.word	0x20000004
 80030b4:	165e9f81 	.word	0x165e9f81

080030b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e042      	b.n	8003150 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd feca 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2224      	movs	r2, #36	@ 0x24
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f973 	bl	80033e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	@ 0x28
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b20      	cmp	r3, #32
 8003176:	d175      	bne.n	8003264 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_UART_Transmit+0x2c>
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e06e      	b.n	8003266 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2221      	movs	r2, #33	@ 0x21
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003196:	f7fd ff83 	bl	80010a0 <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	88fa      	ldrh	r2, [r7, #6]
 80031a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b0:	d108      	bne.n	80031c4 <HAL_UART_Transmit+0x6c>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	e003      	b.n	80031cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031cc:	e02e      	b.n	800322c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2200      	movs	r2, #0
 80031d6:	2180      	movs	r1, #128	@ 0x80
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f848 	bl	800326e <UART_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e03a      	b.n	8003266 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10b      	bne.n	800320e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	3302      	adds	r3, #2
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e007      	b.n	800321e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3301      	adds	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1cb      	bne.n	80031ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	2140      	movs	r1, #64	@ 0x40
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f814 	bl	800326e <UART_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e006      	b.n	8003266 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e000      	b.n	8003266 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	3720      	adds	r7, #32
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	4613      	mov	r3, r2
 800327c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327e:	e03b      	b.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d037      	beq.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003288:	f7fd ff0a 	bl	80010a0 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	6a3a      	ldr	r2, [r7, #32]
 8003294:	429a      	cmp	r2, r3
 8003296:	d302      	bcc.n	800329e <UART_WaitOnFlagUntilTimeout+0x30>
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e03a      	b.n	8003318 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d023      	beq.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b80      	cmp	r3, #128	@ 0x80
 80032b4:	d020      	beq.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b40      	cmp	r3, #64	@ 0x40
 80032ba:	d01d      	beq.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d116      	bne.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f81d 	bl	8003320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2208      	movs	r2, #8
 80032ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e00f      	b.n	8003318 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4013      	ands	r3, r2
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	429a      	cmp	r2, r3
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	429a      	cmp	r2, r3
 8003314:	d0b4      	beq.n	8003280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003320:	b480      	push	{r7}
 8003322:	b095      	sub	sp, #84	@ 0x54
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800333e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	330c      	adds	r3, #12
 8003346:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003348:	643a      	str	r2, [r7, #64]	@ 0x40
 800334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800334e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e5      	bne.n	8003328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3314      	adds	r3, #20
 8003362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	e853 3f00 	ldrex	r3, [r3]
 800336a:	61fb      	str	r3, [r7, #28]
   return(result);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3314      	adds	r3, #20
 800337a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800337c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800337e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003380:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003384:	e841 2300 	strex	r3, r2, [r1]
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e5      	bne.n	800335c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003394:	2b01      	cmp	r3, #1
 8003396:	d119      	bne.n	80033cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f023 0310 	bic.w	r3, r3, #16
 80033ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033b8:	61ba      	str	r2, [r7, #24]
 80033ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	6979      	ldr	r1, [r7, #20]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	e841 2300 	strex	r3, r2, [r1]
 80033c4:	613b      	str	r3, [r7, #16]
   return(result);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e5      	bne.n	8003398 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033da:	bf00      	nop
 80033dc:	3754      	adds	r7, #84	@ 0x54
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ec:	b0c0      	sub	sp, #256	@ 0x100
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003404:	68d9      	ldr	r1, [r3, #12]
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	ea40 0301 	orr.w	r3, r0, r1
 8003410:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	431a      	orrs	r2, r3
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	431a      	orrs	r2, r3
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003440:	f021 010c 	bic.w	r1, r1, #12
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800344e:	430b      	orrs	r3, r1
 8003450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003462:	6999      	ldr	r1, [r3, #24]
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	ea40 0301 	orr.w	r3, r0, r1
 800346e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b8f      	ldr	r3, [pc, #572]	@ (80036b4 <UART_SetConfig+0x2cc>)
 8003478:	429a      	cmp	r2, r3
 800347a:	d005      	beq.n	8003488 <UART_SetConfig+0xa0>
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b8d      	ldr	r3, [pc, #564]	@ (80036b8 <UART_SetConfig+0x2d0>)
 8003484:	429a      	cmp	r2, r3
 8003486:	d104      	bne.n	8003492 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003488:	f7ff f830 	bl	80024ec <HAL_RCC_GetPCLK2Freq>
 800348c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003490:	e003      	b.n	800349a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003492:	f7ff f817 	bl	80024c4 <HAL_RCC_GetPCLK1Freq>
 8003496:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034a4:	f040 810c 	bne.w	80036c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034ba:	4622      	mov	r2, r4
 80034bc:	462b      	mov	r3, r5
 80034be:	1891      	adds	r1, r2, r2
 80034c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034c2:	415b      	adcs	r3, r3
 80034c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034ca:	4621      	mov	r1, r4
 80034cc:	eb12 0801 	adds.w	r8, r2, r1
 80034d0:	4629      	mov	r1, r5
 80034d2:	eb43 0901 	adc.w	r9, r3, r1
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ea:	4690      	mov	r8, r2
 80034ec:	4699      	mov	r9, r3
 80034ee:	4623      	mov	r3, r4
 80034f0:	eb18 0303 	adds.w	r3, r8, r3
 80034f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034f8:	462b      	mov	r3, r5
 80034fa:	eb49 0303 	adc.w	r3, r9, r3
 80034fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800350e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003516:	460b      	mov	r3, r1
 8003518:	18db      	adds	r3, r3, r3
 800351a:	653b      	str	r3, [r7, #80]	@ 0x50
 800351c:	4613      	mov	r3, r2
 800351e:	eb42 0303 	adc.w	r3, r2, r3
 8003522:	657b      	str	r3, [r7, #84]	@ 0x54
 8003524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800352c:	f7fc fea0 	bl	8000270 <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4b61      	ldr	r3, [pc, #388]	@ (80036bc <UART_SetConfig+0x2d4>)
 8003536:	fba3 2302 	umull	r2, r3, r3, r2
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	011c      	lsls	r4, r3, #4
 800353e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003548:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800354c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	1891      	adds	r1, r2, r2
 8003556:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003558:	415b      	adcs	r3, r3
 800355a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800355c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003560:	4641      	mov	r1, r8
 8003562:	eb12 0a01 	adds.w	sl, r2, r1
 8003566:	4649      	mov	r1, r9
 8003568:	eb43 0b01 	adc.w	fp, r3, r1
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800357c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003580:	4692      	mov	sl, r2
 8003582:	469b      	mov	fp, r3
 8003584:	4643      	mov	r3, r8
 8003586:	eb1a 0303 	adds.w	r3, sl, r3
 800358a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800358e:	464b      	mov	r3, r9
 8003590:	eb4b 0303 	adc.w	r3, fp, r3
 8003594:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035ac:	460b      	mov	r3, r1
 80035ae:	18db      	adds	r3, r3, r3
 80035b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80035b2:	4613      	mov	r3, r2
 80035b4:	eb42 0303 	adc.w	r3, r2, r3
 80035b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035c2:	f7fc fe55 	bl	8000270 <__aeabi_uldivmod>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4611      	mov	r1, r2
 80035cc:	4b3b      	ldr	r3, [pc, #236]	@ (80036bc <UART_SetConfig+0x2d4>)
 80035ce:	fba3 2301 	umull	r2, r3, r3, r1
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2264      	movs	r2, #100	@ 0x64
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	1acb      	subs	r3, r1, r3
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035e2:	4b36      	ldr	r3, [pc, #216]	@ (80036bc <UART_SetConfig+0x2d4>)
 80035e4:	fba3 2302 	umull	r2, r3, r3, r2
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035f0:	441c      	add	r4, r3
 80035f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003600:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003604:	4642      	mov	r2, r8
 8003606:	464b      	mov	r3, r9
 8003608:	1891      	adds	r1, r2, r2
 800360a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800360c:	415b      	adcs	r3, r3
 800360e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003614:	4641      	mov	r1, r8
 8003616:	1851      	adds	r1, r2, r1
 8003618:	6339      	str	r1, [r7, #48]	@ 0x30
 800361a:	4649      	mov	r1, r9
 800361c:	414b      	adcs	r3, r1
 800361e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800362c:	4659      	mov	r1, fp
 800362e:	00cb      	lsls	r3, r1, #3
 8003630:	4651      	mov	r1, sl
 8003632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003636:	4651      	mov	r1, sl
 8003638:	00ca      	lsls	r2, r1, #3
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	4603      	mov	r3, r0
 8003640:	4642      	mov	r2, r8
 8003642:	189b      	adds	r3, r3, r2
 8003644:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003648:	464b      	mov	r3, r9
 800364a:	460a      	mov	r2, r1
 800364c:	eb42 0303 	adc.w	r3, r2, r3
 8003650:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003660:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003668:	460b      	mov	r3, r1
 800366a:	18db      	adds	r3, r3, r3
 800366c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800366e:	4613      	mov	r3, r2
 8003670:	eb42 0303 	adc.w	r3, r2, r3
 8003674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800367a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800367e:	f7fc fdf7 	bl	8000270 <__aeabi_uldivmod>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <UART_SetConfig+0x2d4>)
 8003688:	fba3 1302 	umull	r1, r3, r3, r2
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	2164      	movs	r1, #100	@ 0x64
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	3332      	adds	r3, #50	@ 0x32
 800369a:	4a08      	ldr	r2, [pc, #32]	@ (80036bc <UART_SetConfig+0x2d4>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	f003 0207 	and.w	r2, r3, #7
 80036a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4422      	add	r2, r4
 80036ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036b0:	e106      	b.n	80038c0 <UART_SetConfig+0x4d8>
 80036b2:	bf00      	nop
 80036b4:	40011000 	.word	0x40011000
 80036b8:	40011400 	.word	0x40011400
 80036bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036c4:	2200      	movs	r2, #0
 80036c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036d2:	4642      	mov	r2, r8
 80036d4:	464b      	mov	r3, r9
 80036d6:	1891      	adds	r1, r2, r2
 80036d8:	6239      	str	r1, [r7, #32]
 80036da:	415b      	adcs	r3, r3
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036e2:	4641      	mov	r1, r8
 80036e4:	1854      	adds	r4, r2, r1
 80036e6:	4649      	mov	r1, r9
 80036e8:	eb43 0501 	adc.w	r5, r3, r1
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	00eb      	lsls	r3, r5, #3
 80036f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036fa:	00e2      	lsls	r2, r4, #3
 80036fc:	4614      	mov	r4, r2
 80036fe:	461d      	mov	r5, r3
 8003700:	4643      	mov	r3, r8
 8003702:	18e3      	adds	r3, r4, r3
 8003704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003708:	464b      	mov	r3, r9
 800370a:	eb45 0303 	adc.w	r3, r5, r3
 800370e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800371e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800372e:	4629      	mov	r1, r5
 8003730:	008b      	lsls	r3, r1, #2
 8003732:	4621      	mov	r1, r4
 8003734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003738:	4621      	mov	r1, r4
 800373a:	008a      	lsls	r2, r1, #2
 800373c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003740:	f7fc fd96 	bl	8000270 <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4b60      	ldr	r3, [pc, #384]	@ (80038cc <UART_SetConfig+0x4e4>)
 800374a:	fba3 2302 	umull	r2, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	011c      	lsls	r4, r3, #4
 8003752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003756:	2200      	movs	r2, #0
 8003758:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800375c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003764:	4642      	mov	r2, r8
 8003766:	464b      	mov	r3, r9
 8003768:	1891      	adds	r1, r2, r2
 800376a:	61b9      	str	r1, [r7, #24]
 800376c:	415b      	adcs	r3, r3
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003774:	4641      	mov	r1, r8
 8003776:	1851      	adds	r1, r2, r1
 8003778:	6139      	str	r1, [r7, #16]
 800377a:	4649      	mov	r1, r9
 800377c:	414b      	adcs	r3, r1
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800378c:	4659      	mov	r1, fp
 800378e:	00cb      	lsls	r3, r1, #3
 8003790:	4651      	mov	r1, sl
 8003792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003796:	4651      	mov	r1, sl
 8003798:	00ca      	lsls	r2, r1, #3
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	4603      	mov	r3, r0
 80037a0:	4642      	mov	r2, r8
 80037a2:	189b      	adds	r3, r3, r2
 80037a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037a8:	464b      	mov	r3, r9
 80037aa:	460a      	mov	r2, r1
 80037ac:	eb42 0303 	adc.w	r3, r2, r3
 80037b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037cc:	4649      	mov	r1, r9
 80037ce:	008b      	lsls	r3, r1, #2
 80037d0:	4641      	mov	r1, r8
 80037d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d6:	4641      	mov	r1, r8
 80037d8:	008a      	lsls	r2, r1, #2
 80037da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037de:	f7fc fd47 	bl	8000270 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	4b38      	ldr	r3, [pc, #224]	@ (80038cc <UART_SetConfig+0x4e4>)
 80037ea:	fba3 2301 	umull	r2, r3, r3, r1
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2264      	movs	r2, #100	@ 0x64
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	1acb      	subs	r3, r1, r3
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	3332      	adds	r3, #50	@ 0x32
 80037fc:	4a33      	ldr	r2, [pc, #204]	@ (80038cc <UART_SetConfig+0x4e4>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003808:	441c      	add	r4, r3
 800380a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800380e:	2200      	movs	r2, #0
 8003810:	673b      	str	r3, [r7, #112]	@ 0x70
 8003812:	677a      	str	r2, [r7, #116]	@ 0x74
 8003814:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003818:	4642      	mov	r2, r8
 800381a:	464b      	mov	r3, r9
 800381c:	1891      	adds	r1, r2, r2
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	415b      	adcs	r3, r3
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003828:	4641      	mov	r1, r8
 800382a:	1851      	adds	r1, r2, r1
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	4649      	mov	r1, r9
 8003830:	414b      	adcs	r3, r1
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003840:	4659      	mov	r1, fp
 8003842:	00cb      	lsls	r3, r1, #3
 8003844:	4651      	mov	r1, sl
 8003846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800384a:	4651      	mov	r1, sl
 800384c:	00ca      	lsls	r2, r1, #3
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	4603      	mov	r3, r0
 8003854:	4642      	mov	r2, r8
 8003856:	189b      	adds	r3, r3, r2
 8003858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800385a:	464b      	mov	r3, r9
 800385c:	460a      	mov	r2, r1
 800385e:	eb42 0303 	adc.w	r3, r2, r3
 8003862:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	663b      	str	r3, [r7, #96]	@ 0x60
 800386e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800387c:	4649      	mov	r1, r9
 800387e:	008b      	lsls	r3, r1, #2
 8003880:	4641      	mov	r1, r8
 8003882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003886:	4641      	mov	r1, r8
 8003888:	008a      	lsls	r2, r1, #2
 800388a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800388e:	f7fc fcef 	bl	8000270 <__aeabi_uldivmod>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <UART_SetConfig+0x4e4>)
 8003898:	fba3 1302 	umull	r1, r3, r3, r2
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	2164      	movs	r1, #100	@ 0x64
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	3332      	adds	r3, #50	@ 0x32
 80038aa:	4a08      	ldr	r2, [pc, #32]	@ (80038cc <UART_SetConfig+0x4e4>)
 80038ac:	fba2 2303 	umull	r2, r3, r2, r3
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	f003 020f 	and.w	r2, r3, #15
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4422      	add	r2, r4
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	bf00      	nop
 80038c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038c6:	46bd      	mov	sp, r7
 80038c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038cc:	51eb851f 	.word	0x51eb851f

080038d0 <__sflush_r>:
 80038d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038d8:	0716      	lsls	r6, r2, #28
 80038da:	4605      	mov	r5, r0
 80038dc:	460c      	mov	r4, r1
 80038de:	d454      	bmi.n	800398a <__sflush_r+0xba>
 80038e0:	684b      	ldr	r3, [r1, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	dc02      	bgt.n	80038ec <__sflush_r+0x1c>
 80038e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	dd48      	ble.n	800397e <__sflush_r+0xae>
 80038ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038ee:	2e00      	cmp	r6, #0
 80038f0:	d045      	beq.n	800397e <__sflush_r+0xae>
 80038f2:	2300      	movs	r3, #0
 80038f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80038f8:	682f      	ldr	r7, [r5, #0]
 80038fa:	6a21      	ldr	r1, [r4, #32]
 80038fc:	602b      	str	r3, [r5, #0]
 80038fe:	d030      	beq.n	8003962 <__sflush_r+0x92>
 8003900:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	0759      	lsls	r1, r3, #29
 8003906:	d505      	bpl.n	8003914 <__sflush_r+0x44>
 8003908:	6863      	ldr	r3, [r4, #4]
 800390a:	1ad2      	subs	r2, r2, r3
 800390c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800390e:	b10b      	cbz	r3, 8003914 <__sflush_r+0x44>
 8003910:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003912:	1ad2      	subs	r2, r2, r3
 8003914:	2300      	movs	r3, #0
 8003916:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003918:	6a21      	ldr	r1, [r4, #32]
 800391a:	4628      	mov	r0, r5
 800391c:	47b0      	blx	r6
 800391e:	1c43      	adds	r3, r0, #1
 8003920:	89a3      	ldrh	r3, [r4, #12]
 8003922:	d106      	bne.n	8003932 <__sflush_r+0x62>
 8003924:	6829      	ldr	r1, [r5, #0]
 8003926:	291d      	cmp	r1, #29
 8003928:	d82b      	bhi.n	8003982 <__sflush_r+0xb2>
 800392a:	4a2a      	ldr	r2, [pc, #168]	@ (80039d4 <__sflush_r+0x104>)
 800392c:	40ca      	lsrs	r2, r1
 800392e:	07d6      	lsls	r6, r2, #31
 8003930:	d527      	bpl.n	8003982 <__sflush_r+0xb2>
 8003932:	2200      	movs	r2, #0
 8003934:	6062      	str	r2, [r4, #4]
 8003936:	04d9      	lsls	r1, r3, #19
 8003938:	6922      	ldr	r2, [r4, #16]
 800393a:	6022      	str	r2, [r4, #0]
 800393c:	d504      	bpl.n	8003948 <__sflush_r+0x78>
 800393e:	1c42      	adds	r2, r0, #1
 8003940:	d101      	bne.n	8003946 <__sflush_r+0x76>
 8003942:	682b      	ldr	r3, [r5, #0]
 8003944:	b903      	cbnz	r3, 8003948 <__sflush_r+0x78>
 8003946:	6560      	str	r0, [r4, #84]	@ 0x54
 8003948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800394a:	602f      	str	r7, [r5, #0]
 800394c:	b1b9      	cbz	r1, 800397e <__sflush_r+0xae>
 800394e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003952:	4299      	cmp	r1, r3
 8003954:	d002      	beq.n	800395c <__sflush_r+0x8c>
 8003956:	4628      	mov	r0, r5
 8003958:	f000 fb00 	bl	8003f5c <_free_r>
 800395c:	2300      	movs	r3, #0
 800395e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003960:	e00d      	b.n	800397e <__sflush_r+0xae>
 8003962:	2301      	movs	r3, #1
 8003964:	4628      	mov	r0, r5
 8003966:	47b0      	blx	r6
 8003968:	4602      	mov	r2, r0
 800396a:	1c50      	adds	r0, r2, #1
 800396c:	d1c9      	bne.n	8003902 <__sflush_r+0x32>
 800396e:	682b      	ldr	r3, [r5, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0c6      	beq.n	8003902 <__sflush_r+0x32>
 8003974:	2b1d      	cmp	r3, #29
 8003976:	d001      	beq.n	800397c <__sflush_r+0xac>
 8003978:	2b16      	cmp	r3, #22
 800397a:	d11e      	bne.n	80039ba <__sflush_r+0xea>
 800397c:	602f      	str	r7, [r5, #0]
 800397e:	2000      	movs	r0, #0
 8003980:	e022      	b.n	80039c8 <__sflush_r+0xf8>
 8003982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003986:	b21b      	sxth	r3, r3
 8003988:	e01b      	b.n	80039c2 <__sflush_r+0xf2>
 800398a:	690f      	ldr	r7, [r1, #16]
 800398c:	2f00      	cmp	r7, #0
 800398e:	d0f6      	beq.n	800397e <__sflush_r+0xae>
 8003990:	0793      	lsls	r3, r2, #30
 8003992:	680e      	ldr	r6, [r1, #0]
 8003994:	bf08      	it	eq
 8003996:	694b      	ldreq	r3, [r1, #20]
 8003998:	600f      	str	r7, [r1, #0]
 800399a:	bf18      	it	ne
 800399c:	2300      	movne	r3, #0
 800399e:	eba6 0807 	sub.w	r8, r6, r7
 80039a2:	608b      	str	r3, [r1, #8]
 80039a4:	f1b8 0f00 	cmp.w	r8, #0
 80039a8:	dde9      	ble.n	800397e <__sflush_r+0xae>
 80039aa:	6a21      	ldr	r1, [r4, #32]
 80039ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80039ae:	4643      	mov	r3, r8
 80039b0:	463a      	mov	r2, r7
 80039b2:	4628      	mov	r0, r5
 80039b4:	47b0      	blx	r6
 80039b6:	2800      	cmp	r0, #0
 80039b8:	dc08      	bgt.n	80039cc <__sflush_r+0xfc>
 80039ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039c2:	81a3      	strh	r3, [r4, #12]
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295
 80039c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039cc:	4407      	add	r7, r0
 80039ce:	eba8 0800 	sub.w	r8, r8, r0
 80039d2:	e7e7      	b.n	80039a4 <__sflush_r+0xd4>
 80039d4:	20400001 	.word	0x20400001

080039d8 <_fflush_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	690b      	ldr	r3, [r1, #16]
 80039dc:	4605      	mov	r5, r0
 80039de:	460c      	mov	r4, r1
 80039e0:	b913      	cbnz	r3, 80039e8 <_fflush_r+0x10>
 80039e2:	2500      	movs	r5, #0
 80039e4:	4628      	mov	r0, r5
 80039e6:	bd38      	pop	{r3, r4, r5, pc}
 80039e8:	b118      	cbz	r0, 80039f2 <_fflush_r+0x1a>
 80039ea:	6a03      	ldr	r3, [r0, #32]
 80039ec:	b90b      	cbnz	r3, 80039f2 <_fflush_r+0x1a>
 80039ee:	f000 f8bb 	bl	8003b68 <__sinit>
 80039f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f3      	beq.n	80039e2 <_fflush_r+0xa>
 80039fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80039fc:	07d0      	lsls	r0, r2, #31
 80039fe:	d404      	bmi.n	8003a0a <_fflush_r+0x32>
 8003a00:	0599      	lsls	r1, r3, #22
 8003a02:	d402      	bmi.n	8003a0a <_fflush_r+0x32>
 8003a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a06:	f000 faa6 	bl	8003f56 <__retarget_lock_acquire_recursive>
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	f7ff ff5f 	bl	80038d0 <__sflush_r>
 8003a12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a14:	07da      	lsls	r2, r3, #31
 8003a16:	4605      	mov	r5, r0
 8003a18:	d4e4      	bmi.n	80039e4 <_fflush_r+0xc>
 8003a1a:	89a3      	ldrh	r3, [r4, #12]
 8003a1c:	059b      	lsls	r3, r3, #22
 8003a1e:	d4e1      	bmi.n	80039e4 <_fflush_r+0xc>
 8003a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a22:	f000 fa99 	bl	8003f58 <__retarget_lock_release_recursive>
 8003a26:	e7dd      	b.n	80039e4 <_fflush_r+0xc>

08003a28 <fflush>:
 8003a28:	4601      	mov	r1, r0
 8003a2a:	b920      	cbnz	r0, 8003a36 <fflush+0xe>
 8003a2c:	4a04      	ldr	r2, [pc, #16]	@ (8003a40 <fflush+0x18>)
 8003a2e:	4905      	ldr	r1, [pc, #20]	@ (8003a44 <fflush+0x1c>)
 8003a30:	4805      	ldr	r0, [pc, #20]	@ (8003a48 <fflush+0x20>)
 8003a32:	f000 b8b1 	b.w	8003b98 <_fwalk_sglue>
 8003a36:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <fflush+0x24>)
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	f7ff bfcd 	b.w	80039d8 <_fflush_r>
 8003a3e:	bf00      	nop
 8003a40:	20000010 	.word	0x20000010
 8003a44:	080039d9 	.word	0x080039d9
 8003a48:	20000020 	.word	0x20000020
 8003a4c:	2000001c 	.word	0x2000001c

08003a50 <std>:
 8003a50:	2300      	movs	r3, #0
 8003a52:	b510      	push	{r4, lr}
 8003a54:	4604      	mov	r4, r0
 8003a56:	e9c0 3300 	strd	r3, r3, [r0]
 8003a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a5e:	6083      	str	r3, [r0, #8]
 8003a60:	8181      	strh	r1, [r0, #12]
 8003a62:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a64:	81c2      	strh	r2, [r0, #14]
 8003a66:	6183      	str	r3, [r0, #24]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	305c      	adds	r0, #92	@ 0x5c
 8003a6e:	f000 f9f9 	bl	8003e64 <memset>
 8003a72:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <std+0x58>)
 8003a74:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a76:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <std+0x5c>)
 8003a78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab0 <std+0x60>)
 8003a7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab4 <std+0x64>)
 8003a80:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a82:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab8 <std+0x68>)
 8003a84:	6224      	str	r4, [r4, #32]
 8003a86:	429c      	cmp	r4, r3
 8003a88:	d006      	beq.n	8003a98 <std+0x48>
 8003a8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003a8e:	4294      	cmp	r4, r2
 8003a90:	d002      	beq.n	8003a98 <std+0x48>
 8003a92:	33d0      	adds	r3, #208	@ 0xd0
 8003a94:	429c      	cmp	r4, r3
 8003a96:	d105      	bne.n	8003aa4 <std+0x54>
 8003a98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aa0:	f000 ba58 	b.w	8003f54 <__retarget_lock_init_recursive>
 8003aa4:	bd10      	pop	{r4, pc}
 8003aa6:	bf00      	nop
 8003aa8:	08003cb5 	.word	0x08003cb5
 8003aac:	08003cd7 	.word	0x08003cd7
 8003ab0:	08003d0f 	.word	0x08003d0f
 8003ab4:	08003d33 	.word	0x08003d33
 8003ab8:	2000019c 	.word	0x2000019c

08003abc <stdio_exit_handler>:
 8003abc:	4a02      	ldr	r2, [pc, #8]	@ (8003ac8 <stdio_exit_handler+0xc>)
 8003abe:	4903      	ldr	r1, [pc, #12]	@ (8003acc <stdio_exit_handler+0x10>)
 8003ac0:	4803      	ldr	r0, [pc, #12]	@ (8003ad0 <stdio_exit_handler+0x14>)
 8003ac2:	f000 b869 	b.w	8003b98 <_fwalk_sglue>
 8003ac6:	bf00      	nop
 8003ac8:	20000010 	.word	0x20000010
 8003acc:	080039d9 	.word	0x080039d9
 8003ad0:	20000020 	.word	0x20000020

08003ad4 <cleanup_stdio>:
 8003ad4:	6841      	ldr	r1, [r0, #4]
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <cleanup_stdio+0x34>)
 8003ad8:	4299      	cmp	r1, r3
 8003ada:	b510      	push	{r4, lr}
 8003adc:	4604      	mov	r4, r0
 8003ade:	d001      	beq.n	8003ae4 <cleanup_stdio+0x10>
 8003ae0:	f7ff ff7a 	bl	80039d8 <_fflush_r>
 8003ae4:	68a1      	ldr	r1, [r4, #8]
 8003ae6:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <cleanup_stdio+0x38>)
 8003ae8:	4299      	cmp	r1, r3
 8003aea:	d002      	beq.n	8003af2 <cleanup_stdio+0x1e>
 8003aec:	4620      	mov	r0, r4
 8003aee:	f7ff ff73 	bl	80039d8 <_fflush_r>
 8003af2:	68e1      	ldr	r1, [r4, #12]
 8003af4:	4b06      	ldr	r3, [pc, #24]	@ (8003b10 <cleanup_stdio+0x3c>)
 8003af6:	4299      	cmp	r1, r3
 8003af8:	d004      	beq.n	8003b04 <cleanup_stdio+0x30>
 8003afa:	4620      	mov	r0, r4
 8003afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b00:	f7ff bf6a 	b.w	80039d8 <_fflush_r>
 8003b04:	bd10      	pop	{r4, pc}
 8003b06:	bf00      	nop
 8003b08:	2000019c 	.word	0x2000019c
 8003b0c:	20000204 	.word	0x20000204
 8003b10:	2000026c 	.word	0x2000026c

08003b14 <global_stdio_init.part.0>:
 8003b14:	b510      	push	{r4, lr}
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <global_stdio_init.part.0+0x30>)
 8003b18:	4c0b      	ldr	r4, [pc, #44]	@ (8003b48 <global_stdio_init.part.0+0x34>)
 8003b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b4c <global_stdio_init.part.0+0x38>)
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	4620      	mov	r0, r4
 8003b20:	2200      	movs	r2, #0
 8003b22:	2104      	movs	r1, #4
 8003b24:	f7ff ff94 	bl	8003a50 <std>
 8003b28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	2109      	movs	r1, #9
 8003b30:	f7ff ff8e 	bl	8003a50 <std>
 8003b34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b38:	2202      	movs	r2, #2
 8003b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b3e:	2112      	movs	r1, #18
 8003b40:	f7ff bf86 	b.w	8003a50 <std>
 8003b44:	200002d4 	.word	0x200002d4
 8003b48:	2000019c 	.word	0x2000019c
 8003b4c:	08003abd 	.word	0x08003abd

08003b50 <__sfp_lock_acquire>:
 8003b50:	4801      	ldr	r0, [pc, #4]	@ (8003b58 <__sfp_lock_acquire+0x8>)
 8003b52:	f000 ba00 	b.w	8003f56 <__retarget_lock_acquire_recursive>
 8003b56:	bf00      	nop
 8003b58:	200002dd 	.word	0x200002dd

08003b5c <__sfp_lock_release>:
 8003b5c:	4801      	ldr	r0, [pc, #4]	@ (8003b64 <__sfp_lock_release+0x8>)
 8003b5e:	f000 b9fb 	b.w	8003f58 <__retarget_lock_release_recursive>
 8003b62:	bf00      	nop
 8003b64:	200002dd 	.word	0x200002dd

08003b68 <__sinit>:
 8003b68:	b510      	push	{r4, lr}
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	f7ff fff0 	bl	8003b50 <__sfp_lock_acquire>
 8003b70:	6a23      	ldr	r3, [r4, #32]
 8003b72:	b11b      	cbz	r3, 8003b7c <__sinit+0x14>
 8003b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b78:	f7ff bff0 	b.w	8003b5c <__sfp_lock_release>
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <__sinit+0x28>)
 8003b7e:	6223      	str	r3, [r4, #32]
 8003b80:	4b04      	ldr	r3, [pc, #16]	@ (8003b94 <__sinit+0x2c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f5      	bne.n	8003b74 <__sinit+0xc>
 8003b88:	f7ff ffc4 	bl	8003b14 <global_stdio_init.part.0>
 8003b8c:	e7f2      	b.n	8003b74 <__sinit+0xc>
 8003b8e:	bf00      	nop
 8003b90:	08003ad5 	.word	0x08003ad5
 8003b94:	200002d4 	.word	0x200002d4

08003b98 <_fwalk_sglue>:
 8003b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b9c:	4607      	mov	r7, r0
 8003b9e:	4688      	mov	r8, r1
 8003ba0:	4614      	mov	r4, r2
 8003ba2:	2600      	movs	r6, #0
 8003ba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ba8:	f1b9 0901 	subs.w	r9, r9, #1
 8003bac:	d505      	bpl.n	8003bba <_fwalk_sglue+0x22>
 8003bae:	6824      	ldr	r4, [r4, #0]
 8003bb0:	2c00      	cmp	r4, #0
 8003bb2:	d1f7      	bne.n	8003ba4 <_fwalk_sglue+0xc>
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bba:	89ab      	ldrh	r3, [r5, #12]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d907      	bls.n	8003bd0 <_fwalk_sglue+0x38>
 8003bc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	d003      	beq.n	8003bd0 <_fwalk_sglue+0x38>
 8003bc8:	4629      	mov	r1, r5
 8003bca:	4638      	mov	r0, r7
 8003bcc:	47c0      	blx	r8
 8003bce:	4306      	orrs	r6, r0
 8003bd0:	3568      	adds	r5, #104	@ 0x68
 8003bd2:	e7e9      	b.n	8003ba8 <_fwalk_sglue+0x10>

08003bd4 <iprintf>:
 8003bd4:	b40f      	push	{r0, r1, r2, r3}
 8003bd6:	b507      	push	{r0, r1, r2, lr}
 8003bd8:	4906      	ldr	r1, [pc, #24]	@ (8003bf4 <iprintf+0x20>)
 8003bda:	ab04      	add	r3, sp, #16
 8003bdc:	6808      	ldr	r0, [r1, #0]
 8003bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8003be2:	6881      	ldr	r1, [r0, #8]
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	f000 fadb 	bl	80041a0 <_vfiprintf_r>
 8003bea:	b003      	add	sp, #12
 8003bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bf0:	b004      	add	sp, #16
 8003bf2:	4770      	bx	lr
 8003bf4:	2000001c 	.word	0x2000001c

08003bf8 <_puts_r>:
 8003bf8:	6a03      	ldr	r3, [r0, #32]
 8003bfa:	b570      	push	{r4, r5, r6, lr}
 8003bfc:	6884      	ldr	r4, [r0, #8]
 8003bfe:	4605      	mov	r5, r0
 8003c00:	460e      	mov	r6, r1
 8003c02:	b90b      	cbnz	r3, 8003c08 <_puts_r+0x10>
 8003c04:	f7ff ffb0 	bl	8003b68 <__sinit>
 8003c08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c0a:	07db      	lsls	r3, r3, #31
 8003c0c:	d405      	bmi.n	8003c1a <_puts_r+0x22>
 8003c0e:	89a3      	ldrh	r3, [r4, #12]
 8003c10:	0598      	lsls	r0, r3, #22
 8003c12:	d402      	bmi.n	8003c1a <_puts_r+0x22>
 8003c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c16:	f000 f99e 	bl	8003f56 <__retarget_lock_acquire_recursive>
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	0719      	lsls	r1, r3, #28
 8003c1e:	d502      	bpl.n	8003c26 <_puts_r+0x2e>
 8003c20:	6923      	ldr	r3, [r4, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d135      	bne.n	8003c92 <_puts_r+0x9a>
 8003c26:	4621      	mov	r1, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f000 f8c5 	bl	8003db8 <__swsetup_r>
 8003c2e:	b380      	cbz	r0, 8003c92 <_puts_r+0x9a>
 8003c30:	f04f 35ff 	mov.w	r5, #4294967295
 8003c34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c36:	07da      	lsls	r2, r3, #31
 8003c38:	d405      	bmi.n	8003c46 <_puts_r+0x4e>
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	059b      	lsls	r3, r3, #22
 8003c3e:	d402      	bmi.n	8003c46 <_puts_r+0x4e>
 8003c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c42:	f000 f989 	bl	8003f58 <__retarget_lock_release_recursive>
 8003c46:	4628      	mov	r0, r5
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	da04      	bge.n	8003c58 <_puts_r+0x60>
 8003c4e:	69a2      	ldr	r2, [r4, #24]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	dc17      	bgt.n	8003c84 <_puts_r+0x8c>
 8003c54:	290a      	cmp	r1, #10
 8003c56:	d015      	beq.n	8003c84 <_puts_r+0x8c>
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	6022      	str	r2, [r4, #0]
 8003c5e:	7019      	strb	r1, [r3, #0]
 8003c60:	68a3      	ldr	r3, [r4, #8]
 8003c62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c66:	3b01      	subs	r3, #1
 8003c68:	60a3      	str	r3, [r4, #8]
 8003c6a:	2900      	cmp	r1, #0
 8003c6c:	d1ed      	bne.n	8003c4a <_puts_r+0x52>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	da11      	bge.n	8003c96 <_puts_r+0x9e>
 8003c72:	4622      	mov	r2, r4
 8003c74:	210a      	movs	r1, #10
 8003c76:	4628      	mov	r0, r5
 8003c78:	f000 f85f 	bl	8003d3a <__swbuf_r>
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d0d7      	beq.n	8003c30 <_puts_r+0x38>
 8003c80:	250a      	movs	r5, #10
 8003c82:	e7d7      	b.n	8003c34 <_puts_r+0x3c>
 8003c84:	4622      	mov	r2, r4
 8003c86:	4628      	mov	r0, r5
 8003c88:	f000 f857 	bl	8003d3a <__swbuf_r>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d1e7      	bne.n	8003c60 <_puts_r+0x68>
 8003c90:	e7ce      	b.n	8003c30 <_puts_r+0x38>
 8003c92:	3e01      	subs	r6, #1
 8003c94:	e7e4      	b.n	8003c60 <_puts_r+0x68>
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	6022      	str	r2, [r4, #0]
 8003c9c:	220a      	movs	r2, #10
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	e7ee      	b.n	8003c80 <_puts_r+0x88>
	...

08003ca4 <puts>:
 8003ca4:	4b02      	ldr	r3, [pc, #8]	@ (8003cb0 <puts+0xc>)
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	f7ff bfa5 	b.w	8003bf8 <_puts_r>
 8003cae:	bf00      	nop
 8003cb0:	2000001c 	.word	0x2000001c

08003cb4 <__sread>:
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cbc:	f000 f8fc 	bl	8003eb8 <_read_r>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	bfab      	itete	ge
 8003cc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8003cc8:	181b      	addge	r3, r3, r0
 8003cca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003cce:	bfac      	ite	ge
 8003cd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003cd2:	81a3      	strhlt	r3, [r4, #12]
 8003cd4:	bd10      	pop	{r4, pc}

08003cd6 <__swrite>:
 8003cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cda:	461f      	mov	r7, r3
 8003cdc:	898b      	ldrh	r3, [r1, #12]
 8003cde:	05db      	lsls	r3, r3, #23
 8003ce0:	4605      	mov	r5, r0
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	4616      	mov	r6, r2
 8003ce6:	d505      	bpl.n	8003cf4 <__swrite+0x1e>
 8003ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cec:	2302      	movs	r3, #2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f000 f8d0 	bl	8003e94 <_lseek_r>
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cfe:	81a3      	strh	r3, [r4, #12]
 8003d00:	4632      	mov	r2, r6
 8003d02:	463b      	mov	r3, r7
 8003d04:	4628      	mov	r0, r5
 8003d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0a:	f000 b8e7 	b.w	8003edc <_write_r>

08003d0e <__sseek>:
 8003d0e:	b510      	push	{r4, lr}
 8003d10:	460c      	mov	r4, r1
 8003d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d16:	f000 f8bd 	bl	8003e94 <_lseek_r>
 8003d1a:	1c43      	adds	r3, r0, #1
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	bf15      	itete	ne
 8003d20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d2a:	81a3      	strheq	r3, [r4, #12]
 8003d2c:	bf18      	it	ne
 8003d2e:	81a3      	strhne	r3, [r4, #12]
 8003d30:	bd10      	pop	{r4, pc}

08003d32 <__sclose>:
 8003d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d36:	f000 b89d 	b.w	8003e74 <_close_r>

08003d3a <__swbuf_r>:
 8003d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3c:	460e      	mov	r6, r1
 8003d3e:	4614      	mov	r4, r2
 8003d40:	4605      	mov	r5, r0
 8003d42:	b118      	cbz	r0, 8003d4c <__swbuf_r+0x12>
 8003d44:	6a03      	ldr	r3, [r0, #32]
 8003d46:	b90b      	cbnz	r3, 8003d4c <__swbuf_r+0x12>
 8003d48:	f7ff ff0e 	bl	8003b68 <__sinit>
 8003d4c:	69a3      	ldr	r3, [r4, #24]
 8003d4e:	60a3      	str	r3, [r4, #8]
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	071a      	lsls	r2, r3, #28
 8003d54:	d501      	bpl.n	8003d5a <__swbuf_r+0x20>
 8003d56:	6923      	ldr	r3, [r4, #16]
 8003d58:	b943      	cbnz	r3, 8003d6c <__swbuf_r+0x32>
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	f000 f82b 	bl	8003db8 <__swsetup_r>
 8003d62:	b118      	cbz	r0, 8003d6c <__swbuf_r+0x32>
 8003d64:	f04f 37ff 	mov.w	r7, #4294967295
 8003d68:	4638      	mov	r0, r7
 8003d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	6922      	ldr	r2, [r4, #16]
 8003d70:	1a98      	subs	r0, r3, r2
 8003d72:	6963      	ldr	r3, [r4, #20]
 8003d74:	b2f6      	uxtb	r6, r6
 8003d76:	4283      	cmp	r3, r0
 8003d78:	4637      	mov	r7, r6
 8003d7a:	dc05      	bgt.n	8003d88 <__swbuf_r+0x4e>
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f7ff fe2a 	bl	80039d8 <_fflush_r>
 8003d84:	2800      	cmp	r0, #0
 8003d86:	d1ed      	bne.n	8003d64 <__swbuf_r+0x2a>
 8003d88:	68a3      	ldr	r3, [r4, #8]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	60a3      	str	r3, [r4, #8]
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	6022      	str	r2, [r4, #0]
 8003d94:	701e      	strb	r6, [r3, #0]
 8003d96:	6962      	ldr	r2, [r4, #20]
 8003d98:	1c43      	adds	r3, r0, #1
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d004      	beq.n	8003da8 <__swbuf_r+0x6e>
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	07db      	lsls	r3, r3, #31
 8003da2:	d5e1      	bpl.n	8003d68 <__swbuf_r+0x2e>
 8003da4:	2e0a      	cmp	r6, #10
 8003da6:	d1df      	bne.n	8003d68 <__swbuf_r+0x2e>
 8003da8:	4621      	mov	r1, r4
 8003daa:	4628      	mov	r0, r5
 8003dac:	f7ff fe14 	bl	80039d8 <_fflush_r>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d0d9      	beq.n	8003d68 <__swbuf_r+0x2e>
 8003db4:	e7d6      	b.n	8003d64 <__swbuf_r+0x2a>
	...

08003db8 <__swsetup_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4b29      	ldr	r3, [pc, #164]	@ (8003e60 <__swsetup_r+0xa8>)
 8003dbc:	4605      	mov	r5, r0
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	b118      	cbz	r0, 8003dcc <__swsetup_r+0x14>
 8003dc4:	6a03      	ldr	r3, [r0, #32]
 8003dc6:	b90b      	cbnz	r3, 8003dcc <__swsetup_r+0x14>
 8003dc8:	f7ff fece 	bl	8003b68 <__sinit>
 8003dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dd0:	0719      	lsls	r1, r3, #28
 8003dd2:	d422      	bmi.n	8003e1a <__swsetup_r+0x62>
 8003dd4:	06da      	lsls	r2, r3, #27
 8003dd6:	d407      	bmi.n	8003de8 <__swsetup_r+0x30>
 8003dd8:	2209      	movs	r2, #9
 8003dda:	602a      	str	r2, [r5, #0]
 8003ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003de0:	81a3      	strh	r3, [r4, #12]
 8003de2:	f04f 30ff 	mov.w	r0, #4294967295
 8003de6:	e033      	b.n	8003e50 <__swsetup_r+0x98>
 8003de8:	0758      	lsls	r0, r3, #29
 8003dea:	d512      	bpl.n	8003e12 <__swsetup_r+0x5a>
 8003dec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003dee:	b141      	cbz	r1, 8003e02 <__swsetup_r+0x4a>
 8003df0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003df4:	4299      	cmp	r1, r3
 8003df6:	d002      	beq.n	8003dfe <__swsetup_r+0x46>
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f000 f8af 	bl	8003f5c <_free_r>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e02:	89a3      	ldrh	r3, [r4, #12]
 8003e04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e08:	81a3      	strh	r3, [r4, #12]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6063      	str	r3, [r4, #4]
 8003e0e:	6923      	ldr	r3, [r4, #16]
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	89a3      	ldrh	r3, [r4, #12]
 8003e14:	f043 0308 	orr.w	r3, r3, #8
 8003e18:	81a3      	strh	r3, [r4, #12]
 8003e1a:	6923      	ldr	r3, [r4, #16]
 8003e1c:	b94b      	cbnz	r3, 8003e32 <__swsetup_r+0x7a>
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e28:	d003      	beq.n	8003e32 <__swsetup_r+0x7a>
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f000 fc81 	bl	8004734 <__smakebuf_r>
 8003e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e36:	f013 0201 	ands.w	r2, r3, #1
 8003e3a:	d00a      	beq.n	8003e52 <__swsetup_r+0x9a>
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	60a2      	str	r2, [r4, #8]
 8003e40:	6962      	ldr	r2, [r4, #20]
 8003e42:	4252      	negs	r2, r2
 8003e44:	61a2      	str	r2, [r4, #24]
 8003e46:	6922      	ldr	r2, [r4, #16]
 8003e48:	b942      	cbnz	r2, 8003e5c <__swsetup_r+0xa4>
 8003e4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003e4e:	d1c5      	bne.n	8003ddc <__swsetup_r+0x24>
 8003e50:	bd38      	pop	{r3, r4, r5, pc}
 8003e52:	0799      	lsls	r1, r3, #30
 8003e54:	bf58      	it	pl
 8003e56:	6962      	ldrpl	r2, [r4, #20]
 8003e58:	60a2      	str	r2, [r4, #8]
 8003e5a:	e7f4      	b.n	8003e46 <__swsetup_r+0x8e>
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	e7f7      	b.n	8003e50 <__swsetup_r+0x98>
 8003e60:	2000001c 	.word	0x2000001c

08003e64 <memset>:
 8003e64:	4402      	add	r2, r0
 8003e66:	4603      	mov	r3, r0
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d100      	bne.n	8003e6e <memset+0xa>
 8003e6c:	4770      	bx	lr
 8003e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e72:	e7f9      	b.n	8003e68 <memset+0x4>

08003e74 <_close_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4d06      	ldr	r5, [pc, #24]	@ (8003e90 <_close_r+0x1c>)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	f7fc ff53 	bl	8000d2a <_close>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d102      	bne.n	8003e8e <_close_r+0x1a>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	b103      	cbz	r3, 8003e8e <_close_r+0x1a>
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
 8003e90:	200002d8 	.word	0x200002d8

08003e94 <_lseek_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4d07      	ldr	r5, [pc, #28]	@ (8003eb4 <_lseek_r+0x20>)
 8003e98:	4604      	mov	r4, r0
 8003e9a:	4608      	mov	r0, r1
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	602a      	str	r2, [r5, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f7fc ff68 	bl	8000d78 <_lseek>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d102      	bne.n	8003eb2 <_lseek_r+0x1e>
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	b103      	cbz	r3, 8003eb2 <_lseek_r+0x1e>
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	bd38      	pop	{r3, r4, r5, pc}
 8003eb4:	200002d8 	.word	0x200002d8

08003eb8 <_read_r>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4d07      	ldr	r5, [pc, #28]	@ (8003ed8 <_read_r+0x20>)
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	4608      	mov	r0, r1
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	602a      	str	r2, [r5, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f7fc ff12 	bl	8000cf0 <_read>
 8003ecc:	1c43      	adds	r3, r0, #1
 8003ece:	d102      	bne.n	8003ed6 <_read_r+0x1e>
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	b103      	cbz	r3, 8003ed6 <_read_r+0x1e>
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	bd38      	pop	{r3, r4, r5, pc}
 8003ed8:	200002d8 	.word	0x200002d8

08003edc <_write_r>:
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	4d07      	ldr	r5, [pc, #28]	@ (8003efc <_write_r+0x20>)
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	4608      	mov	r0, r1
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	602a      	str	r2, [r5, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f7fc fd5a 	bl	80009a4 <_write>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d102      	bne.n	8003efa <_write_r+0x1e>
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	b103      	cbz	r3, 8003efa <_write_r+0x1e>
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
 8003efc:	200002d8 	.word	0x200002d8

08003f00 <__errno>:
 8003f00:	4b01      	ldr	r3, [pc, #4]	@ (8003f08 <__errno+0x8>)
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	2000001c 	.word	0x2000001c

08003f0c <__libc_init_array>:
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003f44 <__libc_init_array+0x38>)
 8003f10:	4c0d      	ldr	r4, [pc, #52]	@ (8003f48 <__libc_init_array+0x3c>)
 8003f12:	1b64      	subs	r4, r4, r5
 8003f14:	10a4      	asrs	r4, r4, #2
 8003f16:	2600      	movs	r6, #0
 8003f18:	42a6      	cmp	r6, r4
 8003f1a:	d109      	bne.n	8003f30 <__libc_init_array+0x24>
 8003f1c:	4d0b      	ldr	r5, [pc, #44]	@ (8003f4c <__libc_init_array+0x40>)
 8003f1e:	4c0c      	ldr	r4, [pc, #48]	@ (8003f50 <__libc_init_array+0x44>)
 8003f20:	f000 fc76 	bl	8004810 <_init>
 8003f24:	1b64      	subs	r4, r4, r5
 8003f26:	10a4      	asrs	r4, r4, #2
 8003f28:	2600      	movs	r6, #0
 8003f2a:	42a6      	cmp	r6, r4
 8003f2c:	d105      	bne.n	8003f3a <__libc_init_array+0x2e>
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f34:	4798      	blx	r3
 8003f36:	3601      	adds	r6, #1
 8003f38:	e7ee      	b.n	8003f18 <__libc_init_array+0xc>
 8003f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f3e:	4798      	blx	r3
 8003f40:	3601      	adds	r6, #1
 8003f42:	e7f2      	b.n	8003f2a <__libc_init_array+0x1e>
 8003f44:	080048f4 	.word	0x080048f4
 8003f48:	080048f4 	.word	0x080048f4
 8003f4c:	080048f4 	.word	0x080048f4
 8003f50:	080048f8 	.word	0x080048f8

08003f54 <__retarget_lock_init_recursive>:
 8003f54:	4770      	bx	lr

08003f56 <__retarget_lock_acquire_recursive>:
 8003f56:	4770      	bx	lr

08003f58 <__retarget_lock_release_recursive>:
 8003f58:	4770      	bx	lr
	...

08003f5c <_free_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4605      	mov	r5, r0
 8003f60:	2900      	cmp	r1, #0
 8003f62:	d041      	beq.n	8003fe8 <_free_r+0x8c>
 8003f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f68:	1f0c      	subs	r4, r1, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bfb8      	it	lt
 8003f6e:	18e4      	addlt	r4, r4, r3
 8003f70:	f000 f8e0 	bl	8004134 <__malloc_lock>
 8003f74:	4a1d      	ldr	r2, [pc, #116]	@ (8003fec <_free_r+0x90>)
 8003f76:	6813      	ldr	r3, [r2, #0]
 8003f78:	b933      	cbnz	r3, 8003f88 <_free_r+0x2c>
 8003f7a:	6063      	str	r3, [r4, #4]
 8003f7c:	6014      	str	r4, [r2, #0]
 8003f7e:	4628      	mov	r0, r5
 8003f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f84:	f000 b8dc 	b.w	8004140 <__malloc_unlock>
 8003f88:	42a3      	cmp	r3, r4
 8003f8a:	d908      	bls.n	8003f9e <_free_r+0x42>
 8003f8c:	6820      	ldr	r0, [r4, #0]
 8003f8e:	1821      	adds	r1, r4, r0
 8003f90:	428b      	cmp	r3, r1
 8003f92:	bf01      	itttt	eq
 8003f94:	6819      	ldreq	r1, [r3, #0]
 8003f96:	685b      	ldreq	r3, [r3, #4]
 8003f98:	1809      	addeq	r1, r1, r0
 8003f9a:	6021      	streq	r1, [r4, #0]
 8003f9c:	e7ed      	b.n	8003f7a <_free_r+0x1e>
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	b10b      	cbz	r3, 8003fa8 <_free_r+0x4c>
 8003fa4:	42a3      	cmp	r3, r4
 8003fa6:	d9fa      	bls.n	8003f9e <_free_r+0x42>
 8003fa8:	6811      	ldr	r1, [r2, #0]
 8003faa:	1850      	adds	r0, r2, r1
 8003fac:	42a0      	cmp	r0, r4
 8003fae:	d10b      	bne.n	8003fc8 <_free_r+0x6c>
 8003fb0:	6820      	ldr	r0, [r4, #0]
 8003fb2:	4401      	add	r1, r0
 8003fb4:	1850      	adds	r0, r2, r1
 8003fb6:	4283      	cmp	r3, r0
 8003fb8:	6011      	str	r1, [r2, #0]
 8003fba:	d1e0      	bne.n	8003f7e <_free_r+0x22>
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	6053      	str	r3, [r2, #4]
 8003fc2:	4408      	add	r0, r1
 8003fc4:	6010      	str	r0, [r2, #0]
 8003fc6:	e7da      	b.n	8003f7e <_free_r+0x22>
 8003fc8:	d902      	bls.n	8003fd0 <_free_r+0x74>
 8003fca:	230c      	movs	r3, #12
 8003fcc:	602b      	str	r3, [r5, #0]
 8003fce:	e7d6      	b.n	8003f7e <_free_r+0x22>
 8003fd0:	6820      	ldr	r0, [r4, #0]
 8003fd2:	1821      	adds	r1, r4, r0
 8003fd4:	428b      	cmp	r3, r1
 8003fd6:	bf04      	itt	eq
 8003fd8:	6819      	ldreq	r1, [r3, #0]
 8003fda:	685b      	ldreq	r3, [r3, #4]
 8003fdc:	6063      	str	r3, [r4, #4]
 8003fde:	bf04      	itt	eq
 8003fe0:	1809      	addeq	r1, r1, r0
 8003fe2:	6021      	streq	r1, [r4, #0]
 8003fe4:	6054      	str	r4, [r2, #4]
 8003fe6:	e7ca      	b.n	8003f7e <_free_r+0x22>
 8003fe8:	bd38      	pop	{r3, r4, r5, pc}
 8003fea:	bf00      	nop
 8003fec:	200002e4 	.word	0x200002e4

08003ff0 <sbrk_aligned>:
 8003ff0:	b570      	push	{r4, r5, r6, lr}
 8003ff2:	4e0f      	ldr	r6, [pc, #60]	@ (8004030 <sbrk_aligned+0x40>)
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	6831      	ldr	r1, [r6, #0]
 8003ff8:	4605      	mov	r5, r0
 8003ffa:	b911      	cbnz	r1, 8004002 <sbrk_aligned+0x12>
 8003ffc:	f000 fbf8 	bl	80047f0 <_sbrk_r>
 8004000:	6030      	str	r0, [r6, #0]
 8004002:	4621      	mov	r1, r4
 8004004:	4628      	mov	r0, r5
 8004006:	f000 fbf3 	bl	80047f0 <_sbrk_r>
 800400a:	1c43      	adds	r3, r0, #1
 800400c:	d103      	bne.n	8004016 <sbrk_aligned+0x26>
 800400e:	f04f 34ff 	mov.w	r4, #4294967295
 8004012:	4620      	mov	r0, r4
 8004014:	bd70      	pop	{r4, r5, r6, pc}
 8004016:	1cc4      	adds	r4, r0, #3
 8004018:	f024 0403 	bic.w	r4, r4, #3
 800401c:	42a0      	cmp	r0, r4
 800401e:	d0f8      	beq.n	8004012 <sbrk_aligned+0x22>
 8004020:	1a21      	subs	r1, r4, r0
 8004022:	4628      	mov	r0, r5
 8004024:	f000 fbe4 	bl	80047f0 <_sbrk_r>
 8004028:	3001      	adds	r0, #1
 800402a:	d1f2      	bne.n	8004012 <sbrk_aligned+0x22>
 800402c:	e7ef      	b.n	800400e <sbrk_aligned+0x1e>
 800402e:	bf00      	nop
 8004030:	200002e0 	.word	0x200002e0

08004034 <_malloc_r>:
 8004034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004038:	1ccd      	adds	r5, r1, #3
 800403a:	f025 0503 	bic.w	r5, r5, #3
 800403e:	3508      	adds	r5, #8
 8004040:	2d0c      	cmp	r5, #12
 8004042:	bf38      	it	cc
 8004044:	250c      	movcc	r5, #12
 8004046:	2d00      	cmp	r5, #0
 8004048:	4606      	mov	r6, r0
 800404a:	db01      	blt.n	8004050 <_malloc_r+0x1c>
 800404c:	42a9      	cmp	r1, r5
 800404e:	d904      	bls.n	800405a <_malloc_r+0x26>
 8004050:	230c      	movs	r3, #12
 8004052:	6033      	str	r3, [r6, #0]
 8004054:	2000      	movs	r0, #0
 8004056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800405a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004130 <_malloc_r+0xfc>
 800405e:	f000 f869 	bl	8004134 <__malloc_lock>
 8004062:	f8d8 3000 	ldr.w	r3, [r8]
 8004066:	461c      	mov	r4, r3
 8004068:	bb44      	cbnz	r4, 80040bc <_malloc_r+0x88>
 800406a:	4629      	mov	r1, r5
 800406c:	4630      	mov	r0, r6
 800406e:	f7ff ffbf 	bl	8003ff0 <sbrk_aligned>
 8004072:	1c43      	adds	r3, r0, #1
 8004074:	4604      	mov	r4, r0
 8004076:	d158      	bne.n	800412a <_malloc_r+0xf6>
 8004078:	f8d8 4000 	ldr.w	r4, [r8]
 800407c:	4627      	mov	r7, r4
 800407e:	2f00      	cmp	r7, #0
 8004080:	d143      	bne.n	800410a <_malloc_r+0xd6>
 8004082:	2c00      	cmp	r4, #0
 8004084:	d04b      	beq.n	800411e <_malloc_r+0xea>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	4639      	mov	r1, r7
 800408a:	4630      	mov	r0, r6
 800408c:	eb04 0903 	add.w	r9, r4, r3
 8004090:	f000 fbae 	bl	80047f0 <_sbrk_r>
 8004094:	4581      	cmp	r9, r0
 8004096:	d142      	bne.n	800411e <_malloc_r+0xea>
 8004098:	6821      	ldr	r1, [r4, #0]
 800409a:	1a6d      	subs	r5, r5, r1
 800409c:	4629      	mov	r1, r5
 800409e:	4630      	mov	r0, r6
 80040a0:	f7ff ffa6 	bl	8003ff0 <sbrk_aligned>
 80040a4:	3001      	adds	r0, #1
 80040a6:	d03a      	beq.n	800411e <_malloc_r+0xea>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	442b      	add	r3, r5
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	f8d8 3000 	ldr.w	r3, [r8]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	bb62      	cbnz	r2, 8004110 <_malloc_r+0xdc>
 80040b6:	f8c8 7000 	str.w	r7, [r8]
 80040ba:	e00f      	b.n	80040dc <_malloc_r+0xa8>
 80040bc:	6822      	ldr	r2, [r4, #0]
 80040be:	1b52      	subs	r2, r2, r5
 80040c0:	d420      	bmi.n	8004104 <_malloc_r+0xd0>
 80040c2:	2a0b      	cmp	r2, #11
 80040c4:	d917      	bls.n	80040f6 <_malloc_r+0xc2>
 80040c6:	1961      	adds	r1, r4, r5
 80040c8:	42a3      	cmp	r3, r4
 80040ca:	6025      	str	r5, [r4, #0]
 80040cc:	bf18      	it	ne
 80040ce:	6059      	strne	r1, [r3, #4]
 80040d0:	6863      	ldr	r3, [r4, #4]
 80040d2:	bf08      	it	eq
 80040d4:	f8c8 1000 	streq.w	r1, [r8]
 80040d8:	5162      	str	r2, [r4, r5]
 80040da:	604b      	str	r3, [r1, #4]
 80040dc:	4630      	mov	r0, r6
 80040de:	f000 f82f 	bl	8004140 <__malloc_unlock>
 80040e2:	f104 000b 	add.w	r0, r4, #11
 80040e6:	1d23      	adds	r3, r4, #4
 80040e8:	f020 0007 	bic.w	r0, r0, #7
 80040ec:	1ac2      	subs	r2, r0, r3
 80040ee:	bf1c      	itt	ne
 80040f0:	1a1b      	subne	r3, r3, r0
 80040f2:	50a3      	strne	r3, [r4, r2]
 80040f4:	e7af      	b.n	8004056 <_malloc_r+0x22>
 80040f6:	6862      	ldr	r2, [r4, #4]
 80040f8:	42a3      	cmp	r3, r4
 80040fa:	bf0c      	ite	eq
 80040fc:	f8c8 2000 	streq.w	r2, [r8]
 8004100:	605a      	strne	r2, [r3, #4]
 8004102:	e7eb      	b.n	80040dc <_malloc_r+0xa8>
 8004104:	4623      	mov	r3, r4
 8004106:	6864      	ldr	r4, [r4, #4]
 8004108:	e7ae      	b.n	8004068 <_malloc_r+0x34>
 800410a:	463c      	mov	r4, r7
 800410c:	687f      	ldr	r7, [r7, #4]
 800410e:	e7b6      	b.n	800407e <_malloc_r+0x4a>
 8004110:	461a      	mov	r2, r3
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	42a3      	cmp	r3, r4
 8004116:	d1fb      	bne.n	8004110 <_malloc_r+0xdc>
 8004118:	2300      	movs	r3, #0
 800411a:	6053      	str	r3, [r2, #4]
 800411c:	e7de      	b.n	80040dc <_malloc_r+0xa8>
 800411e:	230c      	movs	r3, #12
 8004120:	6033      	str	r3, [r6, #0]
 8004122:	4630      	mov	r0, r6
 8004124:	f000 f80c 	bl	8004140 <__malloc_unlock>
 8004128:	e794      	b.n	8004054 <_malloc_r+0x20>
 800412a:	6005      	str	r5, [r0, #0]
 800412c:	e7d6      	b.n	80040dc <_malloc_r+0xa8>
 800412e:	bf00      	nop
 8004130:	200002e4 	.word	0x200002e4

08004134 <__malloc_lock>:
 8004134:	4801      	ldr	r0, [pc, #4]	@ (800413c <__malloc_lock+0x8>)
 8004136:	f7ff bf0e 	b.w	8003f56 <__retarget_lock_acquire_recursive>
 800413a:	bf00      	nop
 800413c:	200002dc 	.word	0x200002dc

08004140 <__malloc_unlock>:
 8004140:	4801      	ldr	r0, [pc, #4]	@ (8004148 <__malloc_unlock+0x8>)
 8004142:	f7ff bf09 	b.w	8003f58 <__retarget_lock_release_recursive>
 8004146:	bf00      	nop
 8004148:	200002dc 	.word	0x200002dc

0800414c <__sfputc_r>:
 800414c:	6893      	ldr	r3, [r2, #8]
 800414e:	3b01      	subs	r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	b410      	push	{r4}
 8004154:	6093      	str	r3, [r2, #8]
 8004156:	da08      	bge.n	800416a <__sfputc_r+0x1e>
 8004158:	6994      	ldr	r4, [r2, #24]
 800415a:	42a3      	cmp	r3, r4
 800415c:	db01      	blt.n	8004162 <__sfputc_r+0x16>
 800415e:	290a      	cmp	r1, #10
 8004160:	d103      	bne.n	800416a <__sfputc_r+0x1e>
 8004162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004166:	f7ff bde8 	b.w	8003d3a <__swbuf_r>
 800416a:	6813      	ldr	r3, [r2, #0]
 800416c:	1c58      	adds	r0, r3, #1
 800416e:	6010      	str	r0, [r2, #0]
 8004170:	7019      	strb	r1, [r3, #0]
 8004172:	4608      	mov	r0, r1
 8004174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004178:	4770      	bx	lr

0800417a <__sfputs_r>:
 800417a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417c:	4606      	mov	r6, r0
 800417e:	460f      	mov	r7, r1
 8004180:	4614      	mov	r4, r2
 8004182:	18d5      	adds	r5, r2, r3
 8004184:	42ac      	cmp	r4, r5
 8004186:	d101      	bne.n	800418c <__sfputs_r+0x12>
 8004188:	2000      	movs	r0, #0
 800418a:	e007      	b.n	800419c <__sfputs_r+0x22>
 800418c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004190:	463a      	mov	r2, r7
 8004192:	4630      	mov	r0, r6
 8004194:	f7ff ffda 	bl	800414c <__sfputc_r>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d1f3      	bne.n	8004184 <__sfputs_r+0xa>
 800419c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041a0 <_vfiprintf_r>:
 80041a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a4:	460d      	mov	r5, r1
 80041a6:	b09d      	sub	sp, #116	@ 0x74
 80041a8:	4614      	mov	r4, r2
 80041aa:	4698      	mov	r8, r3
 80041ac:	4606      	mov	r6, r0
 80041ae:	b118      	cbz	r0, 80041b8 <_vfiprintf_r+0x18>
 80041b0:	6a03      	ldr	r3, [r0, #32]
 80041b2:	b90b      	cbnz	r3, 80041b8 <_vfiprintf_r+0x18>
 80041b4:	f7ff fcd8 	bl	8003b68 <__sinit>
 80041b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041ba:	07d9      	lsls	r1, r3, #31
 80041bc:	d405      	bmi.n	80041ca <_vfiprintf_r+0x2a>
 80041be:	89ab      	ldrh	r3, [r5, #12]
 80041c0:	059a      	lsls	r2, r3, #22
 80041c2:	d402      	bmi.n	80041ca <_vfiprintf_r+0x2a>
 80041c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041c6:	f7ff fec6 	bl	8003f56 <__retarget_lock_acquire_recursive>
 80041ca:	89ab      	ldrh	r3, [r5, #12]
 80041cc:	071b      	lsls	r3, r3, #28
 80041ce:	d501      	bpl.n	80041d4 <_vfiprintf_r+0x34>
 80041d0:	692b      	ldr	r3, [r5, #16]
 80041d2:	b99b      	cbnz	r3, 80041fc <_vfiprintf_r+0x5c>
 80041d4:	4629      	mov	r1, r5
 80041d6:	4630      	mov	r0, r6
 80041d8:	f7ff fdee 	bl	8003db8 <__swsetup_r>
 80041dc:	b170      	cbz	r0, 80041fc <_vfiprintf_r+0x5c>
 80041de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041e0:	07dc      	lsls	r4, r3, #31
 80041e2:	d504      	bpl.n	80041ee <_vfiprintf_r+0x4e>
 80041e4:	f04f 30ff 	mov.w	r0, #4294967295
 80041e8:	b01d      	add	sp, #116	@ 0x74
 80041ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ee:	89ab      	ldrh	r3, [r5, #12]
 80041f0:	0598      	lsls	r0, r3, #22
 80041f2:	d4f7      	bmi.n	80041e4 <_vfiprintf_r+0x44>
 80041f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041f6:	f7ff feaf 	bl	8003f58 <__retarget_lock_release_recursive>
 80041fa:	e7f3      	b.n	80041e4 <_vfiprintf_r+0x44>
 80041fc:	2300      	movs	r3, #0
 80041fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004200:	2320      	movs	r3, #32
 8004202:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004206:	f8cd 800c 	str.w	r8, [sp, #12]
 800420a:	2330      	movs	r3, #48	@ 0x30
 800420c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80043bc <_vfiprintf_r+0x21c>
 8004210:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004214:	f04f 0901 	mov.w	r9, #1
 8004218:	4623      	mov	r3, r4
 800421a:	469a      	mov	sl, r3
 800421c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004220:	b10a      	cbz	r2, 8004226 <_vfiprintf_r+0x86>
 8004222:	2a25      	cmp	r2, #37	@ 0x25
 8004224:	d1f9      	bne.n	800421a <_vfiprintf_r+0x7a>
 8004226:	ebba 0b04 	subs.w	fp, sl, r4
 800422a:	d00b      	beq.n	8004244 <_vfiprintf_r+0xa4>
 800422c:	465b      	mov	r3, fp
 800422e:	4622      	mov	r2, r4
 8004230:	4629      	mov	r1, r5
 8004232:	4630      	mov	r0, r6
 8004234:	f7ff ffa1 	bl	800417a <__sfputs_r>
 8004238:	3001      	adds	r0, #1
 800423a:	f000 80a7 	beq.w	800438c <_vfiprintf_r+0x1ec>
 800423e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004240:	445a      	add	r2, fp
 8004242:	9209      	str	r2, [sp, #36]	@ 0x24
 8004244:	f89a 3000 	ldrb.w	r3, [sl]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 809f 	beq.w	800438c <_vfiprintf_r+0x1ec>
 800424e:	2300      	movs	r3, #0
 8004250:	f04f 32ff 	mov.w	r2, #4294967295
 8004254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004258:	f10a 0a01 	add.w	sl, sl, #1
 800425c:	9304      	str	r3, [sp, #16]
 800425e:	9307      	str	r3, [sp, #28]
 8004260:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004264:	931a      	str	r3, [sp, #104]	@ 0x68
 8004266:	4654      	mov	r4, sl
 8004268:	2205      	movs	r2, #5
 800426a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800426e:	4853      	ldr	r0, [pc, #332]	@ (80043bc <_vfiprintf_r+0x21c>)
 8004270:	f7fb ffae 	bl	80001d0 <memchr>
 8004274:	9a04      	ldr	r2, [sp, #16]
 8004276:	b9d8      	cbnz	r0, 80042b0 <_vfiprintf_r+0x110>
 8004278:	06d1      	lsls	r1, r2, #27
 800427a:	bf44      	itt	mi
 800427c:	2320      	movmi	r3, #32
 800427e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004282:	0713      	lsls	r3, r2, #28
 8004284:	bf44      	itt	mi
 8004286:	232b      	movmi	r3, #43	@ 0x2b
 8004288:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800428c:	f89a 3000 	ldrb.w	r3, [sl]
 8004290:	2b2a      	cmp	r3, #42	@ 0x2a
 8004292:	d015      	beq.n	80042c0 <_vfiprintf_r+0x120>
 8004294:	9a07      	ldr	r2, [sp, #28]
 8004296:	4654      	mov	r4, sl
 8004298:	2000      	movs	r0, #0
 800429a:	f04f 0c0a 	mov.w	ip, #10
 800429e:	4621      	mov	r1, r4
 80042a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042a4:	3b30      	subs	r3, #48	@ 0x30
 80042a6:	2b09      	cmp	r3, #9
 80042a8:	d94b      	bls.n	8004342 <_vfiprintf_r+0x1a2>
 80042aa:	b1b0      	cbz	r0, 80042da <_vfiprintf_r+0x13a>
 80042ac:	9207      	str	r2, [sp, #28]
 80042ae:	e014      	b.n	80042da <_vfiprintf_r+0x13a>
 80042b0:	eba0 0308 	sub.w	r3, r0, r8
 80042b4:	fa09 f303 	lsl.w	r3, r9, r3
 80042b8:	4313      	orrs	r3, r2
 80042ba:	9304      	str	r3, [sp, #16]
 80042bc:	46a2      	mov	sl, r4
 80042be:	e7d2      	b.n	8004266 <_vfiprintf_r+0xc6>
 80042c0:	9b03      	ldr	r3, [sp, #12]
 80042c2:	1d19      	adds	r1, r3, #4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	9103      	str	r1, [sp, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bfbb      	ittet	lt
 80042cc:	425b      	neglt	r3, r3
 80042ce:	f042 0202 	orrlt.w	r2, r2, #2
 80042d2:	9307      	strge	r3, [sp, #28]
 80042d4:	9307      	strlt	r3, [sp, #28]
 80042d6:	bfb8      	it	lt
 80042d8:	9204      	strlt	r2, [sp, #16]
 80042da:	7823      	ldrb	r3, [r4, #0]
 80042dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80042de:	d10a      	bne.n	80042f6 <_vfiprintf_r+0x156>
 80042e0:	7863      	ldrb	r3, [r4, #1]
 80042e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80042e4:	d132      	bne.n	800434c <_vfiprintf_r+0x1ac>
 80042e6:	9b03      	ldr	r3, [sp, #12]
 80042e8:	1d1a      	adds	r2, r3, #4
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	9203      	str	r2, [sp, #12]
 80042ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042f2:	3402      	adds	r4, #2
 80042f4:	9305      	str	r3, [sp, #20]
 80042f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80043cc <_vfiprintf_r+0x22c>
 80042fa:	7821      	ldrb	r1, [r4, #0]
 80042fc:	2203      	movs	r2, #3
 80042fe:	4650      	mov	r0, sl
 8004300:	f7fb ff66 	bl	80001d0 <memchr>
 8004304:	b138      	cbz	r0, 8004316 <_vfiprintf_r+0x176>
 8004306:	9b04      	ldr	r3, [sp, #16]
 8004308:	eba0 000a 	sub.w	r0, r0, sl
 800430c:	2240      	movs	r2, #64	@ 0x40
 800430e:	4082      	lsls	r2, r0
 8004310:	4313      	orrs	r3, r2
 8004312:	3401      	adds	r4, #1
 8004314:	9304      	str	r3, [sp, #16]
 8004316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800431a:	4829      	ldr	r0, [pc, #164]	@ (80043c0 <_vfiprintf_r+0x220>)
 800431c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004320:	2206      	movs	r2, #6
 8004322:	f7fb ff55 	bl	80001d0 <memchr>
 8004326:	2800      	cmp	r0, #0
 8004328:	d03f      	beq.n	80043aa <_vfiprintf_r+0x20a>
 800432a:	4b26      	ldr	r3, [pc, #152]	@ (80043c4 <_vfiprintf_r+0x224>)
 800432c:	bb1b      	cbnz	r3, 8004376 <_vfiprintf_r+0x1d6>
 800432e:	9b03      	ldr	r3, [sp, #12]
 8004330:	3307      	adds	r3, #7
 8004332:	f023 0307 	bic.w	r3, r3, #7
 8004336:	3308      	adds	r3, #8
 8004338:	9303      	str	r3, [sp, #12]
 800433a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800433c:	443b      	add	r3, r7
 800433e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004340:	e76a      	b.n	8004218 <_vfiprintf_r+0x78>
 8004342:	fb0c 3202 	mla	r2, ip, r2, r3
 8004346:	460c      	mov	r4, r1
 8004348:	2001      	movs	r0, #1
 800434a:	e7a8      	b.n	800429e <_vfiprintf_r+0xfe>
 800434c:	2300      	movs	r3, #0
 800434e:	3401      	adds	r4, #1
 8004350:	9305      	str	r3, [sp, #20]
 8004352:	4619      	mov	r1, r3
 8004354:	f04f 0c0a 	mov.w	ip, #10
 8004358:	4620      	mov	r0, r4
 800435a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800435e:	3a30      	subs	r2, #48	@ 0x30
 8004360:	2a09      	cmp	r2, #9
 8004362:	d903      	bls.n	800436c <_vfiprintf_r+0x1cc>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0c6      	beq.n	80042f6 <_vfiprintf_r+0x156>
 8004368:	9105      	str	r1, [sp, #20]
 800436a:	e7c4      	b.n	80042f6 <_vfiprintf_r+0x156>
 800436c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004370:	4604      	mov	r4, r0
 8004372:	2301      	movs	r3, #1
 8004374:	e7f0      	b.n	8004358 <_vfiprintf_r+0x1b8>
 8004376:	ab03      	add	r3, sp, #12
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	462a      	mov	r2, r5
 800437c:	4b12      	ldr	r3, [pc, #72]	@ (80043c8 <_vfiprintf_r+0x228>)
 800437e:	a904      	add	r1, sp, #16
 8004380:	4630      	mov	r0, r6
 8004382:	f3af 8000 	nop.w
 8004386:	4607      	mov	r7, r0
 8004388:	1c78      	adds	r0, r7, #1
 800438a:	d1d6      	bne.n	800433a <_vfiprintf_r+0x19a>
 800438c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800438e:	07d9      	lsls	r1, r3, #31
 8004390:	d405      	bmi.n	800439e <_vfiprintf_r+0x1fe>
 8004392:	89ab      	ldrh	r3, [r5, #12]
 8004394:	059a      	lsls	r2, r3, #22
 8004396:	d402      	bmi.n	800439e <_vfiprintf_r+0x1fe>
 8004398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800439a:	f7ff fddd 	bl	8003f58 <__retarget_lock_release_recursive>
 800439e:	89ab      	ldrh	r3, [r5, #12]
 80043a0:	065b      	lsls	r3, r3, #25
 80043a2:	f53f af1f 	bmi.w	80041e4 <_vfiprintf_r+0x44>
 80043a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043a8:	e71e      	b.n	80041e8 <_vfiprintf_r+0x48>
 80043aa:	ab03      	add	r3, sp, #12
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	462a      	mov	r2, r5
 80043b0:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <_vfiprintf_r+0x228>)
 80043b2:	a904      	add	r1, sp, #16
 80043b4:	4630      	mov	r0, r6
 80043b6:	f000 f879 	bl	80044ac <_printf_i>
 80043ba:	e7e4      	b.n	8004386 <_vfiprintf_r+0x1e6>
 80043bc:	080048b8 	.word	0x080048b8
 80043c0:	080048c2 	.word	0x080048c2
 80043c4:	00000000 	.word	0x00000000
 80043c8:	0800417b 	.word	0x0800417b
 80043cc:	080048be 	.word	0x080048be

080043d0 <_printf_common>:
 80043d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d4:	4616      	mov	r6, r2
 80043d6:	4698      	mov	r8, r3
 80043d8:	688a      	ldr	r2, [r1, #8]
 80043da:	690b      	ldr	r3, [r1, #16]
 80043dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043e0:	4293      	cmp	r3, r2
 80043e2:	bfb8      	it	lt
 80043e4:	4613      	movlt	r3, r2
 80043e6:	6033      	str	r3, [r6, #0]
 80043e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043ec:	4607      	mov	r7, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	b10a      	cbz	r2, 80043f6 <_printf_common+0x26>
 80043f2:	3301      	adds	r3, #1
 80043f4:	6033      	str	r3, [r6, #0]
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	0699      	lsls	r1, r3, #26
 80043fa:	bf42      	ittt	mi
 80043fc:	6833      	ldrmi	r3, [r6, #0]
 80043fe:	3302      	addmi	r3, #2
 8004400:	6033      	strmi	r3, [r6, #0]
 8004402:	6825      	ldr	r5, [r4, #0]
 8004404:	f015 0506 	ands.w	r5, r5, #6
 8004408:	d106      	bne.n	8004418 <_printf_common+0x48>
 800440a:	f104 0a19 	add.w	sl, r4, #25
 800440e:	68e3      	ldr	r3, [r4, #12]
 8004410:	6832      	ldr	r2, [r6, #0]
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	42ab      	cmp	r3, r5
 8004416:	dc26      	bgt.n	8004466 <_printf_common+0x96>
 8004418:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800441c:	6822      	ldr	r2, [r4, #0]
 800441e:	3b00      	subs	r3, #0
 8004420:	bf18      	it	ne
 8004422:	2301      	movne	r3, #1
 8004424:	0692      	lsls	r2, r2, #26
 8004426:	d42b      	bmi.n	8004480 <_printf_common+0xb0>
 8004428:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800442c:	4641      	mov	r1, r8
 800442e:	4638      	mov	r0, r7
 8004430:	47c8      	blx	r9
 8004432:	3001      	adds	r0, #1
 8004434:	d01e      	beq.n	8004474 <_printf_common+0xa4>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	6922      	ldr	r2, [r4, #16]
 800443a:	f003 0306 	and.w	r3, r3, #6
 800443e:	2b04      	cmp	r3, #4
 8004440:	bf02      	ittt	eq
 8004442:	68e5      	ldreq	r5, [r4, #12]
 8004444:	6833      	ldreq	r3, [r6, #0]
 8004446:	1aed      	subeq	r5, r5, r3
 8004448:	68a3      	ldr	r3, [r4, #8]
 800444a:	bf0c      	ite	eq
 800444c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004450:	2500      	movne	r5, #0
 8004452:	4293      	cmp	r3, r2
 8004454:	bfc4      	itt	gt
 8004456:	1a9b      	subgt	r3, r3, r2
 8004458:	18ed      	addgt	r5, r5, r3
 800445a:	2600      	movs	r6, #0
 800445c:	341a      	adds	r4, #26
 800445e:	42b5      	cmp	r5, r6
 8004460:	d11a      	bne.n	8004498 <_printf_common+0xc8>
 8004462:	2000      	movs	r0, #0
 8004464:	e008      	b.n	8004478 <_printf_common+0xa8>
 8004466:	2301      	movs	r3, #1
 8004468:	4652      	mov	r2, sl
 800446a:	4641      	mov	r1, r8
 800446c:	4638      	mov	r0, r7
 800446e:	47c8      	blx	r9
 8004470:	3001      	adds	r0, #1
 8004472:	d103      	bne.n	800447c <_printf_common+0xac>
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800447c:	3501      	adds	r5, #1
 800447e:	e7c6      	b.n	800440e <_printf_common+0x3e>
 8004480:	18e1      	adds	r1, r4, r3
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	2030      	movs	r0, #48	@ 0x30
 8004486:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800448a:	4422      	add	r2, r4
 800448c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004490:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004494:	3302      	adds	r3, #2
 8004496:	e7c7      	b.n	8004428 <_printf_common+0x58>
 8004498:	2301      	movs	r3, #1
 800449a:	4622      	mov	r2, r4
 800449c:	4641      	mov	r1, r8
 800449e:	4638      	mov	r0, r7
 80044a0:	47c8      	blx	r9
 80044a2:	3001      	adds	r0, #1
 80044a4:	d0e6      	beq.n	8004474 <_printf_common+0xa4>
 80044a6:	3601      	adds	r6, #1
 80044a8:	e7d9      	b.n	800445e <_printf_common+0x8e>
	...

080044ac <_printf_i>:
 80044ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044b0:	7e0f      	ldrb	r7, [r1, #24]
 80044b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044b4:	2f78      	cmp	r7, #120	@ 0x78
 80044b6:	4691      	mov	r9, r2
 80044b8:	4680      	mov	r8, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	469a      	mov	sl, r3
 80044be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044c2:	d807      	bhi.n	80044d4 <_printf_i+0x28>
 80044c4:	2f62      	cmp	r7, #98	@ 0x62
 80044c6:	d80a      	bhi.n	80044de <_printf_i+0x32>
 80044c8:	2f00      	cmp	r7, #0
 80044ca:	f000 80d1 	beq.w	8004670 <_printf_i+0x1c4>
 80044ce:	2f58      	cmp	r7, #88	@ 0x58
 80044d0:	f000 80b8 	beq.w	8004644 <_printf_i+0x198>
 80044d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044dc:	e03a      	b.n	8004554 <_printf_i+0xa8>
 80044de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044e2:	2b15      	cmp	r3, #21
 80044e4:	d8f6      	bhi.n	80044d4 <_printf_i+0x28>
 80044e6:	a101      	add	r1, pc, #4	@ (adr r1, 80044ec <_printf_i+0x40>)
 80044e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044ec:	08004545 	.word	0x08004545
 80044f0:	08004559 	.word	0x08004559
 80044f4:	080044d5 	.word	0x080044d5
 80044f8:	080044d5 	.word	0x080044d5
 80044fc:	080044d5 	.word	0x080044d5
 8004500:	080044d5 	.word	0x080044d5
 8004504:	08004559 	.word	0x08004559
 8004508:	080044d5 	.word	0x080044d5
 800450c:	080044d5 	.word	0x080044d5
 8004510:	080044d5 	.word	0x080044d5
 8004514:	080044d5 	.word	0x080044d5
 8004518:	08004657 	.word	0x08004657
 800451c:	08004583 	.word	0x08004583
 8004520:	08004611 	.word	0x08004611
 8004524:	080044d5 	.word	0x080044d5
 8004528:	080044d5 	.word	0x080044d5
 800452c:	08004679 	.word	0x08004679
 8004530:	080044d5 	.word	0x080044d5
 8004534:	08004583 	.word	0x08004583
 8004538:	080044d5 	.word	0x080044d5
 800453c:	080044d5 	.word	0x080044d5
 8004540:	08004619 	.word	0x08004619
 8004544:	6833      	ldr	r3, [r6, #0]
 8004546:	1d1a      	adds	r2, r3, #4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6032      	str	r2, [r6, #0]
 800454c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004550:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004554:	2301      	movs	r3, #1
 8004556:	e09c      	b.n	8004692 <_printf_i+0x1e6>
 8004558:	6833      	ldr	r3, [r6, #0]
 800455a:	6820      	ldr	r0, [r4, #0]
 800455c:	1d19      	adds	r1, r3, #4
 800455e:	6031      	str	r1, [r6, #0]
 8004560:	0606      	lsls	r6, r0, #24
 8004562:	d501      	bpl.n	8004568 <_printf_i+0xbc>
 8004564:	681d      	ldr	r5, [r3, #0]
 8004566:	e003      	b.n	8004570 <_printf_i+0xc4>
 8004568:	0645      	lsls	r5, r0, #25
 800456a:	d5fb      	bpl.n	8004564 <_printf_i+0xb8>
 800456c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004570:	2d00      	cmp	r5, #0
 8004572:	da03      	bge.n	800457c <_printf_i+0xd0>
 8004574:	232d      	movs	r3, #45	@ 0x2d
 8004576:	426d      	negs	r5, r5
 8004578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800457c:	4858      	ldr	r0, [pc, #352]	@ (80046e0 <_printf_i+0x234>)
 800457e:	230a      	movs	r3, #10
 8004580:	e011      	b.n	80045a6 <_printf_i+0xfa>
 8004582:	6821      	ldr	r1, [r4, #0]
 8004584:	6833      	ldr	r3, [r6, #0]
 8004586:	0608      	lsls	r0, r1, #24
 8004588:	f853 5b04 	ldr.w	r5, [r3], #4
 800458c:	d402      	bmi.n	8004594 <_printf_i+0xe8>
 800458e:	0649      	lsls	r1, r1, #25
 8004590:	bf48      	it	mi
 8004592:	b2ad      	uxthmi	r5, r5
 8004594:	2f6f      	cmp	r7, #111	@ 0x6f
 8004596:	4852      	ldr	r0, [pc, #328]	@ (80046e0 <_printf_i+0x234>)
 8004598:	6033      	str	r3, [r6, #0]
 800459a:	bf14      	ite	ne
 800459c:	230a      	movne	r3, #10
 800459e:	2308      	moveq	r3, #8
 80045a0:	2100      	movs	r1, #0
 80045a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045a6:	6866      	ldr	r6, [r4, #4]
 80045a8:	60a6      	str	r6, [r4, #8]
 80045aa:	2e00      	cmp	r6, #0
 80045ac:	db05      	blt.n	80045ba <_printf_i+0x10e>
 80045ae:	6821      	ldr	r1, [r4, #0]
 80045b0:	432e      	orrs	r6, r5
 80045b2:	f021 0104 	bic.w	r1, r1, #4
 80045b6:	6021      	str	r1, [r4, #0]
 80045b8:	d04b      	beq.n	8004652 <_printf_i+0x1a6>
 80045ba:	4616      	mov	r6, r2
 80045bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80045c0:	fb03 5711 	mls	r7, r3, r1, r5
 80045c4:	5dc7      	ldrb	r7, [r0, r7]
 80045c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045ca:	462f      	mov	r7, r5
 80045cc:	42bb      	cmp	r3, r7
 80045ce:	460d      	mov	r5, r1
 80045d0:	d9f4      	bls.n	80045bc <_printf_i+0x110>
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d10b      	bne.n	80045ee <_printf_i+0x142>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	07df      	lsls	r7, r3, #31
 80045da:	d508      	bpl.n	80045ee <_printf_i+0x142>
 80045dc:	6923      	ldr	r3, [r4, #16]
 80045de:	6861      	ldr	r1, [r4, #4]
 80045e0:	4299      	cmp	r1, r3
 80045e2:	bfde      	ittt	le
 80045e4:	2330      	movle	r3, #48	@ 0x30
 80045e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045ee:	1b92      	subs	r2, r2, r6
 80045f0:	6122      	str	r2, [r4, #16]
 80045f2:	f8cd a000 	str.w	sl, [sp]
 80045f6:	464b      	mov	r3, r9
 80045f8:	aa03      	add	r2, sp, #12
 80045fa:	4621      	mov	r1, r4
 80045fc:	4640      	mov	r0, r8
 80045fe:	f7ff fee7 	bl	80043d0 <_printf_common>
 8004602:	3001      	adds	r0, #1
 8004604:	d14a      	bne.n	800469c <_printf_i+0x1f0>
 8004606:	f04f 30ff 	mov.w	r0, #4294967295
 800460a:	b004      	add	sp, #16
 800460c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	f043 0320 	orr.w	r3, r3, #32
 8004616:	6023      	str	r3, [r4, #0]
 8004618:	4832      	ldr	r0, [pc, #200]	@ (80046e4 <_printf_i+0x238>)
 800461a:	2778      	movs	r7, #120	@ 0x78
 800461c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	6831      	ldr	r1, [r6, #0]
 8004624:	061f      	lsls	r7, r3, #24
 8004626:	f851 5b04 	ldr.w	r5, [r1], #4
 800462a:	d402      	bmi.n	8004632 <_printf_i+0x186>
 800462c:	065f      	lsls	r7, r3, #25
 800462e:	bf48      	it	mi
 8004630:	b2ad      	uxthmi	r5, r5
 8004632:	6031      	str	r1, [r6, #0]
 8004634:	07d9      	lsls	r1, r3, #31
 8004636:	bf44      	itt	mi
 8004638:	f043 0320 	orrmi.w	r3, r3, #32
 800463c:	6023      	strmi	r3, [r4, #0]
 800463e:	b11d      	cbz	r5, 8004648 <_printf_i+0x19c>
 8004640:	2310      	movs	r3, #16
 8004642:	e7ad      	b.n	80045a0 <_printf_i+0xf4>
 8004644:	4826      	ldr	r0, [pc, #152]	@ (80046e0 <_printf_i+0x234>)
 8004646:	e7e9      	b.n	800461c <_printf_i+0x170>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	f023 0320 	bic.w	r3, r3, #32
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	e7f6      	b.n	8004640 <_printf_i+0x194>
 8004652:	4616      	mov	r6, r2
 8004654:	e7bd      	b.n	80045d2 <_printf_i+0x126>
 8004656:	6833      	ldr	r3, [r6, #0]
 8004658:	6825      	ldr	r5, [r4, #0]
 800465a:	6961      	ldr	r1, [r4, #20]
 800465c:	1d18      	adds	r0, r3, #4
 800465e:	6030      	str	r0, [r6, #0]
 8004660:	062e      	lsls	r6, r5, #24
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	d501      	bpl.n	800466a <_printf_i+0x1be>
 8004666:	6019      	str	r1, [r3, #0]
 8004668:	e002      	b.n	8004670 <_printf_i+0x1c4>
 800466a:	0668      	lsls	r0, r5, #25
 800466c:	d5fb      	bpl.n	8004666 <_printf_i+0x1ba>
 800466e:	8019      	strh	r1, [r3, #0]
 8004670:	2300      	movs	r3, #0
 8004672:	6123      	str	r3, [r4, #16]
 8004674:	4616      	mov	r6, r2
 8004676:	e7bc      	b.n	80045f2 <_printf_i+0x146>
 8004678:	6833      	ldr	r3, [r6, #0]
 800467a:	1d1a      	adds	r2, r3, #4
 800467c:	6032      	str	r2, [r6, #0]
 800467e:	681e      	ldr	r6, [r3, #0]
 8004680:	6862      	ldr	r2, [r4, #4]
 8004682:	2100      	movs	r1, #0
 8004684:	4630      	mov	r0, r6
 8004686:	f7fb fda3 	bl	80001d0 <memchr>
 800468a:	b108      	cbz	r0, 8004690 <_printf_i+0x1e4>
 800468c:	1b80      	subs	r0, r0, r6
 800468e:	6060      	str	r0, [r4, #4]
 8004690:	6863      	ldr	r3, [r4, #4]
 8004692:	6123      	str	r3, [r4, #16]
 8004694:	2300      	movs	r3, #0
 8004696:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800469a:	e7aa      	b.n	80045f2 <_printf_i+0x146>
 800469c:	6923      	ldr	r3, [r4, #16]
 800469e:	4632      	mov	r2, r6
 80046a0:	4649      	mov	r1, r9
 80046a2:	4640      	mov	r0, r8
 80046a4:	47d0      	blx	sl
 80046a6:	3001      	adds	r0, #1
 80046a8:	d0ad      	beq.n	8004606 <_printf_i+0x15a>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	079b      	lsls	r3, r3, #30
 80046ae:	d413      	bmi.n	80046d8 <_printf_i+0x22c>
 80046b0:	68e0      	ldr	r0, [r4, #12]
 80046b2:	9b03      	ldr	r3, [sp, #12]
 80046b4:	4298      	cmp	r0, r3
 80046b6:	bfb8      	it	lt
 80046b8:	4618      	movlt	r0, r3
 80046ba:	e7a6      	b.n	800460a <_printf_i+0x15e>
 80046bc:	2301      	movs	r3, #1
 80046be:	4632      	mov	r2, r6
 80046c0:	4649      	mov	r1, r9
 80046c2:	4640      	mov	r0, r8
 80046c4:	47d0      	blx	sl
 80046c6:	3001      	adds	r0, #1
 80046c8:	d09d      	beq.n	8004606 <_printf_i+0x15a>
 80046ca:	3501      	adds	r5, #1
 80046cc:	68e3      	ldr	r3, [r4, #12]
 80046ce:	9903      	ldr	r1, [sp, #12]
 80046d0:	1a5b      	subs	r3, r3, r1
 80046d2:	42ab      	cmp	r3, r5
 80046d4:	dcf2      	bgt.n	80046bc <_printf_i+0x210>
 80046d6:	e7eb      	b.n	80046b0 <_printf_i+0x204>
 80046d8:	2500      	movs	r5, #0
 80046da:	f104 0619 	add.w	r6, r4, #25
 80046de:	e7f5      	b.n	80046cc <_printf_i+0x220>
 80046e0:	080048c9 	.word	0x080048c9
 80046e4:	080048da 	.word	0x080048da

080046e8 <__swhatbuf_r>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	460c      	mov	r4, r1
 80046ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f0:	2900      	cmp	r1, #0
 80046f2:	b096      	sub	sp, #88	@ 0x58
 80046f4:	4615      	mov	r5, r2
 80046f6:	461e      	mov	r6, r3
 80046f8:	da0d      	bge.n	8004716 <__swhatbuf_r+0x2e>
 80046fa:	89a3      	ldrh	r3, [r4, #12]
 80046fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004700:	f04f 0100 	mov.w	r1, #0
 8004704:	bf14      	ite	ne
 8004706:	2340      	movne	r3, #64	@ 0x40
 8004708:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800470c:	2000      	movs	r0, #0
 800470e:	6031      	str	r1, [r6, #0]
 8004710:	602b      	str	r3, [r5, #0]
 8004712:	b016      	add	sp, #88	@ 0x58
 8004714:	bd70      	pop	{r4, r5, r6, pc}
 8004716:	466a      	mov	r2, sp
 8004718:	f000 f848 	bl	80047ac <_fstat_r>
 800471c:	2800      	cmp	r0, #0
 800471e:	dbec      	blt.n	80046fa <__swhatbuf_r+0x12>
 8004720:	9901      	ldr	r1, [sp, #4]
 8004722:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004726:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800472a:	4259      	negs	r1, r3
 800472c:	4159      	adcs	r1, r3
 800472e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004732:	e7eb      	b.n	800470c <__swhatbuf_r+0x24>

08004734 <__smakebuf_r>:
 8004734:	898b      	ldrh	r3, [r1, #12]
 8004736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004738:	079d      	lsls	r5, r3, #30
 800473a:	4606      	mov	r6, r0
 800473c:	460c      	mov	r4, r1
 800473e:	d507      	bpl.n	8004750 <__smakebuf_r+0x1c>
 8004740:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	6123      	str	r3, [r4, #16]
 8004748:	2301      	movs	r3, #1
 800474a:	6163      	str	r3, [r4, #20]
 800474c:	b003      	add	sp, #12
 800474e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004750:	ab01      	add	r3, sp, #4
 8004752:	466a      	mov	r2, sp
 8004754:	f7ff ffc8 	bl	80046e8 <__swhatbuf_r>
 8004758:	9f00      	ldr	r7, [sp, #0]
 800475a:	4605      	mov	r5, r0
 800475c:	4639      	mov	r1, r7
 800475e:	4630      	mov	r0, r6
 8004760:	f7ff fc68 	bl	8004034 <_malloc_r>
 8004764:	b948      	cbnz	r0, 800477a <__smakebuf_r+0x46>
 8004766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800476a:	059a      	lsls	r2, r3, #22
 800476c:	d4ee      	bmi.n	800474c <__smakebuf_r+0x18>
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	f043 0302 	orr.w	r3, r3, #2
 8004776:	81a3      	strh	r3, [r4, #12]
 8004778:	e7e2      	b.n	8004740 <__smakebuf_r+0xc>
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	6020      	str	r0, [r4, #0]
 800477e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004782:	81a3      	strh	r3, [r4, #12]
 8004784:	9b01      	ldr	r3, [sp, #4]
 8004786:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800478a:	b15b      	cbz	r3, 80047a4 <__smakebuf_r+0x70>
 800478c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004790:	4630      	mov	r0, r6
 8004792:	f000 f81d 	bl	80047d0 <_isatty_r>
 8004796:	b128      	cbz	r0, 80047a4 <__smakebuf_r+0x70>
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	f023 0303 	bic.w	r3, r3, #3
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	81a3      	strh	r3, [r4, #12]
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	431d      	orrs	r5, r3
 80047a8:	81a5      	strh	r5, [r4, #12]
 80047aa:	e7cf      	b.n	800474c <__smakebuf_r+0x18>

080047ac <_fstat_r>:
 80047ac:	b538      	push	{r3, r4, r5, lr}
 80047ae:	4d07      	ldr	r5, [pc, #28]	@ (80047cc <_fstat_r+0x20>)
 80047b0:	2300      	movs	r3, #0
 80047b2:	4604      	mov	r4, r0
 80047b4:	4608      	mov	r0, r1
 80047b6:	4611      	mov	r1, r2
 80047b8:	602b      	str	r3, [r5, #0]
 80047ba:	f7fc fac2 	bl	8000d42 <_fstat>
 80047be:	1c43      	adds	r3, r0, #1
 80047c0:	d102      	bne.n	80047c8 <_fstat_r+0x1c>
 80047c2:	682b      	ldr	r3, [r5, #0]
 80047c4:	b103      	cbz	r3, 80047c8 <_fstat_r+0x1c>
 80047c6:	6023      	str	r3, [r4, #0]
 80047c8:	bd38      	pop	{r3, r4, r5, pc}
 80047ca:	bf00      	nop
 80047cc:	200002d8 	.word	0x200002d8

080047d0 <_isatty_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4d06      	ldr	r5, [pc, #24]	@ (80047ec <_isatty_r+0x1c>)
 80047d4:	2300      	movs	r3, #0
 80047d6:	4604      	mov	r4, r0
 80047d8:	4608      	mov	r0, r1
 80047da:	602b      	str	r3, [r5, #0]
 80047dc:	f7fc fac1 	bl	8000d62 <_isatty>
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d102      	bne.n	80047ea <_isatty_r+0x1a>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	b103      	cbz	r3, 80047ea <_isatty_r+0x1a>
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
 80047ec:	200002d8 	.word	0x200002d8

080047f0 <_sbrk_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4d06      	ldr	r5, [pc, #24]	@ (800480c <_sbrk_r+0x1c>)
 80047f4:	2300      	movs	r3, #0
 80047f6:	4604      	mov	r4, r0
 80047f8:	4608      	mov	r0, r1
 80047fa:	602b      	str	r3, [r5, #0]
 80047fc:	f7fc faca 	bl	8000d94 <_sbrk>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d102      	bne.n	800480a <_sbrk_r+0x1a>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	b103      	cbz	r3, 800480a <_sbrk_r+0x1a>
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	200002d8 	.word	0x200002d8

08004810 <_init>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	bf00      	nop
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr

0800481c <_fini>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	bf00      	nop
 8004820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004822:	bc08      	pop	{r3}
 8004824:	469e      	mov	lr, r3
 8004826:	4770      	bx	lr
